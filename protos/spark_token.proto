syntax = "proto3";

package spark_token;

import "google/protobuf/timestamp.proto";
import "spark.proto";
import "validate/validate.proto";

option go_package = "github.com/lightsparkdev/spark/proto/spark_token";

service SparkTokenService {
    // Start process to create final token transaction with all inputs required
    // from user and SOs (including revocation secret commitment)
    rpc start_transaction(StartTransactionRequest)
        returns (StartTransactionResponse) {}
    // Complete the transaction and commit it with all SOs. This will be
    // coordinated by one SO.
    rpc commit_transaction(CommitTransactionRequest)
        returns (CommitTransactionResponse) {}
}

// This proto is constructed by the wallet to specify leaves it wants to spend
// as part of the token transaction.
message TokenOutputToSpend {
    bytes prev_token_transaction_hash  = 1 [(validate.rules).bytes.len = 32];
    uint32 prev_token_transaction_vout = 2;
}

message TokenTransferInput {
    repeated TokenOutputToSpend outputs_to_spend = 1;
}

message TokenMintInput {
    bytes issuer_public_key = 1 [(validate.rules).bytes.len = 33];
    // Issuer provided timestamp of when the transaction was signed/constructed.
    // Helps provide idempotency and ensures that each mint input signature is
    // unique as long as multiple mint signatures are not happening at the same
    // time. Also gives a potentially useful data point for when the issuer
    // authorized from their perspective.  Note that we have no way of proving
    // this is accurate.
    // TODO: Consider whether implementing generic idempotency controls and/or a
    // random nonce would be favorable to populating this field.
    uint64 issuer_provided_timestamp = 2;
}

// This proto is constructed by the wallet to specify outputs it wants to create
// as part of a token transaction. Output id and revocation public key should
// remain unfilled so that the SE can fill them as part of the
// StartTokenTransaction() call.
message TokenOutput {
    optional string id     = 1 [(validate.rules).string.uuid = true];
    bytes owner_public_key = 2 [(validate.rules).bytes.len = 33];
    optional bytes revocation_commitment = 3 [(validate.rules).bytes.len = 33];
    optional uint64 withdraw_bond_sats   = 4;
    optional uint64 withdraw_relative_block_locktime = 5;
    bytes token_public_key = 6 [(validate.rules).bytes.len = 33];
    bytes token_amount     = 7
        [(validate.rules).bytes.len = 16];  // Decoded uint128
}

// This proto is constructed by the wallet and is the core transaction data
// structure. This proto is deterministically hashed to generate the
// token_transaction_hash that is cooperatively signed by the SO group to
// confirm a token transaction.
message TokenTransaction {
    // For mint transactions issuer_public_key will be specified without any
    // outputs_to_spend. For transfer transactions the token amount in the input
    // leaves must match the token amount in the output leaves.
    uint32 version = 1;
    oneof token_inputs {
        TokenMintInput mint_input         = 2;
        TokenTransferInput transfer_input = 3;
    }
    repeated TokenOutput token_outputs                 = 4;
    repeated bytes spark_operator_identity_public_keys = 5
        [(validate.rules).repeated .items.bytes.len = 33];
    // Server-set expiry time. The server calculates this by adding the client's
    // requested validity_duration_seconds to the server's current time when
    // creating the final transaction.
    google.protobuf.Timestamp expiry_time = 6;
    spark.Network network = 7 [(validate.rules).enum = { not_in: [ 0 ] }];
}

message SignatureWithIndex {
    // This is a Schnorr or ECDSA DER signature which can be between 64 and 73
    // bytes.
    bytes signature = 1 [
        (validate.rules).bytes.min_len = 64,
        (validate.rules).bytes.max_len = 73
    ];
    // The index of the TTXO associated with this signature.
    uint32 input_index = 2;
}

// A group of signatures for the input TTXOs binding them to the final token
// transaction hash. This bundle of signatures is specific to a given operator.
message InputTtxoSignaturesPerOperator {
    repeated SignatureWithIndex ttxo_signatures = 1;
    bytes operator_identity_public_key = 2 [(validate.rules).bytes.len = 33];
}

// === Start Transaction ===
message StartTransactionRequest {
    bytes identity_public_key = 1 [(validate.rules).bytes.len = 33];
    TokenTransaction partial_token_transaction = 2;
    // Filled by signing the partial token transaction hash with the
    // owner/issuer private key. For mint transactions this will be one
    // signature for the input issuer_public_key For transfer transactions this
    // will be one for each output for the output owner_public_key
    repeated SignatureWithIndex partial_token_transaction_owner_signatures = 3;
    // How long the transaction should be valid for, in seconds.
    // The server will set the actual expiry_time in the final transaction based
    // on this duration. Must be between 1 and 300 seconds.
    uint64 validity_duration_seconds = 4
        [(validate.rules).uint64 = { gt: 1, lt: 300 }];
}

message StartTransactionResponse {
    TokenTransaction final_token_transaction = 1;
    spark.SigningKeyshare keyshare_info      = 2;
}

message CommitTransactionRequest {
    TokenTransaction final_token_transaction = 1;
    bytes final_token_transaction_hash = 2 [(validate.rules).bytes.len = 32];
    repeated InputTtxoSignaturesPerOperator
        input_ttxo_signatures_per_operator = 3;
    bytes owner_identity_public_key = 4 [(validate.rules).bytes.len = 33];
}

message CommitTransactionResponse {}
