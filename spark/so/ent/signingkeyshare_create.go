// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/signingkeyshare"
)

// SigningKeyshareCreate is the builder for creating a SigningKeyshare entity.
type SigningKeyshareCreate struct {
	config
	mutation *SigningKeyshareMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (skc *SigningKeyshareCreate) SetCreateTime(t time.Time) *SigningKeyshareCreate {
	skc.mutation.SetCreateTime(t)
	return skc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (skc *SigningKeyshareCreate) SetNillableCreateTime(t *time.Time) *SigningKeyshareCreate {
	if t != nil {
		skc.SetCreateTime(*t)
	}
	return skc
}

// SetUpdateTime sets the "update_time" field.
func (skc *SigningKeyshareCreate) SetUpdateTime(t time.Time) *SigningKeyshareCreate {
	skc.mutation.SetUpdateTime(t)
	return skc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (skc *SigningKeyshareCreate) SetNillableUpdateTime(t *time.Time) *SigningKeyshareCreate {
	if t != nil {
		skc.SetUpdateTime(*t)
	}
	return skc
}

// SetStatus sets the "status" field.
func (skc *SigningKeyshareCreate) SetStatus(sks schematype.SigningKeyshareStatus) *SigningKeyshareCreate {
	skc.mutation.SetStatus(sks)
	return skc
}

// SetSecretShare sets the "secret_share" field.
func (skc *SigningKeyshareCreate) SetSecretShare(b []byte) *SigningKeyshareCreate {
	skc.mutation.SetSecretShare(b)
	return skc
}

// SetPublicShares sets the "public_shares" field.
func (skc *SigningKeyshareCreate) SetPublicShares(m map[string][]uint8) *SigningKeyshareCreate {
	skc.mutation.SetPublicShares(m)
	return skc
}

// SetPublicKey sets the "public_key" field.
func (skc *SigningKeyshareCreate) SetPublicKey(b []byte) *SigningKeyshareCreate {
	skc.mutation.SetPublicKey(b)
	return skc
}

// SetMinSigners sets the "min_signers" field.
func (skc *SigningKeyshareCreate) SetMinSigners(i int32) *SigningKeyshareCreate {
	skc.mutation.SetMinSigners(i)
	return skc
}

// SetCoordinatorIndex sets the "coordinator_index" field.
func (skc *SigningKeyshareCreate) SetCoordinatorIndex(u uint64) *SigningKeyshareCreate {
	skc.mutation.SetCoordinatorIndex(u)
	return skc
}

// SetID sets the "id" field.
func (skc *SigningKeyshareCreate) SetID(u uuid.UUID) *SigningKeyshareCreate {
	skc.mutation.SetID(u)
	return skc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (skc *SigningKeyshareCreate) SetNillableID(u *uuid.UUID) *SigningKeyshareCreate {
	if u != nil {
		skc.SetID(*u)
	}
	return skc
}

// Mutation returns the SigningKeyshareMutation object of the builder.
func (skc *SigningKeyshareCreate) Mutation() *SigningKeyshareMutation {
	return skc.mutation
}

// Save creates the SigningKeyshare in the database.
func (skc *SigningKeyshareCreate) Save(ctx context.Context) (*SigningKeyshare, error) {
	skc.defaults()
	return withHooks(ctx, skc.sqlSave, skc.mutation, skc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (skc *SigningKeyshareCreate) SaveX(ctx context.Context) *SigningKeyshare {
	v, err := skc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (skc *SigningKeyshareCreate) Exec(ctx context.Context) error {
	_, err := skc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (skc *SigningKeyshareCreate) ExecX(ctx context.Context) {
	if err := skc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (skc *SigningKeyshareCreate) defaults() {
	if _, ok := skc.mutation.CreateTime(); !ok {
		v := signingkeyshare.DefaultCreateTime()
		skc.mutation.SetCreateTime(v)
	}
	if _, ok := skc.mutation.UpdateTime(); !ok {
		v := signingkeyshare.DefaultUpdateTime()
		skc.mutation.SetUpdateTime(v)
	}
	if _, ok := skc.mutation.ID(); !ok {
		v := signingkeyshare.DefaultID()
		skc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (skc *SigningKeyshareCreate) check() error {
	if _, ok := skc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SigningKeyshare.create_time"`)}
	}
	if _, ok := skc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SigningKeyshare.update_time"`)}
	}
	if _, ok := skc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SigningKeyshare.status"`)}
	}
	if v, ok := skc.mutation.Status(); ok {
		if err := signingkeyshare.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SigningKeyshare.status": %w`, err)}
		}
	}
	if _, ok := skc.mutation.SecretShare(); !ok {
		return &ValidationError{Name: "secret_share", err: errors.New(`ent: missing required field "SigningKeyshare.secret_share"`)}
	}
	if _, ok := skc.mutation.PublicShares(); !ok {
		return &ValidationError{Name: "public_shares", err: errors.New(`ent: missing required field "SigningKeyshare.public_shares"`)}
	}
	if _, ok := skc.mutation.PublicKey(); !ok {
		return &ValidationError{Name: "public_key", err: errors.New(`ent: missing required field "SigningKeyshare.public_key"`)}
	}
	if _, ok := skc.mutation.MinSigners(); !ok {
		return &ValidationError{Name: "min_signers", err: errors.New(`ent: missing required field "SigningKeyshare.min_signers"`)}
	}
	if _, ok := skc.mutation.CoordinatorIndex(); !ok {
		return &ValidationError{Name: "coordinator_index", err: errors.New(`ent: missing required field "SigningKeyshare.coordinator_index"`)}
	}
	return nil
}

func (skc *SigningKeyshareCreate) sqlSave(ctx context.Context) (*SigningKeyshare, error) {
	if err := skc.check(); err != nil {
		return nil, err
	}
	_node, _spec := skc.createSpec()
	if err := sqlgraph.CreateNode(ctx, skc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	skc.mutation.id = &_node.ID
	skc.mutation.done = true
	return _node, nil
}

func (skc *SigningKeyshareCreate) createSpec() (*SigningKeyshare, *sqlgraph.CreateSpec) {
	var (
		_node = &SigningKeyshare{config: skc.config}
		_spec = sqlgraph.NewCreateSpec(signingkeyshare.Table, sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID))
	)
	if id, ok := skc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := skc.mutation.CreateTime(); ok {
		_spec.SetField(signingkeyshare.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := skc.mutation.UpdateTime(); ok {
		_spec.SetField(signingkeyshare.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := skc.mutation.Status(); ok {
		_spec.SetField(signingkeyshare.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := skc.mutation.SecretShare(); ok {
		_spec.SetField(signingkeyshare.FieldSecretShare, field.TypeBytes, value)
		_node.SecretShare = value
	}
	if value, ok := skc.mutation.PublicShares(); ok {
		_spec.SetField(signingkeyshare.FieldPublicShares, field.TypeJSON, value)
		_node.PublicShares = value
	}
	if value, ok := skc.mutation.PublicKey(); ok {
		_spec.SetField(signingkeyshare.FieldPublicKey, field.TypeBytes, value)
		_node.PublicKey = value
	}
	if value, ok := skc.mutation.MinSigners(); ok {
		_spec.SetField(signingkeyshare.FieldMinSigners, field.TypeInt32, value)
		_node.MinSigners = value
	}
	if value, ok := skc.mutation.CoordinatorIndex(); ok {
		_spec.SetField(signingkeyshare.FieldCoordinatorIndex, field.TypeUint64, value)
		_node.CoordinatorIndex = value
	}
	return _node, _spec
}

// SigningKeyshareCreateBulk is the builder for creating many SigningKeyshare entities in bulk.
type SigningKeyshareCreateBulk struct {
	config
	err      error
	builders []*SigningKeyshareCreate
}

// Save creates the SigningKeyshare entities in the database.
func (skcb *SigningKeyshareCreateBulk) Save(ctx context.Context) ([]*SigningKeyshare, error) {
	if skcb.err != nil {
		return nil, skcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(skcb.builders))
	nodes := make([]*SigningKeyshare, len(skcb.builders))
	mutators := make([]Mutator, len(skcb.builders))
	for i := range skcb.builders {
		func(i int, root context.Context) {
			builder := skcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SigningKeyshareMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, skcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, skcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, skcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (skcb *SigningKeyshareCreateBulk) SaveX(ctx context.Context) []*SigningKeyshare {
	v, err := skcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (skcb *SigningKeyshareCreateBulk) Exec(ctx context.Context) error {
	_, err := skcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (skcb *SigningKeyshareCreateBulk) ExecX(ctx context.Context) {
	if err := skcb.Exec(ctx); err != nil {
		panic(err)
	}
}
