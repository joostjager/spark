// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/tokenleaf"
	"github.com/lightsparkdev/spark/so/ent/tokentransactionreceipt"
)

// TokenLeafUpdate is the builder for updating TokenLeaf entities.
type TokenLeafUpdate struct {
	config
	hooks    []Hook
	mutation *TokenLeafMutation
}

// Where appends a list predicates to the TokenLeafUpdate builder.
func (tlu *TokenLeafUpdate) Where(ps ...predicate.TokenLeaf) *TokenLeafUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetUpdateTime sets the "update_time" field.
func (tlu *TokenLeafUpdate) SetUpdateTime(t time.Time) *TokenLeafUpdate {
	tlu.mutation.SetUpdateTime(t)
	return tlu
}

// SetStatus sets the "status" field.
func (tlu *TokenLeafUpdate) SetStatus(sls schematype.TokenLeafStatus) *TokenLeafUpdate {
	tlu.mutation.SetStatus(sls)
	return tlu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tlu *TokenLeafUpdate) SetNillableStatus(sls *schematype.TokenLeafStatus) *TokenLeafUpdate {
	if sls != nil {
		tlu.SetStatus(*sls)
	}
	return tlu
}

// SetLeafSpentOwnershipSignature sets the "leaf_spent_ownership_signature" field.
func (tlu *TokenLeafUpdate) SetLeafSpentOwnershipSignature(b []byte) *TokenLeafUpdate {
	tlu.mutation.SetLeafSpentOwnershipSignature(b)
	return tlu
}

// ClearLeafSpentOwnershipSignature clears the value of the "leaf_spent_ownership_signature" field.
func (tlu *TokenLeafUpdate) ClearLeafSpentOwnershipSignature() *TokenLeafUpdate {
	tlu.mutation.ClearLeafSpentOwnershipSignature()
	return tlu
}

// SetLeafSpentOperatorSpecificOwnershipSignature sets the "leaf_spent_operator_specific_ownership_signature" field.
func (tlu *TokenLeafUpdate) SetLeafSpentOperatorSpecificOwnershipSignature(b []byte) *TokenLeafUpdate {
	tlu.mutation.SetLeafSpentOperatorSpecificOwnershipSignature(b)
	return tlu
}

// ClearLeafSpentOperatorSpecificOwnershipSignature clears the value of the "leaf_spent_operator_specific_ownership_signature" field.
func (tlu *TokenLeafUpdate) ClearLeafSpentOperatorSpecificOwnershipSignature() *TokenLeafUpdate {
	tlu.mutation.ClearLeafSpentOperatorSpecificOwnershipSignature()
	return tlu
}

// SetLeafSpentTransactionInputVout sets the "leaf_spent_transaction_input_vout" field.
func (tlu *TokenLeafUpdate) SetLeafSpentTransactionInputVout(i int32) *TokenLeafUpdate {
	tlu.mutation.ResetLeafSpentTransactionInputVout()
	tlu.mutation.SetLeafSpentTransactionInputVout(i)
	return tlu
}

// SetNillableLeafSpentTransactionInputVout sets the "leaf_spent_transaction_input_vout" field if the given value is not nil.
func (tlu *TokenLeafUpdate) SetNillableLeafSpentTransactionInputVout(i *int32) *TokenLeafUpdate {
	if i != nil {
		tlu.SetLeafSpentTransactionInputVout(*i)
	}
	return tlu
}

// AddLeafSpentTransactionInputVout adds i to the "leaf_spent_transaction_input_vout" field.
func (tlu *TokenLeafUpdate) AddLeafSpentTransactionInputVout(i int32) *TokenLeafUpdate {
	tlu.mutation.AddLeafSpentTransactionInputVout(i)
	return tlu
}

// ClearLeafSpentTransactionInputVout clears the value of the "leaf_spent_transaction_input_vout" field.
func (tlu *TokenLeafUpdate) ClearLeafSpentTransactionInputVout() *TokenLeafUpdate {
	tlu.mutation.ClearLeafSpentTransactionInputVout()
	return tlu
}

// SetLeafSpentRevocationPrivateKey sets the "leaf_spent_revocation_private_key" field.
func (tlu *TokenLeafUpdate) SetLeafSpentRevocationPrivateKey(b []byte) *TokenLeafUpdate {
	tlu.mutation.SetLeafSpentRevocationPrivateKey(b)
	return tlu
}

// ClearLeafSpentRevocationPrivateKey clears the value of the "leaf_spent_revocation_private_key" field.
func (tlu *TokenLeafUpdate) ClearLeafSpentRevocationPrivateKey() *TokenLeafUpdate {
	tlu.mutation.ClearLeafSpentRevocationPrivateKey()
	return tlu
}

// SetConfirmedWithdrawBlockHash sets the "confirmed_withdraw_block_hash" field.
func (tlu *TokenLeafUpdate) SetConfirmedWithdrawBlockHash(b []byte) *TokenLeafUpdate {
	tlu.mutation.SetConfirmedWithdrawBlockHash(b)
	return tlu
}

// ClearConfirmedWithdrawBlockHash clears the value of the "confirmed_withdraw_block_hash" field.
func (tlu *TokenLeafUpdate) ClearConfirmedWithdrawBlockHash() *TokenLeafUpdate {
	tlu.mutation.ClearConfirmedWithdrawBlockHash()
	return tlu
}

// SetNetwork sets the "network" field.
func (tlu *TokenLeafUpdate) SetNetwork(s schematype.Network) *TokenLeafUpdate {
	tlu.mutation.SetNetwork(s)
	return tlu
}

// SetNillableNetwork sets the "network" field if the given value is not nil.
func (tlu *TokenLeafUpdate) SetNillableNetwork(s *schematype.Network) *TokenLeafUpdate {
	if s != nil {
		tlu.SetNetwork(*s)
	}
	return tlu
}

// ClearNetwork clears the value of the "network" field.
func (tlu *TokenLeafUpdate) ClearNetwork() *TokenLeafUpdate {
	tlu.mutation.ClearNetwork()
	return tlu
}

// SetLeafCreatedTokenTransactionReceiptID sets the "leaf_created_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID.
func (tlu *TokenLeafUpdate) SetLeafCreatedTokenTransactionReceiptID(id uuid.UUID) *TokenLeafUpdate {
	tlu.mutation.SetLeafCreatedTokenTransactionReceiptID(id)
	return tlu
}

// SetNillableLeafCreatedTokenTransactionReceiptID sets the "leaf_created_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID if the given value is not nil.
func (tlu *TokenLeafUpdate) SetNillableLeafCreatedTokenTransactionReceiptID(id *uuid.UUID) *TokenLeafUpdate {
	if id != nil {
		tlu = tlu.SetLeafCreatedTokenTransactionReceiptID(*id)
	}
	return tlu
}

// SetLeafCreatedTokenTransactionReceipt sets the "leaf_created_token_transaction_receipt" edge to the TokenTransactionReceipt entity.
func (tlu *TokenLeafUpdate) SetLeafCreatedTokenTransactionReceipt(t *TokenTransactionReceipt) *TokenLeafUpdate {
	return tlu.SetLeafCreatedTokenTransactionReceiptID(t.ID)
}

// SetLeafSpentTokenTransactionReceiptID sets the "leaf_spent_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID.
func (tlu *TokenLeafUpdate) SetLeafSpentTokenTransactionReceiptID(id uuid.UUID) *TokenLeafUpdate {
	tlu.mutation.SetLeafSpentTokenTransactionReceiptID(id)
	return tlu
}

// SetNillableLeafSpentTokenTransactionReceiptID sets the "leaf_spent_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID if the given value is not nil.
func (tlu *TokenLeafUpdate) SetNillableLeafSpentTokenTransactionReceiptID(id *uuid.UUID) *TokenLeafUpdate {
	if id != nil {
		tlu = tlu.SetLeafSpentTokenTransactionReceiptID(*id)
	}
	return tlu
}

// SetLeafSpentTokenTransactionReceipt sets the "leaf_spent_token_transaction_receipt" edge to the TokenTransactionReceipt entity.
func (tlu *TokenLeafUpdate) SetLeafSpentTokenTransactionReceipt(t *TokenTransactionReceipt) *TokenLeafUpdate {
	return tlu.SetLeafSpentTokenTransactionReceiptID(t.ID)
}

// Mutation returns the TokenLeafMutation object of the builder.
func (tlu *TokenLeafUpdate) Mutation() *TokenLeafMutation {
	return tlu.mutation
}

// ClearLeafCreatedTokenTransactionReceipt clears the "leaf_created_token_transaction_receipt" edge to the TokenTransactionReceipt entity.
func (tlu *TokenLeafUpdate) ClearLeafCreatedTokenTransactionReceipt() *TokenLeafUpdate {
	tlu.mutation.ClearLeafCreatedTokenTransactionReceipt()
	return tlu
}

// ClearLeafSpentTokenTransactionReceipt clears the "leaf_spent_token_transaction_receipt" edge to the TokenTransactionReceipt entity.
func (tlu *TokenLeafUpdate) ClearLeafSpentTokenTransactionReceipt() *TokenLeafUpdate {
	tlu.mutation.ClearLeafSpentTokenTransactionReceipt()
	return tlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TokenLeafUpdate) Save(ctx context.Context) (int, error) {
	tlu.defaults()
	return withHooks(ctx, tlu.sqlSave, tlu.mutation, tlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TokenLeafUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TokenLeafUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TokenLeafUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlu *TokenLeafUpdate) defaults() {
	if _, ok := tlu.mutation.UpdateTime(); !ok {
		v := tokenleaf.UpdateDefaultUpdateTime()
		tlu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlu *TokenLeafUpdate) check() error {
	if v, ok := tlu.mutation.Status(); ok {
		if err := tokenleaf.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TokenLeaf.status": %w`, err)}
		}
	}
	if v, ok := tlu.mutation.Network(); ok {
		if err := tokenleaf.NetworkValidator(v); err != nil {
			return &ValidationError{Name: "network", err: fmt.Errorf(`ent: validator failed for field "TokenLeaf.network": %w`, err)}
		}
	}
	if tlu.mutation.RevocationKeyshareCleared() && len(tlu.mutation.RevocationKeyshareIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TokenLeaf.revocation_keyshare"`)
	}
	return nil
}

func (tlu *TokenLeafUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tokenleaf.Table, tokenleaf.Columns, sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID))
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.UpdateTime(); ok {
		_spec.SetField(tokenleaf.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tlu.mutation.Status(); ok {
		_spec.SetField(tokenleaf.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tlu.mutation.LeafSpentOwnershipSignature(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentOwnershipSignature, field.TypeBytes, value)
	}
	if tlu.mutation.LeafSpentOwnershipSignatureCleared() {
		_spec.ClearField(tokenleaf.FieldLeafSpentOwnershipSignature, field.TypeBytes)
	}
	if value, ok := tlu.mutation.LeafSpentOperatorSpecificOwnershipSignature(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentOperatorSpecificOwnershipSignature, field.TypeBytes, value)
	}
	if tlu.mutation.LeafSpentOperatorSpecificOwnershipSignatureCleared() {
		_spec.ClearField(tokenleaf.FieldLeafSpentOperatorSpecificOwnershipSignature, field.TypeBytes)
	}
	if value, ok := tlu.mutation.LeafSpentTransactionInputVout(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentTransactionInputVout, field.TypeInt32, value)
	}
	if value, ok := tlu.mutation.AddedLeafSpentTransactionInputVout(); ok {
		_spec.AddField(tokenleaf.FieldLeafSpentTransactionInputVout, field.TypeInt32, value)
	}
	if tlu.mutation.LeafSpentTransactionInputVoutCleared() {
		_spec.ClearField(tokenleaf.FieldLeafSpentTransactionInputVout, field.TypeInt32)
	}
	if value, ok := tlu.mutation.LeafSpentRevocationPrivateKey(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentRevocationPrivateKey, field.TypeBytes, value)
	}
	if tlu.mutation.LeafSpentRevocationPrivateKeyCleared() {
		_spec.ClearField(tokenleaf.FieldLeafSpentRevocationPrivateKey, field.TypeBytes)
	}
	if value, ok := tlu.mutation.ConfirmedWithdrawBlockHash(); ok {
		_spec.SetField(tokenleaf.FieldConfirmedWithdrawBlockHash, field.TypeBytes, value)
	}
	if tlu.mutation.ConfirmedWithdrawBlockHashCleared() {
		_spec.ClearField(tokenleaf.FieldConfirmedWithdrawBlockHash, field.TypeBytes)
	}
	if value, ok := tlu.mutation.Network(); ok {
		_spec.SetField(tokenleaf.FieldNetwork, field.TypeEnum, value)
	}
	if tlu.mutation.NetworkCleared() {
		_spec.ClearField(tokenleaf.FieldNetwork, field.TypeEnum)
	}
	if tlu.mutation.LeafCreatedTokenTransactionReceiptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenleaf.LeafCreatedTokenTransactionReceiptTable,
			Columns: []string{tokenleaf.LeafCreatedTokenTransactionReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.LeafCreatedTokenTransactionReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenleaf.LeafCreatedTokenTransactionReceiptTable,
			Columns: []string{tokenleaf.LeafCreatedTokenTransactionReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tlu.mutation.LeafSpentTokenTransactionReceiptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenleaf.LeafSpentTokenTransactionReceiptTable,
			Columns: []string{tokenleaf.LeafSpentTokenTransactionReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.LeafSpentTokenTransactionReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenleaf.LeafSpentTokenTransactionReceiptTable,
			Columns: []string{tokenleaf.LeafSpentTokenTransactionReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokenleaf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tlu.mutation.done = true
	return n, nil
}

// TokenLeafUpdateOne is the builder for updating a single TokenLeaf entity.
type TokenLeafUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TokenLeafMutation
}

// SetUpdateTime sets the "update_time" field.
func (tluo *TokenLeafUpdateOne) SetUpdateTime(t time.Time) *TokenLeafUpdateOne {
	tluo.mutation.SetUpdateTime(t)
	return tluo
}

// SetStatus sets the "status" field.
func (tluo *TokenLeafUpdateOne) SetStatus(sls schematype.TokenLeafStatus) *TokenLeafUpdateOne {
	tluo.mutation.SetStatus(sls)
	return tluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tluo *TokenLeafUpdateOne) SetNillableStatus(sls *schematype.TokenLeafStatus) *TokenLeafUpdateOne {
	if sls != nil {
		tluo.SetStatus(*sls)
	}
	return tluo
}

// SetLeafSpentOwnershipSignature sets the "leaf_spent_ownership_signature" field.
func (tluo *TokenLeafUpdateOne) SetLeafSpentOwnershipSignature(b []byte) *TokenLeafUpdateOne {
	tluo.mutation.SetLeafSpentOwnershipSignature(b)
	return tluo
}

// ClearLeafSpentOwnershipSignature clears the value of the "leaf_spent_ownership_signature" field.
func (tluo *TokenLeafUpdateOne) ClearLeafSpentOwnershipSignature() *TokenLeafUpdateOne {
	tluo.mutation.ClearLeafSpentOwnershipSignature()
	return tluo
}

// SetLeafSpentOperatorSpecificOwnershipSignature sets the "leaf_spent_operator_specific_ownership_signature" field.
func (tluo *TokenLeafUpdateOne) SetLeafSpentOperatorSpecificOwnershipSignature(b []byte) *TokenLeafUpdateOne {
	tluo.mutation.SetLeafSpentOperatorSpecificOwnershipSignature(b)
	return tluo
}

// ClearLeafSpentOperatorSpecificOwnershipSignature clears the value of the "leaf_spent_operator_specific_ownership_signature" field.
func (tluo *TokenLeafUpdateOne) ClearLeafSpentOperatorSpecificOwnershipSignature() *TokenLeafUpdateOne {
	tluo.mutation.ClearLeafSpentOperatorSpecificOwnershipSignature()
	return tluo
}

// SetLeafSpentTransactionInputVout sets the "leaf_spent_transaction_input_vout" field.
func (tluo *TokenLeafUpdateOne) SetLeafSpentTransactionInputVout(i int32) *TokenLeafUpdateOne {
	tluo.mutation.ResetLeafSpentTransactionInputVout()
	tluo.mutation.SetLeafSpentTransactionInputVout(i)
	return tluo
}

// SetNillableLeafSpentTransactionInputVout sets the "leaf_spent_transaction_input_vout" field if the given value is not nil.
func (tluo *TokenLeafUpdateOne) SetNillableLeafSpentTransactionInputVout(i *int32) *TokenLeafUpdateOne {
	if i != nil {
		tluo.SetLeafSpentTransactionInputVout(*i)
	}
	return tluo
}

// AddLeafSpentTransactionInputVout adds i to the "leaf_spent_transaction_input_vout" field.
func (tluo *TokenLeafUpdateOne) AddLeafSpentTransactionInputVout(i int32) *TokenLeafUpdateOne {
	tluo.mutation.AddLeafSpentTransactionInputVout(i)
	return tluo
}

// ClearLeafSpentTransactionInputVout clears the value of the "leaf_spent_transaction_input_vout" field.
func (tluo *TokenLeafUpdateOne) ClearLeafSpentTransactionInputVout() *TokenLeafUpdateOne {
	tluo.mutation.ClearLeafSpentTransactionInputVout()
	return tluo
}

// SetLeafSpentRevocationPrivateKey sets the "leaf_spent_revocation_private_key" field.
func (tluo *TokenLeafUpdateOne) SetLeafSpentRevocationPrivateKey(b []byte) *TokenLeafUpdateOne {
	tluo.mutation.SetLeafSpentRevocationPrivateKey(b)
	return tluo
}

// ClearLeafSpentRevocationPrivateKey clears the value of the "leaf_spent_revocation_private_key" field.
func (tluo *TokenLeafUpdateOne) ClearLeafSpentRevocationPrivateKey() *TokenLeafUpdateOne {
	tluo.mutation.ClearLeafSpentRevocationPrivateKey()
	return tluo
}

// SetConfirmedWithdrawBlockHash sets the "confirmed_withdraw_block_hash" field.
func (tluo *TokenLeafUpdateOne) SetConfirmedWithdrawBlockHash(b []byte) *TokenLeafUpdateOne {
	tluo.mutation.SetConfirmedWithdrawBlockHash(b)
	return tluo
}

// ClearConfirmedWithdrawBlockHash clears the value of the "confirmed_withdraw_block_hash" field.
func (tluo *TokenLeafUpdateOne) ClearConfirmedWithdrawBlockHash() *TokenLeafUpdateOne {
	tluo.mutation.ClearConfirmedWithdrawBlockHash()
	return tluo
}

// SetNetwork sets the "network" field.
func (tluo *TokenLeafUpdateOne) SetNetwork(s schematype.Network) *TokenLeafUpdateOne {
	tluo.mutation.SetNetwork(s)
	return tluo
}

// SetNillableNetwork sets the "network" field if the given value is not nil.
func (tluo *TokenLeafUpdateOne) SetNillableNetwork(s *schematype.Network) *TokenLeafUpdateOne {
	if s != nil {
		tluo.SetNetwork(*s)
	}
	return tluo
}

// ClearNetwork clears the value of the "network" field.
func (tluo *TokenLeafUpdateOne) ClearNetwork() *TokenLeafUpdateOne {
	tluo.mutation.ClearNetwork()
	return tluo
}

// SetLeafCreatedTokenTransactionReceiptID sets the "leaf_created_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID.
func (tluo *TokenLeafUpdateOne) SetLeafCreatedTokenTransactionReceiptID(id uuid.UUID) *TokenLeafUpdateOne {
	tluo.mutation.SetLeafCreatedTokenTransactionReceiptID(id)
	return tluo
}

// SetNillableLeafCreatedTokenTransactionReceiptID sets the "leaf_created_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID if the given value is not nil.
func (tluo *TokenLeafUpdateOne) SetNillableLeafCreatedTokenTransactionReceiptID(id *uuid.UUID) *TokenLeafUpdateOne {
	if id != nil {
		tluo = tluo.SetLeafCreatedTokenTransactionReceiptID(*id)
	}
	return tluo
}

// SetLeafCreatedTokenTransactionReceipt sets the "leaf_created_token_transaction_receipt" edge to the TokenTransactionReceipt entity.
func (tluo *TokenLeafUpdateOne) SetLeafCreatedTokenTransactionReceipt(t *TokenTransactionReceipt) *TokenLeafUpdateOne {
	return tluo.SetLeafCreatedTokenTransactionReceiptID(t.ID)
}

// SetLeafSpentTokenTransactionReceiptID sets the "leaf_spent_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID.
func (tluo *TokenLeafUpdateOne) SetLeafSpentTokenTransactionReceiptID(id uuid.UUID) *TokenLeafUpdateOne {
	tluo.mutation.SetLeafSpentTokenTransactionReceiptID(id)
	return tluo
}

// SetNillableLeafSpentTokenTransactionReceiptID sets the "leaf_spent_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID if the given value is not nil.
func (tluo *TokenLeafUpdateOne) SetNillableLeafSpentTokenTransactionReceiptID(id *uuid.UUID) *TokenLeafUpdateOne {
	if id != nil {
		tluo = tluo.SetLeafSpentTokenTransactionReceiptID(*id)
	}
	return tluo
}

// SetLeafSpentTokenTransactionReceipt sets the "leaf_spent_token_transaction_receipt" edge to the TokenTransactionReceipt entity.
func (tluo *TokenLeafUpdateOne) SetLeafSpentTokenTransactionReceipt(t *TokenTransactionReceipt) *TokenLeafUpdateOne {
	return tluo.SetLeafSpentTokenTransactionReceiptID(t.ID)
}

// Mutation returns the TokenLeafMutation object of the builder.
func (tluo *TokenLeafUpdateOne) Mutation() *TokenLeafMutation {
	return tluo.mutation
}

// ClearLeafCreatedTokenTransactionReceipt clears the "leaf_created_token_transaction_receipt" edge to the TokenTransactionReceipt entity.
func (tluo *TokenLeafUpdateOne) ClearLeafCreatedTokenTransactionReceipt() *TokenLeafUpdateOne {
	tluo.mutation.ClearLeafCreatedTokenTransactionReceipt()
	return tluo
}

// ClearLeafSpentTokenTransactionReceipt clears the "leaf_spent_token_transaction_receipt" edge to the TokenTransactionReceipt entity.
func (tluo *TokenLeafUpdateOne) ClearLeafSpentTokenTransactionReceipt() *TokenLeafUpdateOne {
	tluo.mutation.ClearLeafSpentTokenTransactionReceipt()
	return tluo
}

// Where appends a list predicates to the TokenLeafUpdate builder.
func (tluo *TokenLeafUpdateOne) Where(ps ...predicate.TokenLeaf) *TokenLeafUpdateOne {
	tluo.mutation.Where(ps...)
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TokenLeafUpdateOne) Select(field string, fields ...string) *TokenLeafUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TokenLeaf entity.
func (tluo *TokenLeafUpdateOne) Save(ctx context.Context) (*TokenLeaf, error) {
	tluo.defaults()
	return withHooks(ctx, tluo.sqlSave, tluo.mutation, tluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TokenLeafUpdateOne) SaveX(ctx context.Context) *TokenLeaf {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TokenLeafUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TokenLeafUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tluo *TokenLeafUpdateOne) defaults() {
	if _, ok := tluo.mutation.UpdateTime(); !ok {
		v := tokenleaf.UpdateDefaultUpdateTime()
		tluo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tluo *TokenLeafUpdateOne) check() error {
	if v, ok := tluo.mutation.Status(); ok {
		if err := tokenleaf.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TokenLeaf.status": %w`, err)}
		}
	}
	if v, ok := tluo.mutation.Network(); ok {
		if err := tokenleaf.NetworkValidator(v); err != nil {
			return &ValidationError{Name: "network", err: fmt.Errorf(`ent: validator failed for field "TokenLeaf.network": %w`, err)}
		}
	}
	if tluo.mutation.RevocationKeyshareCleared() && len(tluo.mutation.RevocationKeyshareIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TokenLeaf.revocation_keyshare"`)
	}
	return nil
}

func (tluo *TokenLeafUpdateOne) sqlSave(ctx context.Context) (_node *TokenLeaf, err error) {
	if err := tluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tokenleaf.Table, tokenleaf.Columns, sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID))
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TokenLeaf.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tokenleaf.FieldID)
		for _, f := range fields {
			if !tokenleaf.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tokenleaf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.UpdateTime(); ok {
		_spec.SetField(tokenleaf.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tluo.mutation.Status(); ok {
		_spec.SetField(tokenleaf.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tluo.mutation.LeafSpentOwnershipSignature(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentOwnershipSignature, field.TypeBytes, value)
	}
	if tluo.mutation.LeafSpentOwnershipSignatureCleared() {
		_spec.ClearField(tokenleaf.FieldLeafSpentOwnershipSignature, field.TypeBytes)
	}
	if value, ok := tluo.mutation.LeafSpentOperatorSpecificOwnershipSignature(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentOperatorSpecificOwnershipSignature, field.TypeBytes, value)
	}
	if tluo.mutation.LeafSpentOperatorSpecificOwnershipSignatureCleared() {
		_spec.ClearField(tokenleaf.FieldLeafSpentOperatorSpecificOwnershipSignature, field.TypeBytes)
	}
	if value, ok := tluo.mutation.LeafSpentTransactionInputVout(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentTransactionInputVout, field.TypeInt32, value)
	}
	if value, ok := tluo.mutation.AddedLeafSpentTransactionInputVout(); ok {
		_spec.AddField(tokenleaf.FieldLeafSpentTransactionInputVout, field.TypeInt32, value)
	}
	if tluo.mutation.LeafSpentTransactionInputVoutCleared() {
		_spec.ClearField(tokenleaf.FieldLeafSpentTransactionInputVout, field.TypeInt32)
	}
	if value, ok := tluo.mutation.LeafSpentRevocationPrivateKey(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentRevocationPrivateKey, field.TypeBytes, value)
	}
	if tluo.mutation.LeafSpentRevocationPrivateKeyCleared() {
		_spec.ClearField(tokenleaf.FieldLeafSpentRevocationPrivateKey, field.TypeBytes)
	}
	if value, ok := tluo.mutation.ConfirmedWithdrawBlockHash(); ok {
		_spec.SetField(tokenleaf.FieldConfirmedWithdrawBlockHash, field.TypeBytes, value)
	}
	if tluo.mutation.ConfirmedWithdrawBlockHashCleared() {
		_spec.ClearField(tokenleaf.FieldConfirmedWithdrawBlockHash, field.TypeBytes)
	}
	if value, ok := tluo.mutation.Network(); ok {
		_spec.SetField(tokenleaf.FieldNetwork, field.TypeEnum, value)
	}
	if tluo.mutation.NetworkCleared() {
		_spec.ClearField(tokenleaf.FieldNetwork, field.TypeEnum)
	}
	if tluo.mutation.LeafCreatedTokenTransactionReceiptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenleaf.LeafCreatedTokenTransactionReceiptTable,
			Columns: []string{tokenleaf.LeafCreatedTokenTransactionReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.LeafCreatedTokenTransactionReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenleaf.LeafCreatedTokenTransactionReceiptTable,
			Columns: []string{tokenleaf.LeafCreatedTokenTransactionReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tluo.mutation.LeafSpentTokenTransactionReceiptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenleaf.LeafSpentTokenTransactionReceiptTable,
			Columns: []string{tokenleaf.LeafSpentTokenTransactionReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.LeafSpentTokenTransactionReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenleaf.LeafSpentTokenTransactionReceiptTable,
			Columns: []string{tokenleaf.LeafSpentTokenTransactionReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TokenLeaf{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokenleaf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tluo.mutation.done = true
	return _node, nil
}
