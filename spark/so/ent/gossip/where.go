// Code generated by ent, DO NOT EDIT.

package gossip

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Gossip {
	return predicate.Gossip(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Gossip {
	return predicate.Gossip(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Gossip {
	return predicate.Gossip(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Gossip {
	return predicate.Gossip(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Gossip {
	return predicate.Gossip(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Gossip {
	return predicate.Gossip(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Gossip {
	return predicate.Gossip(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Gossip {
	return predicate.Gossip(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Gossip {
	return predicate.Gossip(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldEQ(FieldUpdateTime, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldEQ(FieldMessage, v))
}

// Receipts applies equality check predicate on the "receipts" field. It's identical to ReceiptsEQ.
func Receipts(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldEQ(FieldReceipts, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Gossip {
	return predicate.Gossip(sql.FieldLTE(FieldUpdateTime, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...[]byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...[]byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldLTE(FieldMessage, v))
}

// ReceiptsEQ applies the EQ predicate on the "receipts" field.
func ReceiptsEQ(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldEQ(FieldReceipts, v))
}

// ReceiptsNEQ applies the NEQ predicate on the "receipts" field.
func ReceiptsNEQ(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldNEQ(FieldReceipts, v))
}

// ReceiptsIn applies the In predicate on the "receipts" field.
func ReceiptsIn(vs ...[]byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldIn(FieldReceipts, vs...))
}

// ReceiptsNotIn applies the NotIn predicate on the "receipts" field.
func ReceiptsNotIn(vs ...[]byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldNotIn(FieldReceipts, vs...))
}

// ReceiptsGT applies the GT predicate on the "receipts" field.
func ReceiptsGT(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldGT(FieldReceipts, v))
}

// ReceiptsGTE applies the GTE predicate on the "receipts" field.
func ReceiptsGTE(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldGTE(FieldReceipts, v))
}

// ReceiptsLT applies the LT predicate on the "receipts" field.
func ReceiptsLT(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldLT(FieldReceipts, v))
}

// ReceiptsLTE applies the LTE predicate on the "receipts" field.
func ReceiptsLTE(v []byte) predicate.Gossip {
	return predicate.Gossip(sql.FieldLTE(FieldReceipts, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schematype.GossipStatus) predicate.Gossip {
	vc := v
	return predicate.Gossip(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schematype.GossipStatus) predicate.Gossip {
	vc := v
	return predicate.Gossip(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schematype.GossipStatus) predicate.Gossip {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Gossip(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schematype.GossipStatus) predicate.Gossip {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Gossip(sql.FieldNotIn(FieldStatus, v...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Gossip) predicate.Gossip {
	return predicate.Gossip(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Gossip) predicate.Gossip {
	return predicate.Gossip(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Gossip) predicate.Gossip {
	return predicate.Gossip(sql.NotPredicates(p))
}
