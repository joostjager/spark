// Code generated by ent, DO NOT EDIT.

package tokencreate

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

const (
	// Label holds the string label denoting the tokencreate type in the database.
	Label = "token_create"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldIssuerPublicKey holds the string denoting the issuer_public_key field in the database.
	FieldIssuerPublicKey = "issuer_public_key"
	// FieldWalletProvidedTimestamp holds the string denoting the wallet_provided_timestamp field in the database.
	FieldWalletProvidedTimestamp = "wallet_provided_timestamp"
	// FieldIssuerSignature holds the string denoting the issuer_signature field in the database.
	FieldIssuerSignature = "issuer_signature"
	// FieldOperatorSpecificIssuerSignature holds the string denoting the operator_specific_issuer_signature field in the database.
	FieldOperatorSpecificIssuerSignature = "operator_specific_issuer_signature"
	// FieldCreationEntityPublicKey holds the string denoting the creation_entity_public_key field in the database.
	FieldCreationEntityPublicKey = "creation_entity_public_key"
	// FieldTokenName holds the string denoting the token_name field in the database.
	FieldTokenName = "token_name"
	// FieldTokenTicker holds the string denoting the token_ticker field in the database.
	FieldTokenTicker = "token_ticker"
	// FieldDecimals holds the string denoting the decimals field in the database.
	FieldDecimals = "decimals"
	// FieldMaxSupply holds the string denoting the max_supply field in the database.
	FieldMaxSupply = "max_supply"
	// FieldIsFreezable holds the string denoting the is_freezable field in the database.
	FieldIsFreezable = "is_freezable"
	// FieldNetwork holds the string denoting the network field in the database.
	FieldNetwork = "network"
	// EdgeTokenTransaction holds the string denoting the token_transaction edge name in mutations.
	EdgeTokenTransaction = "token_transaction"
	// Table holds the table name of the tokencreate in the database.
	Table = "token_creates"
	// TokenTransactionTable is the table that holds the token_transaction relation/edge.
	TokenTransactionTable = "token_transactions"
	// TokenTransactionInverseTable is the table name for the TokenTransaction entity.
	// It exists in this package in order to avoid circular dependency with the "tokentransaction" package.
	TokenTransactionInverseTable = "token_transactions"
	// TokenTransactionColumn is the table column denoting the token_transaction relation/edge.
	TokenTransactionColumn = "token_transaction_create"
)

// Columns holds all SQL columns for tokencreate fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldIssuerPublicKey,
	FieldWalletProvidedTimestamp,
	FieldIssuerSignature,
	FieldOperatorSpecificIssuerSignature,
	FieldCreationEntityPublicKey,
	FieldTokenName,
	FieldTokenTicker,
	FieldDecimals,
	FieldMaxSupply,
	FieldIsFreezable,
	FieldNetwork,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// IssuerPublicKeyValidator is a validator for the "issuer_public_key" field. It is called by the builders before save.
	IssuerPublicKeyValidator func([]byte) error
	// IssuerSignatureValidator is a validator for the "issuer_signature" field. It is called by the builders before save.
	IssuerSignatureValidator func([]byte) error
	// CreationEntityPublicKeyValidator is a validator for the "creation_entity_public_key" field. It is called by the builders before save.
	CreationEntityPublicKeyValidator func([]byte) error
	// TokenNameValidator is a validator for the "token_name" field. It is called by the builders before save.
	TokenNameValidator func(string) error
	// TokenTickerValidator is a validator for the "token_ticker" field. It is called by the builders before save.
	TokenTickerValidator func(string) error
	// MaxSupplyValidator is a validator for the "max_supply" field. It is called by the builders before save.
	MaxSupplyValidator func([]byte) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// NetworkValidator is a validator for the "network" field enum values. It is called by the builders before save.
func NetworkValidator(n schematype.Network) error {
	switch n {
	case "UNSPECIFIED", "MAINNET", "REGTEST", "TESTNET", "SIGNET":
		return nil
	default:
		return fmt.Errorf("tokencreate: invalid enum value for network field: %q", n)
	}
}

// OrderOption defines the ordering options for the TokenCreate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByWalletProvidedTimestamp orders the results by the wallet_provided_timestamp field.
func ByWalletProvidedTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalletProvidedTimestamp, opts...).ToFunc()
}

// ByTokenName orders the results by the token_name field.
func ByTokenName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenName, opts...).ToFunc()
}

// ByTokenTicker orders the results by the token_ticker field.
func ByTokenTicker(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenTicker, opts...).ToFunc()
}

// ByDecimals orders the results by the decimals field.
func ByDecimals(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDecimals, opts...).ToFunc()
}

// ByIsFreezable orders the results by the is_freezable field.
func ByIsFreezable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFreezable, opts...).ToFunc()
}

// ByNetwork orders the results by the network field.
func ByNetwork(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetwork, opts...).ToFunc()
}

// ByTokenTransactionCount orders the results by token_transaction count.
func ByTokenTransactionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTokenTransactionStep(), opts...)
	}
}

// ByTokenTransaction orders the results by token_transaction terms.
func ByTokenTransaction(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokenTransactionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTokenTransactionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokenTransactionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, TokenTransactionTable, TokenTransactionColumn),
	)
}
