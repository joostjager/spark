// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/blockheight"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

// BlockHeightCreate is the builder for creating a BlockHeight entity.
type BlockHeightCreate struct {
	config
	mutation *BlockHeightMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (bhc *BlockHeightCreate) SetCreateTime(t time.Time) *BlockHeightCreate {
	bhc.mutation.SetCreateTime(t)
	return bhc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bhc *BlockHeightCreate) SetNillableCreateTime(t *time.Time) *BlockHeightCreate {
	if t != nil {
		bhc.SetCreateTime(*t)
	}
	return bhc
}

// SetUpdateTime sets the "update_time" field.
func (bhc *BlockHeightCreate) SetUpdateTime(t time.Time) *BlockHeightCreate {
	bhc.mutation.SetUpdateTime(t)
	return bhc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bhc *BlockHeightCreate) SetNillableUpdateTime(t *time.Time) *BlockHeightCreate {
	if t != nil {
		bhc.SetUpdateTime(*t)
	}
	return bhc
}

// SetHeight sets the "height" field.
func (bhc *BlockHeightCreate) SetHeight(i int64) *BlockHeightCreate {
	bhc.mutation.SetHeight(i)
	return bhc
}

// SetNetwork sets the "network" field.
func (bhc *BlockHeightCreate) SetNetwork(s schematype.Network) *BlockHeightCreate {
	bhc.mutation.SetNetwork(s)
	return bhc
}

// SetID sets the "id" field.
func (bhc *BlockHeightCreate) SetID(u uuid.UUID) *BlockHeightCreate {
	bhc.mutation.SetID(u)
	return bhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bhc *BlockHeightCreate) SetNillableID(u *uuid.UUID) *BlockHeightCreate {
	if u != nil {
		bhc.SetID(*u)
	}
	return bhc
}

// Mutation returns the BlockHeightMutation object of the builder.
func (bhc *BlockHeightCreate) Mutation() *BlockHeightMutation {
	return bhc.mutation
}

// Save creates the BlockHeight in the database.
func (bhc *BlockHeightCreate) Save(ctx context.Context) (*BlockHeight, error) {
	bhc.defaults()
	return withHooks(ctx, bhc.sqlSave, bhc.mutation, bhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bhc *BlockHeightCreate) SaveX(ctx context.Context) *BlockHeight {
	v, err := bhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bhc *BlockHeightCreate) Exec(ctx context.Context) error {
	_, err := bhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhc *BlockHeightCreate) ExecX(ctx context.Context) {
	if err := bhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bhc *BlockHeightCreate) defaults() {
	if _, ok := bhc.mutation.CreateTime(); !ok {
		v := blockheight.DefaultCreateTime()
		bhc.mutation.SetCreateTime(v)
	}
	if _, ok := bhc.mutation.UpdateTime(); !ok {
		v := blockheight.DefaultUpdateTime()
		bhc.mutation.SetUpdateTime(v)
	}
	if _, ok := bhc.mutation.ID(); !ok {
		v := blockheight.DefaultID()
		bhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bhc *BlockHeightCreate) check() error {
	if _, ok := bhc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BlockHeight.create_time"`)}
	}
	if _, ok := bhc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BlockHeight.update_time"`)}
	}
	if _, ok := bhc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "BlockHeight.height"`)}
	}
	if _, ok := bhc.mutation.Network(); !ok {
		return &ValidationError{Name: "network", err: errors.New(`ent: missing required field "BlockHeight.network"`)}
	}
	if v, ok := bhc.mutation.Network(); ok {
		if err := blockheight.NetworkValidator(v); err != nil {
			return &ValidationError{Name: "network", err: fmt.Errorf(`ent: validator failed for field "BlockHeight.network": %w`, err)}
		}
	}
	return nil
}

func (bhc *BlockHeightCreate) sqlSave(ctx context.Context) (*BlockHeight, error) {
	if err := bhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bhc.mutation.id = &_node.ID
	bhc.mutation.done = true
	return _node, nil
}

func (bhc *BlockHeightCreate) createSpec() (*BlockHeight, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockHeight{config: bhc.config}
		_spec = sqlgraph.NewCreateSpec(blockheight.Table, sqlgraph.NewFieldSpec(blockheight.FieldID, field.TypeUUID))
	)
	if id, ok := bhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bhc.mutation.CreateTime(); ok {
		_spec.SetField(blockheight.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bhc.mutation.UpdateTime(); ok {
		_spec.SetField(blockheight.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bhc.mutation.Height(); ok {
		_spec.SetField(blockheight.FieldHeight, field.TypeInt64, value)
		_node.Height = value
	}
	if value, ok := bhc.mutation.Network(); ok {
		_spec.SetField(blockheight.FieldNetwork, field.TypeEnum, value)
		_node.Network = value
	}
	return _node, _spec
}

// BlockHeightCreateBulk is the builder for creating many BlockHeight entities in bulk.
type BlockHeightCreateBulk struct {
	config
	err      error
	builders []*BlockHeightCreate
}

// Save creates the BlockHeight entities in the database.
func (bhcb *BlockHeightCreateBulk) Save(ctx context.Context) ([]*BlockHeight, error) {
	if bhcb.err != nil {
		return nil, bhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bhcb.builders))
	nodes := make([]*BlockHeight, len(bhcb.builders))
	mutators := make([]Mutator, len(bhcb.builders))
	for i := range bhcb.builders {
		func(i int, root context.Context) {
			builder := bhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockHeightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bhcb *BlockHeightCreateBulk) SaveX(ctx context.Context) []*BlockHeight {
	v, err := bhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bhcb *BlockHeightCreateBulk) Exec(ctx context.Context) error {
	_, err := bhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhcb *BlockHeightCreateBulk) ExecX(ctx context.Context) {
	if err := bhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
