// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/transfer"
	"github.com/lightsparkdev/spark/so/ent/utxo"
	"github.com/lightsparkdev/spark/so/ent/utxoswap"
)

// UtxoSwapCreate is the builder for creating a UtxoSwap entity.
type UtxoSwapCreate struct {
	config
	mutation *UtxoSwapMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (usc *UtxoSwapCreate) SetCreateTime(t time.Time) *UtxoSwapCreate {
	usc.mutation.SetCreateTime(t)
	return usc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (usc *UtxoSwapCreate) SetNillableCreateTime(t *time.Time) *UtxoSwapCreate {
	if t != nil {
		usc.SetCreateTime(*t)
	}
	return usc
}

// SetUpdateTime sets the "update_time" field.
func (usc *UtxoSwapCreate) SetUpdateTime(t time.Time) *UtxoSwapCreate {
	usc.mutation.SetUpdateTime(t)
	return usc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (usc *UtxoSwapCreate) SetNillableUpdateTime(t *time.Time) *UtxoSwapCreate {
	if t != nil {
		usc.SetUpdateTime(*t)
	}
	return usc
}

// SetStatus sets the "status" field.
func (usc *UtxoSwapCreate) SetStatus(sss schematype.UtxoSwapStatus) *UtxoSwapCreate {
	usc.mutation.SetStatus(sss)
	return usc
}

// SetRequestType sets the "request_type" field.
func (usc *UtxoSwapCreate) SetRequestType(ssrt schematype.UtxoSwapRequestType) *UtxoSwapCreate {
	usc.mutation.SetRequestType(ssrt)
	return usc
}

// SetCreditAmountSats sets the "credit_amount_sats" field.
func (usc *UtxoSwapCreate) SetCreditAmountSats(u uint64) *UtxoSwapCreate {
	usc.mutation.SetCreditAmountSats(u)
	return usc
}

// SetNillableCreditAmountSats sets the "credit_amount_sats" field if the given value is not nil.
func (usc *UtxoSwapCreate) SetNillableCreditAmountSats(u *uint64) *UtxoSwapCreate {
	if u != nil {
		usc.SetCreditAmountSats(*u)
	}
	return usc
}

// SetMaxFeeSats sets the "max_fee_sats" field.
func (usc *UtxoSwapCreate) SetMaxFeeSats(u uint64) *UtxoSwapCreate {
	usc.mutation.SetMaxFeeSats(u)
	return usc
}

// SetNillableMaxFeeSats sets the "max_fee_sats" field if the given value is not nil.
func (usc *UtxoSwapCreate) SetNillableMaxFeeSats(u *uint64) *UtxoSwapCreate {
	if u != nil {
		usc.SetMaxFeeSats(*u)
	}
	return usc
}

// SetSspSignature sets the "ssp_signature" field.
func (usc *UtxoSwapCreate) SetSspSignature(b []byte) *UtxoSwapCreate {
	usc.mutation.SetSspSignature(b)
	return usc
}

// SetSspIdentityPublicKey sets the "ssp_identity_public_key" field.
func (usc *UtxoSwapCreate) SetSspIdentityPublicKey(b []byte) *UtxoSwapCreate {
	usc.mutation.SetSspIdentityPublicKey(b)
	return usc
}

// SetUserSignature sets the "user_signature" field.
func (usc *UtxoSwapCreate) SetUserSignature(b []byte) *UtxoSwapCreate {
	usc.mutation.SetUserSignature(b)
	return usc
}

// SetUserIdentityPublicKey sets the "user_identity_public_key" field.
func (usc *UtxoSwapCreate) SetUserIdentityPublicKey(b []byte) *UtxoSwapCreate {
	usc.mutation.SetUserIdentityPublicKey(b)
	return usc
}

// SetCoordinatorIdentityPublicKey sets the "coordinator_identity_public_key" field.
func (usc *UtxoSwapCreate) SetCoordinatorIdentityPublicKey(b []byte) *UtxoSwapCreate {
	usc.mutation.SetCoordinatorIdentityPublicKey(b)
	return usc
}

// SetRequestedTransferID sets the "requested_transfer_id" field.
func (usc *UtxoSwapCreate) SetRequestedTransferID(u uuid.UUID) *UtxoSwapCreate {
	usc.mutation.SetRequestedTransferID(u)
	return usc
}

// SetNillableRequestedTransferID sets the "requested_transfer_id" field if the given value is not nil.
func (usc *UtxoSwapCreate) SetNillableRequestedTransferID(u *uuid.UUID) *UtxoSwapCreate {
	if u != nil {
		usc.SetRequestedTransferID(*u)
	}
	return usc
}

// SetSpendTxSigningResult sets the "spend_tx_signing_result" field.
func (usc *UtxoSwapCreate) SetSpendTxSigningResult(b []byte) *UtxoSwapCreate {
	usc.mutation.SetSpendTxSigningResult(b)
	return usc
}

// SetID sets the "id" field.
func (usc *UtxoSwapCreate) SetID(u uuid.UUID) *UtxoSwapCreate {
	usc.mutation.SetID(u)
	return usc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (usc *UtxoSwapCreate) SetNillableID(u *uuid.UUID) *UtxoSwapCreate {
	if u != nil {
		usc.SetID(*u)
	}
	return usc
}

// SetUtxoID sets the "utxo" edge to the Utxo entity by ID.
func (usc *UtxoSwapCreate) SetUtxoID(id uuid.UUID) *UtxoSwapCreate {
	usc.mutation.SetUtxoID(id)
	return usc
}

// SetUtxo sets the "utxo" edge to the Utxo entity.
func (usc *UtxoSwapCreate) SetUtxo(u *Utxo) *UtxoSwapCreate {
	return usc.SetUtxoID(u.ID)
}

// SetTransferID sets the "transfer" edge to the Transfer entity by ID.
func (usc *UtxoSwapCreate) SetTransferID(id uuid.UUID) *UtxoSwapCreate {
	usc.mutation.SetTransferID(id)
	return usc
}

// SetNillableTransferID sets the "transfer" edge to the Transfer entity by ID if the given value is not nil.
func (usc *UtxoSwapCreate) SetNillableTransferID(id *uuid.UUID) *UtxoSwapCreate {
	if id != nil {
		usc = usc.SetTransferID(*id)
	}
	return usc
}

// SetTransfer sets the "transfer" edge to the Transfer entity.
func (usc *UtxoSwapCreate) SetTransfer(t *Transfer) *UtxoSwapCreate {
	return usc.SetTransferID(t.ID)
}

// Mutation returns the UtxoSwapMutation object of the builder.
func (usc *UtxoSwapCreate) Mutation() *UtxoSwapMutation {
	return usc.mutation
}

// Save creates the UtxoSwap in the database.
func (usc *UtxoSwapCreate) Save(ctx context.Context) (*UtxoSwap, error) {
	usc.defaults()
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UtxoSwapCreate) SaveX(ctx context.Context) *UtxoSwap {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UtxoSwapCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UtxoSwapCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UtxoSwapCreate) defaults() {
	if _, ok := usc.mutation.CreateTime(); !ok {
		v := utxoswap.DefaultCreateTime()
		usc.mutation.SetCreateTime(v)
	}
	if _, ok := usc.mutation.UpdateTime(); !ok {
		v := utxoswap.DefaultUpdateTime()
		usc.mutation.SetUpdateTime(v)
	}
	if _, ok := usc.mutation.ID(); !ok {
		v := utxoswap.DefaultID()
		usc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UtxoSwapCreate) check() error {
	if _, ok := usc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UtxoSwap.create_time"`)}
	}
	if _, ok := usc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "UtxoSwap.update_time"`)}
	}
	if _, ok := usc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "UtxoSwap.status"`)}
	}
	if v, ok := usc.mutation.Status(); ok {
		if err := utxoswap.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "UtxoSwap.status": %w`, err)}
		}
	}
	if _, ok := usc.mutation.RequestType(); !ok {
		return &ValidationError{Name: "request_type", err: errors.New(`ent: missing required field "UtxoSwap.request_type"`)}
	}
	if v, ok := usc.mutation.RequestType(); ok {
		if err := utxoswap.RequestTypeValidator(v); err != nil {
			return &ValidationError{Name: "request_type", err: fmt.Errorf(`ent: validator failed for field "UtxoSwap.request_type": %w`, err)}
		}
	}
	if _, ok := usc.mutation.CoordinatorIdentityPublicKey(); !ok {
		return &ValidationError{Name: "coordinator_identity_public_key", err: errors.New(`ent: missing required field "UtxoSwap.coordinator_identity_public_key"`)}
	}
	if len(usc.mutation.UtxoIDs()) == 0 {
		return &ValidationError{Name: "utxo", err: errors.New(`ent: missing required edge "UtxoSwap.utxo"`)}
	}
	return nil
}

func (usc *UtxoSwapCreate) sqlSave(ctx context.Context) (*UtxoSwap, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UtxoSwapCreate) createSpec() (*UtxoSwap, *sqlgraph.CreateSpec) {
	var (
		_node = &UtxoSwap{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(utxoswap.Table, sqlgraph.NewFieldSpec(utxoswap.FieldID, field.TypeUUID))
	)
	if id, ok := usc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := usc.mutation.CreateTime(); ok {
		_spec.SetField(utxoswap.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := usc.mutation.UpdateTime(); ok {
		_spec.SetField(utxoswap.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := usc.mutation.Status(); ok {
		_spec.SetField(utxoswap.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := usc.mutation.RequestType(); ok {
		_spec.SetField(utxoswap.FieldRequestType, field.TypeEnum, value)
		_node.RequestType = value
	}
	if value, ok := usc.mutation.CreditAmountSats(); ok {
		_spec.SetField(utxoswap.FieldCreditAmountSats, field.TypeUint64, value)
		_node.CreditAmountSats = value
	}
	if value, ok := usc.mutation.MaxFeeSats(); ok {
		_spec.SetField(utxoswap.FieldMaxFeeSats, field.TypeUint64, value)
		_node.MaxFeeSats = value
	}
	if value, ok := usc.mutation.SspSignature(); ok {
		_spec.SetField(utxoswap.FieldSspSignature, field.TypeBytes, value)
		_node.SspSignature = value
	}
	if value, ok := usc.mutation.SspIdentityPublicKey(); ok {
		_spec.SetField(utxoswap.FieldSspIdentityPublicKey, field.TypeBytes, value)
		_node.SspIdentityPublicKey = value
	}
	if value, ok := usc.mutation.UserSignature(); ok {
		_spec.SetField(utxoswap.FieldUserSignature, field.TypeBytes, value)
		_node.UserSignature = value
	}
	if value, ok := usc.mutation.UserIdentityPublicKey(); ok {
		_spec.SetField(utxoswap.FieldUserIdentityPublicKey, field.TypeBytes, value)
		_node.UserIdentityPublicKey = value
	}
	if value, ok := usc.mutation.CoordinatorIdentityPublicKey(); ok {
		_spec.SetField(utxoswap.FieldCoordinatorIdentityPublicKey, field.TypeBytes, value)
		_node.CoordinatorIdentityPublicKey = value
	}
	if value, ok := usc.mutation.RequestedTransferID(); ok {
		_spec.SetField(utxoswap.FieldRequestedTransferID, field.TypeUUID, value)
		_node.RequestedTransferID = value
	}
	if value, ok := usc.mutation.SpendTxSigningResult(); ok {
		_spec.SetField(utxoswap.FieldSpendTxSigningResult, field.TypeBytes, value)
		_node.SpendTxSigningResult = value
	}
	if nodes := usc.mutation.UtxoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   utxoswap.UtxoTable,
			Columns: []string{utxoswap.UtxoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(utxo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.utxo_swap_utxo = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := usc.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   utxoswap.TransferTable,
			Columns: []string{utxoswap.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.utxo_swap_transfer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UtxoSwapCreateBulk is the builder for creating many UtxoSwap entities in bulk.
type UtxoSwapCreateBulk struct {
	config
	err      error
	builders []*UtxoSwapCreate
}

// Save creates the UtxoSwap entities in the database.
func (uscb *UtxoSwapCreateBulk) Save(ctx context.Context) ([]*UtxoSwap, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UtxoSwap, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UtxoSwapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UtxoSwapCreateBulk) SaveX(ctx context.Context) []*UtxoSwap {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UtxoSwapCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UtxoSwapCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
