// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/tokencreate"
	"github.com/lightsparkdev/spark/so/ent/tokentransaction"
)

// TokenCreateCreate is the builder for creating a TokenCreate entity.
type TokenCreateCreate struct {
	config
	mutation *TokenCreateMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tcc *TokenCreateCreate) SetCreateTime(t time.Time) *TokenCreateCreate {
	tcc.mutation.SetCreateTime(t)
	return tcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tcc *TokenCreateCreate) SetNillableCreateTime(t *time.Time) *TokenCreateCreate {
	if t != nil {
		tcc.SetCreateTime(*t)
	}
	return tcc
}

// SetUpdateTime sets the "update_time" field.
func (tcc *TokenCreateCreate) SetUpdateTime(t time.Time) *TokenCreateCreate {
	tcc.mutation.SetUpdateTime(t)
	return tcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tcc *TokenCreateCreate) SetNillableUpdateTime(t *time.Time) *TokenCreateCreate {
	if t != nil {
		tcc.SetUpdateTime(*t)
	}
	return tcc
}

// SetIssuerPublicKey sets the "issuer_public_key" field.
func (tcc *TokenCreateCreate) SetIssuerPublicKey(b []byte) *TokenCreateCreate {
	tcc.mutation.SetIssuerPublicKey(b)
	return tcc
}

// SetWalletProvidedTimestamp sets the "wallet_provided_timestamp" field.
func (tcc *TokenCreateCreate) SetWalletProvidedTimestamp(u uint64) *TokenCreateCreate {
	tcc.mutation.SetWalletProvidedTimestamp(u)
	return tcc
}

// SetNillableWalletProvidedTimestamp sets the "wallet_provided_timestamp" field if the given value is not nil.
func (tcc *TokenCreateCreate) SetNillableWalletProvidedTimestamp(u *uint64) *TokenCreateCreate {
	if u != nil {
		tcc.SetWalletProvidedTimestamp(*u)
	}
	return tcc
}

// SetIssuerSignature sets the "issuer_signature" field.
func (tcc *TokenCreateCreate) SetIssuerSignature(b []byte) *TokenCreateCreate {
	tcc.mutation.SetIssuerSignature(b)
	return tcc
}

// SetOperatorSpecificIssuerSignature sets the "operator_specific_issuer_signature" field.
func (tcc *TokenCreateCreate) SetOperatorSpecificIssuerSignature(b []byte) *TokenCreateCreate {
	tcc.mutation.SetOperatorSpecificIssuerSignature(b)
	return tcc
}

// SetCreationEntityPublicKey sets the "creation_entity_public_key" field.
func (tcc *TokenCreateCreate) SetCreationEntityPublicKey(b []byte) *TokenCreateCreate {
	tcc.mutation.SetCreationEntityPublicKey(b)
	return tcc
}

// SetTokenName sets the "token_name" field.
func (tcc *TokenCreateCreate) SetTokenName(s string) *TokenCreateCreate {
	tcc.mutation.SetTokenName(s)
	return tcc
}

// SetTokenTicker sets the "token_ticker" field.
func (tcc *TokenCreateCreate) SetTokenTicker(s string) *TokenCreateCreate {
	tcc.mutation.SetTokenTicker(s)
	return tcc
}

// SetDecimals sets the "decimals" field.
func (tcc *TokenCreateCreate) SetDecimals(u uint32) *TokenCreateCreate {
	tcc.mutation.SetDecimals(u)
	return tcc
}

// SetMaxSupply sets the "max_supply" field.
func (tcc *TokenCreateCreate) SetMaxSupply(b []byte) *TokenCreateCreate {
	tcc.mutation.SetMaxSupply(b)
	return tcc
}

// SetIsFreezable sets the "is_freezable" field.
func (tcc *TokenCreateCreate) SetIsFreezable(b bool) *TokenCreateCreate {
	tcc.mutation.SetIsFreezable(b)
	return tcc
}

// SetNetwork sets the "network" field.
func (tcc *TokenCreateCreate) SetNetwork(s schematype.Network) *TokenCreateCreate {
	tcc.mutation.SetNetwork(s)
	return tcc
}

// SetID sets the "id" field.
func (tcc *TokenCreateCreate) SetID(u uuid.UUID) *TokenCreateCreate {
	tcc.mutation.SetID(u)
	return tcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tcc *TokenCreateCreate) SetNillableID(u *uuid.UUID) *TokenCreateCreate {
	if u != nil {
		tcc.SetID(*u)
	}
	return tcc
}

// AddTokenTransactionIDs adds the "token_transaction" edge to the TokenTransaction entity by IDs.
func (tcc *TokenCreateCreate) AddTokenTransactionIDs(ids ...uuid.UUID) *TokenCreateCreate {
	tcc.mutation.AddTokenTransactionIDs(ids...)
	return tcc
}

// AddTokenTransaction adds the "token_transaction" edges to the TokenTransaction entity.
func (tcc *TokenCreateCreate) AddTokenTransaction(t ...*TokenTransaction) *TokenCreateCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcc.AddTokenTransactionIDs(ids...)
}

// Mutation returns the TokenCreateMutation object of the builder.
func (tcc *TokenCreateCreate) Mutation() *TokenCreateMutation {
	return tcc.mutation
}

// Save creates the TokenCreate in the database.
func (tcc *TokenCreateCreate) Save(ctx context.Context) (*TokenCreate, error) {
	tcc.defaults()
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TokenCreateCreate) SaveX(ctx context.Context) *TokenCreate {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TokenCreateCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TokenCreateCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TokenCreateCreate) defaults() {
	if _, ok := tcc.mutation.CreateTime(); !ok {
		v := tokencreate.DefaultCreateTime()
		tcc.mutation.SetCreateTime(v)
	}
	if _, ok := tcc.mutation.UpdateTime(); !ok {
		v := tokencreate.DefaultUpdateTime()
		tcc.mutation.SetUpdateTime(v)
	}
	if _, ok := tcc.mutation.ID(); !ok {
		v := tokencreate.DefaultID()
		tcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TokenCreateCreate) check() error {
	if _, ok := tcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TokenCreate.create_time"`)}
	}
	if _, ok := tcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TokenCreate.update_time"`)}
	}
	if _, ok := tcc.mutation.IssuerPublicKey(); !ok {
		return &ValidationError{Name: "issuer_public_key", err: errors.New(`ent: missing required field "TokenCreate.issuer_public_key"`)}
	}
	if v, ok := tcc.mutation.IssuerPublicKey(); ok {
		if err := tokencreate.IssuerPublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "issuer_public_key", err: fmt.Errorf(`ent: validator failed for field "TokenCreate.issuer_public_key": %w`, err)}
		}
	}
	if v, ok := tcc.mutation.IssuerSignature(); ok {
		if err := tokencreate.IssuerSignatureValidator(v); err != nil {
			return &ValidationError{Name: "issuer_signature", err: fmt.Errorf(`ent: validator failed for field "TokenCreate.issuer_signature": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.CreationEntityPublicKey(); !ok {
		return &ValidationError{Name: "creation_entity_public_key", err: errors.New(`ent: missing required field "TokenCreate.creation_entity_public_key"`)}
	}
	if v, ok := tcc.mutation.CreationEntityPublicKey(); ok {
		if err := tokencreate.CreationEntityPublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "creation_entity_public_key", err: fmt.Errorf(`ent: validator failed for field "TokenCreate.creation_entity_public_key": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.TokenName(); !ok {
		return &ValidationError{Name: "token_name", err: errors.New(`ent: missing required field "TokenCreate.token_name"`)}
	}
	if v, ok := tcc.mutation.TokenName(); ok {
		if err := tokencreate.TokenNameValidator(v); err != nil {
			return &ValidationError{Name: "token_name", err: fmt.Errorf(`ent: validator failed for field "TokenCreate.token_name": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.TokenTicker(); !ok {
		return &ValidationError{Name: "token_ticker", err: errors.New(`ent: missing required field "TokenCreate.token_ticker"`)}
	}
	if v, ok := tcc.mutation.TokenTicker(); ok {
		if err := tokencreate.TokenTickerValidator(v); err != nil {
			return &ValidationError{Name: "token_ticker", err: fmt.Errorf(`ent: validator failed for field "TokenCreate.token_ticker": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.Decimals(); !ok {
		return &ValidationError{Name: "decimals", err: errors.New(`ent: missing required field "TokenCreate.decimals"`)}
	}
	if _, ok := tcc.mutation.MaxSupply(); !ok {
		return &ValidationError{Name: "max_supply", err: errors.New(`ent: missing required field "TokenCreate.max_supply"`)}
	}
	if v, ok := tcc.mutation.MaxSupply(); ok {
		if err := tokencreate.MaxSupplyValidator(v); err != nil {
			return &ValidationError{Name: "max_supply", err: fmt.Errorf(`ent: validator failed for field "TokenCreate.max_supply": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.IsFreezable(); !ok {
		return &ValidationError{Name: "is_freezable", err: errors.New(`ent: missing required field "TokenCreate.is_freezable"`)}
	}
	if _, ok := tcc.mutation.Network(); !ok {
		return &ValidationError{Name: "network", err: errors.New(`ent: missing required field "TokenCreate.network"`)}
	}
	if v, ok := tcc.mutation.Network(); ok {
		if err := tokencreate.NetworkValidator(v); err != nil {
			return &ValidationError{Name: "network", err: fmt.Errorf(`ent: validator failed for field "TokenCreate.network": %w`, err)}
		}
	}
	return nil
}

func (tcc *TokenCreateCreate) sqlSave(ctx context.Context) (*TokenCreate, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TokenCreateCreate) createSpec() (*TokenCreate, *sqlgraph.CreateSpec) {
	var (
		_node = &TokenCreate{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(tokencreate.Table, sqlgraph.NewFieldSpec(tokencreate.FieldID, field.TypeUUID))
	)
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tcc.mutation.CreateTime(); ok {
		_spec.SetField(tokencreate.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tcc.mutation.UpdateTime(); ok {
		_spec.SetField(tokencreate.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tcc.mutation.IssuerPublicKey(); ok {
		_spec.SetField(tokencreate.FieldIssuerPublicKey, field.TypeBytes, value)
		_node.IssuerPublicKey = value
	}
	if value, ok := tcc.mutation.WalletProvidedTimestamp(); ok {
		_spec.SetField(tokencreate.FieldWalletProvidedTimestamp, field.TypeUint64, value)
		_node.WalletProvidedTimestamp = value
	}
	if value, ok := tcc.mutation.IssuerSignature(); ok {
		_spec.SetField(tokencreate.FieldIssuerSignature, field.TypeBytes, value)
		_node.IssuerSignature = value
	}
	if value, ok := tcc.mutation.OperatorSpecificIssuerSignature(); ok {
		_spec.SetField(tokencreate.FieldOperatorSpecificIssuerSignature, field.TypeBytes, value)
		_node.OperatorSpecificIssuerSignature = value
	}
	if value, ok := tcc.mutation.CreationEntityPublicKey(); ok {
		_spec.SetField(tokencreate.FieldCreationEntityPublicKey, field.TypeBytes, value)
		_node.CreationEntityPublicKey = value
	}
	if value, ok := tcc.mutation.TokenName(); ok {
		_spec.SetField(tokencreate.FieldTokenName, field.TypeString, value)
		_node.TokenName = value
	}
	if value, ok := tcc.mutation.TokenTicker(); ok {
		_spec.SetField(tokencreate.FieldTokenTicker, field.TypeString, value)
		_node.TokenTicker = value
	}
	if value, ok := tcc.mutation.Decimals(); ok {
		_spec.SetField(tokencreate.FieldDecimals, field.TypeUint32, value)
		_node.Decimals = value
	}
	if value, ok := tcc.mutation.MaxSupply(); ok {
		_spec.SetField(tokencreate.FieldMaxSupply, field.TypeBytes, value)
		_node.MaxSupply = value
	}
	if value, ok := tcc.mutation.IsFreezable(); ok {
		_spec.SetField(tokencreate.FieldIsFreezable, field.TypeBool, value)
		_node.IsFreezable = value
	}
	if value, ok := tcc.mutation.Network(); ok {
		_spec.SetField(tokencreate.FieldNetwork, field.TypeEnum, value)
		_node.Network = value
	}
	if nodes := tcc.mutation.TokenTransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokencreate.TokenTransactionTable,
			Columns: []string{tokencreate.TokenTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TokenCreateCreateBulk is the builder for creating many TokenCreate entities in bulk.
type TokenCreateCreateBulk struct {
	config
	err      error
	builders []*TokenCreateCreate
}

// Save creates the TokenCreate entities in the database.
func (tccb *TokenCreateCreateBulk) Save(ctx context.Context) ([]*TokenCreate, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TokenCreate, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TokenCreateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TokenCreateCreateBulk) SaveX(ctx context.Context) []*TokenCreate {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TokenCreateCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TokenCreateCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
