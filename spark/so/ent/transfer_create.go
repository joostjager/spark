// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/transfer"
	"github.com/lightsparkdev/spark/so/ent/transferleaf"
)

// TransferCreate is the builder for creating a Transfer entity.
type TransferCreate struct {
	config
	mutation *TransferMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tc *TransferCreate) SetCreateTime(t time.Time) *TransferCreate {
	tc.mutation.SetCreateTime(t)
	return tc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tc *TransferCreate) SetNillableCreateTime(t *time.Time) *TransferCreate {
	if t != nil {
		tc.SetCreateTime(*t)
	}
	return tc
}

// SetUpdateTime sets the "update_time" field.
func (tc *TransferCreate) SetUpdateTime(t time.Time) *TransferCreate {
	tc.mutation.SetUpdateTime(t)
	return tc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tc *TransferCreate) SetNillableUpdateTime(t *time.Time) *TransferCreate {
	if t != nil {
		tc.SetUpdateTime(*t)
	}
	return tc
}

// SetSenderIdentityPubkey sets the "sender_identity_pubkey" field.
func (tc *TransferCreate) SetSenderIdentityPubkey(b []byte) *TransferCreate {
	tc.mutation.SetSenderIdentityPubkey(b)
	return tc
}

// SetReceiverIdentityPubkey sets the "receiver_identity_pubkey" field.
func (tc *TransferCreate) SetReceiverIdentityPubkey(b []byte) *TransferCreate {
	tc.mutation.SetReceiverIdentityPubkey(b)
	return tc
}

// SetTotalValue sets the "total_value" field.
func (tc *TransferCreate) SetTotalValue(u uint64) *TransferCreate {
	tc.mutation.SetTotalValue(u)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TransferCreate) SetStatus(ss schematype.TransferStatus) *TransferCreate {
	tc.mutation.SetStatus(ss)
	return tc
}

// SetType sets the "type" field.
func (tc *TransferCreate) SetType(st schematype.TransferType) *TransferCreate {
	tc.mutation.SetType(st)
	return tc
}

// SetExpiryTime sets the "expiry_time" field.
func (tc *TransferCreate) SetExpiryTime(t time.Time) *TransferCreate {
	tc.mutation.SetExpiryTime(t)
	return tc
}

// SetCompletionTime sets the "completion_time" field.
func (tc *TransferCreate) SetCompletionTime(t time.Time) *TransferCreate {
	tc.mutation.SetCompletionTime(t)
	return tc
}

// SetNillableCompletionTime sets the "completion_time" field if the given value is not nil.
func (tc *TransferCreate) SetNillableCompletionTime(t *time.Time) *TransferCreate {
	if t != nil {
		tc.SetCompletionTime(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TransferCreate) SetID(u uuid.UUID) *TransferCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TransferCreate) SetNillableID(u *uuid.UUID) *TransferCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// AddTransferLeafeIDs adds the "transfer_leaves" edge to the TransferLeaf entity by IDs.
func (tc *TransferCreate) AddTransferLeafeIDs(ids ...uuid.UUID) *TransferCreate {
	tc.mutation.AddTransferLeafeIDs(ids...)
	return tc
}

// AddTransferLeaves adds the "transfer_leaves" edges to the TransferLeaf entity.
func (tc *TransferCreate) AddTransferLeaves(t ...*TransferLeaf) *TransferCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTransferLeafeIDs(ids...)
}

// Mutation returns the TransferMutation object of the builder.
func (tc *TransferCreate) Mutation() *TransferMutation {
	return tc.mutation
}

// Save creates the Transfer in the database.
func (tc *TransferCreate) Save(ctx context.Context) (*Transfer, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransferCreate) SaveX(ctx context.Context) *Transfer {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransferCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransferCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransferCreate) defaults() {
	if _, ok := tc.mutation.CreateTime(); !ok {
		v := transfer.DefaultCreateTime()
		tc.mutation.SetCreateTime(v)
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		v := transfer.DefaultUpdateTime()
		tc.mutation.SetUpdateTime(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := transfer.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransferCreate) check() error {
	if _, ok := tc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Transfer.create_time"`)}
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Transfer.update_time"`)}
	}
	if _, ok := tc.mutation.SenderIdentityPubkey(); !ok {
		return &ValidationError{Name: "sender_identity_pubkey", err: errors.New(`ent: missing required field "Transfer.sender_identity_pubkey"`)}
	}
	if v, ok := tc.mutation.SenderIdentityPubkey(); ok {
		if err := transfer.SenderIdentityPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "sender_identity_pubkey", err: fmt.Errorf(`ent: validator failed for field "Transfer.sender_identity_pubkey": %w`, err)}
		}
	}
	if _, ok := tc.mutation.ReceiverIdentityPubkey(); !ok {
		return &ValidationError{Name: "receiver_identity_pubkey", err: errors.New(`ent: missing required field "Transfer.receiver_identity_pubkey"`)}
	}
	if v, ok := tc.mutation.ReceiverIdentityPubkey(); ok {
		if err := transfer.ReceiverIdentityPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "receiver_identity_pubkey", err: fmt.Errorf(`ent: validator failed for field "Transfer.receiver_identity_pubkey": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TotalValue(); !ok {
		return &ValidationError{Name: "total_value", err: errors.New(`ent: missing required field "Transfer.total_value"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Transfer.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := transfer.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Transfer.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Transfer.type"`)}
	}
	if v, ok := tc.mutation.GetType(); ok {
		if err := transfer.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Transfer.type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.ExpiryTime(); !ok {
		return &ValidationError{Name: "expiry_time", err: errors.New(`ent: missing required field "Transfer.expiry_time"`)}
	}
	return nil
}

func (tc *TransferCreate) sqlSave(ctx context.Context) (*Transfer, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransferCreate) createSpec() (*Transfer, *sqlgraph.CreateSpec) {
	var (
		_node = &Transfer{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transfer.Table, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUUID))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.CreateTime(); ok {
		_spec.SetField(transfer.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tc.mutation.UpdateTime(); ok {
		_spec.SetField(transfer.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tc.mutation.SenderIdentityPubkey(); ok {
		_spec.SetField(transfer.FieldSenderIdentityPubkey, field.TypeBytes, value)
		_node.SenderIdentityPubkey = value
	}
	if value, ok := tc.mutation.ReceiverIdentityPubkey(); ok {
		_spec.SetField(transfer.FieldReceiverIdentityPubkey, field.TypeBytes, value)
		_node.ReceiverIdentityPubkey = value
	}
	if value, ok := tc.mutation.TotalValue(); ok {
		_spec.SetField(transfer.FieldTotalValue, field.TypeUint64, value)
		_node.TotalValue = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(transfer.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(transfer.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.ExpiryTime(); ok {
		_spec.SetField(transfer.FieldExpiryTime, field.TypeTime, value)
		_node.ExpiryTime = value
	}
	if value, ok := tc.mutation.CompletionTime(); ok {
		_spec.SetField(transfer.FieldCompletionTime, field.TypeTime, value)
		_node.CompletionTime = &value
	}
	if nodes := tc.mutation.TransferLeavesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   transfer.TransferLeavesTable,
			Columns: []string{transfer.TransferLeavesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferleaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransferCreateBulk is the builder for creating many Transfer entities in bulk.
type TransferCreateBulk struct {
	config
	err      error
	builders []*TransferCreate
}

// Save creates the Transfer entities in the database.
func (tcb *TransferCreateBulk) Save(ctx context.Context) ([]*Transfer, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transfer, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransferCreateBulk) SaveX(ctx context.Context) []*Transfer {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransferCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransferCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
