// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/tokenleaf"
	"github.com/lightsparkdev/spark/so/ent/tokenmint"
	"github.com/lightsparkdev/spark/so/ent/tokentransactionreceipt"
)

// TokenTransactionReceiptUpdate is the builder for updating TokenTransactionReceipt entities.
type TokenTransactionReceiptUpdate struct {
	config
	hooks    []Hook
	mutation *TokenTransactionReceiptMutation
}

// Where appends a list predicates to the TokenTransactionReceiptUpdate builder.
func (ttru *TokenTransactionReceiptUpdate) Where(ps ...predicate.TokenTransactionReceipt) *TokenTransactionReceiptUpdate {
	ttru.mutation.Where(ps...)
	return ttru
}

// SetUpdateTime sets the "update_time" field.
func (ttru *TokenTransactionReceiptUpdate) SetUpdateTime(t time.Time) *TokenTransactionReceiptUpdate {
	ttru.mutation.SetUpdateTime(t)
	return ttru
}

// SetPartialTokenTransactionHash sets the "partial_token_transaction_hash" field.
func (ttru *TokenTransactionReceiptUpdate) SetPartialTokenTransactionHash(b []byte) *TokenTransactionReceiptUpdate {
	ttru.mutation.SetPartialTokenTransactionHash(b)
	return ttru
}

// SetFinalizedTokenTransactionHash sets the "finalized_token_transaction_hash" field.
func (ttru *TokenTransactionReceiptUpdate) SetFinalizedTokenTransactionHash(b []byte) *TokenTransactionReceiptUpdate {
	ttru.mutation.SetFinalizedTokenTransactionHash(b)
	return ttru
}

// SetOperatorSignature sets the "operator_signature" field.
func (ttru *TokenTransactionReceiptUpdate) SetOperatorSignature(b []byte) *TokenTransactionReceiptUpdate {
	ttru.mutation.SetOperatorSignature(b)
	return ttru
}

// ClearOperatorSignature clears the value of the "operator_signature" field.
func (ttru *TokenTransactionReceiptUpdate) ClearOperatorSignature() *TokenTransactionReceiptUpdate {
	ttru.mutation.ClearOperatorSignature()
	return ttru
}

// SetStatus sets the "status" field.
func (ttru *TokenTransactionReceiptUpdate) SetStatus(sts schematype.TokenTransactionStatus) *TokenTransactionReceiptUpdate {
	ttru.mutation.SetStatus(sts)
	return ttru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ttru *TokenTransactionReceiptUpdate) SetNillableStatus(sts *schematype.TokenTransactionStatus) *TokenTransactionReceiptUpdate {
	if sts != nil {
		ttru.SetStatus(*sts)
	}
	return ttru
}

// ClearStatus clears the value of the "status" field.
func (ttru *TokenTransactionReceiptUpdate) ClearStatus() *TokenTransactionReceiptUpdate {
	ttru.mutation.ClearStatus()
	return ttru
}

// AddSpentLeafIDs adds the "spent_leaf" edge to the TokenLeaf entity by IDs.
func (ttru *TokenTransactionReceiptUpdate) AddSpentLeafIDs(ids ...uuid.UUID) *TokenTransactionReceiptUpdate {
	ttru.mutation.AddSpentLeafIDs(ids...)
	return ttru
}

// AddSpentLeaf adds the "spent_leaf" edges to the TokenLeaf entity.
func (ttru *TokenTransactionReceiptUpdate) AddSpentLeaf(t ...*TokenLeaf) *TokenTransactionReceiptUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttru.AddSpentLeafIDs(ids...)
}

// AddCreatedLeafIDs adds the "created_leaf" edge to the TokenLeaf entity by IDs.
func (ttru *TokenTransactionReceiptUpdate) AddCreatedLeafIDs(ids ...uuid.UUID) *TokenTransactionReceiptUpdate {
	ttru.mutation.AddCreatedLeafIDs(ids...)
	return ttru
}

// AddCreatedLeaf adds the "created_leaf" edges to the TokenLeaf entity.
func (ttru *TokenTransactionReceiptUpdate) AddCreatedLeaf(t ...*TokenLeaf) *TokenTransactionReceiptUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttru.AddCreatedLeafIDs(ids...)
}

// SetMintID sets the "mint" edge to the TokenMint entity by ID.
func (ttru *TokenTransactionReceiptUpdate) SetMintID(id uuid.UUID) *TokenTransactionReceiptUpdate {
	ttru.mutation.SetMintID(id)
	return ttru
}

// SetNillableMintID sets the "mint" edge to the TokenMint entity by ID if the given value is not nil.
func (ttru *TokenTransactionReceiptUpdate) SetNillableMintID(id *uuid.UUID) *TokenTransactionReceiptUpdate {
	if id != nil {
		ttru = ttru.SetMintID(*id)
	}
	return ttru
}

// SetMint sets the "mint" edge to the TokenMint entity.
func (ttru *TokenTransactionReceiptUpdate) SetMint(t *TokenMint) *TokenTransactionReceiptUpdate {
	return ttru.SetMintID(t.ID)
}

// Mutation returns the TokenTransactionReceiptMutation object of the builder.
func (ttru *TokenTransactionReceiptUpdate) Mutation() *TokenTransactionReceiptMutation {
	return ttru.mutation
}

// ClearSpentLeaf clears all "spent_leaf" edges to the TokenLeaf entity.
func (ttru *TokenTransactionReceiptUpdate) ClearSpentLeaf() *TokenTransactionReceiptUpdate {
	ttru.mutation.ClearSpentLeaf()
	return ttru
}

// RemoveSpentLeafIDs removes the "spent_leaf" edge to TokenLeaf entities by IDs.
func (ttru *TokenTransactionReceiptUpdate) RemoveSpentLeafIDs(ids ...uuid.UUID) *TokenTransactionReceiptUpdate {
	ttru.mutation.RemoveSpentLeafIDs(ids...)
	return ttru
}

// RemoveSpentLeaf removes "spent_leaf" edges to TokenLeaf entities.
func (ttru *TokenTransactionReceiptUpdate) RemoveSpentLeaf(t ...*TokenLeaf) *TokenTransactionReceiptUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttru.RemoveSpentLeafIDs(ids...)
}

// ClearCreatedLeaf clears all "created_leaf" edges to the TokenLeaf entity.
func (ttru *TokenTransactionReceiptUpdate) ClearCreatedLeaf() *TokenTransactionReceiptUpdate {
	ttru.mutation.ClearCreatedLeaf()
	return ttru
}

// RemoveCreatedLeafIDs removes the "created_leaf" edge to TokenLeaf entities by IDs.
func (ttru *TokenTransactionReceiptUpdate) RemoveCreatedLeafIDs(ids ...uuid.UUID) *TokenTransactionReceiptUpdate {
	ttru.mutation.RemoveCreatedLeafIDs(ids...)
	return ttru
}

// RemoveCreatedLeaf removes "created_leaf" edges to TokenLeaf entities.
func (ttru *TokenTransactionReceiptUpdate) RemoveCreatedLeaf(t ...*TokenLeaf) *TokenTransactionReceiptUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttru.RemoveCreatedLeafIDs(ids...)
}

// ClearMint clears the "mint" edge to the TokenMint entity.
func (ttru *TokenTransactionReceiptUpdate) ClearMint() *TokenTransactionReceiptUpdate {
	ttru.mutation.ClearMint()
	return ttru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttru *TokenTransactionReceiptUpdate) Save(ctx context.Context) (int, error) {
	ttru.defaults()
	return withHooks(ctx, ttru.sqlSave, ttru.mutation, ttru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttru *TokenTransactionReceiptUpdate) SaveX(ctx context.Context) int {
	affected, err := ttru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttru *TokenTransactionReceiptUpdate) Exec(ctx context.Context) error {
	_, err := ttru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttru *TokenTransactionReceiptUpdate) ExecX(ctx context.Context) {
	if err := ttru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttru *TokenTransactionReceiptUpdate) defaults() {
	if _, ok := ttru.mutation.UpdateTime(); !ok {
		v := tokentransactionreceipt.UpdateDefaultUpdateTime()
		ttru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttru *TokenTransactionReceiptUpdate) check() error {
	if v, ok := ttru.mutation.PartialTokenTransactionHash(); ok {
		if err := tokentransactionreceipt.PartialTokenTransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "partial_token_transaction_hash", err: fmt.Errorf(`ent: validator failed for field "TokenTransactionReceipt.partial_token_transaction_hash": %w`, err)}
		}
	}
	if v, ok := ttru.mutation.FinalizedTokenTransactionHash(); ok {
		if err := tokentransactionreceipt.FinalizedTokenTransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "finalized_token_transaction_hash", err: fmt.Errorf(`ent: validator failed for field "TokenTransactionReceipt.finalized_token_transaction_hash": %w`, err)}
		}
	}
	if v, ok := ttru.mutation.Status(); ok {
		if err := tokentransactionreceipt.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TokenTransactionReceipt.status": %w`, err)}
		}
	}
	return nil
}

func (ttru *TokenTransactionReceiptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tokentransactionreceipt.Table, tokentransactionreceipt.Columns, sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID))
	if ps := ttru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttru.mutation.UpdateTime(); ok {
		_spec.SetField(tokentransactionreceipt.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ttru.mutation.PartialTokenTransactionHash(); ok {
		_spec.SetField(tokentransactionreceipt.FieldPartialTokenTransactionHash, field.TypeBytes, value)
	}
	if value, ok := ttru.mutation.FinalizedTokenTransactionHash(); ok {
		_spec.SetField(tokentransactionreceipt.FieldFinalizedTokenTransactionHash, field.TypeBytes, value)
	}
	if value, ok := ttru.mutation.OperatorSignature(); ok {
		_spec.SetField(tokentransactionreceipt.FieldOperatorSignature, field.TypeBytes, value)
	}
	if ttru.mutation.OperatorSignatureCleared() {
		_spec.ClearField(tokentransactionreceipt.FieldOperatorSignature, field.TypeBytes)
	}
	if value, ok := ttru.mutation.Status(); ok {
		_spec.SetField(tokentransactionreceipt.FieldStatus, field.TypeEnum, value)
	}
	if ttru.mutation.StatusCleared() {
		_spec.ClearField(tokentransactionreceipt.FieldStatus, field.TypeEnum)
	}
	if ttru.mutation.SpentLeafCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.SpentLeafTable,
			Columns: []string{tokentransactionreceipt.SpentLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttru.mutation.RemovedSpentLeafIDs(); len(nodes) > 0 && !ttru.mutation.SpentLeafCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.SpentLeafTable,
			Columns: []string{tokentransactionreceipt.SpentLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttru.mutation.SpentLeafIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.SpentLeafTable,
			Columns: []string{tokentransactionreceipt.SpentLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttru.mutation.CreatedLeafCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.CreatedLeafTable,
			Columns: []string{tokentransactionreceipt.CreatedLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttru.mutation.RemovedCreatedLeafIDs(); len(nodes) > 0 && !ttru.mutation.CreatedLeafCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.CreatedLeafTable,
			Columns: []string{tokentransactionreceipt.CreatedLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttru.mutation.CreatedLeafIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.CreatedLeafTable,
			Columns: []string{tokentransactionreceipt.CreatedLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttru.mutation.MintCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokentransactionreceipt.MintTable,
			Columns: []string{tokentransactionreceipt.MintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenmint.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttru.mutation.MintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokentransactionreceipt.MintTable,
			Columns: []string{tokentransactionreceipt.MintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenmint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokentransactionreceipt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttru.mutation.done = true
	return n, nil
}

// TokenTransactionReceiptUpdateOne is the builder for updating a single TokenTransactionReceipt entity.
type TokenTransactionReceiptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TokenTransactionReceiptMutation
}

// SetUpdateTime sets the "update_time" field.
func (ttruo *TokenTransactionReceiptUpdateOne) SetUpdateTime(t time.Time) *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.SetUpdateTime(t)
	return ttruo
}

// SetPartialTokenTransactionHash sets the "partial_token_transaction_hash" field.
func (ttruo *TokenTransactionReceiptUpdateOne) SetPartialTokenTransactionHash(b []byte) *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.SetPartialTokenTransactionHash(b)
	return ttruo
}

// SetFinalizedTokenTransactionHash sets the "finalized_token_transaction_hash" field.
func (ttruo *TokenTransactionReceiptUpdateOne) SetFinalizedTokenTransactionHash(b []byte) *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.SetFinalizedTokenTransactionHash(b)
	return ttruo
}

// SetOperatorSignature sets the "operator_signature" field.
func (ttruo *TokenTransactionReceiptUpdateOne) SetOperatorSignature(b []byte) *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.SetOperatorSignature(b)
	return ttruo
}

// ClearOperatorSignature clears the value of the "operator_signature" field.
func (ttruo *TokenTransactionReceiptUpdateOne) ClearOperatorSignature() *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.ClearOperatorSignature()
	return ttruo
}

// SetStatus sets the "status" field.
func (ttruo *TokenTransactionReceiptUpdateOne) SetStatus(sts schematype.TokenTransactionStatus) *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.SetStatus(sts)
	return ttruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ttruo *TokenTransactionReceiptUpdateOne) SetNillableStatus(sts *schematype.TokenTransactionStatus) *TokenTransactionReceiptUpdateOne {
	if sts != nil {
		ttruo.SetStatus(*sts)
	}
	return ttruo
}

// ClearStatus clears the value of the "status" field.
func (ttruo *TokenTransactionReceiptUpdateOne) ClearStatus() *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.ClearStatus()
	return ttruo
}

// AddSpentLeafIDs adds the "spent_leaf" edge to the TokenLeaf entity by IDs.
func (ttruo *TokenTransactionReceiptUpdateOne) AddSpentLeafIDs(ids ...uuid.UUID) *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.AddSpentLeafIDs(ids...)
	return ttruo
}

// AddSpentLeaf adds the "spent_leaf" edges to the TokenLeaf entity.
func (ttruo *TokenTransactionReceiptUpdateOne) AddSpentLeaf(t ...*TokenLeaf) *TokenTransactionReceiptUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttruo.AddSpentLeafIDs(ids...)
}

// AddCreatedLeafIDs adds the "created_leaf" edge to the TokenLeaf entity by IDs.
func (ttruo *TokenTransactionReceiptUpdateOne) AddCreatedLeafIDs(ids ...uuid.UUID) *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.AddCreatedLeafIDs(ids...)
	return ttruo
}

// AddCreatedLeaf adds the "created_leaf" edges to the TokenLeaf entity.
func (ttruo *TokenTransactionReceiptUpdateOne) AddCreatedLeaf(t ...*TokenLeaf) *TokenTransactionReceiptUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttruo.AddCreatedLeafIDs(ids...)
}

// SetMintID sets the "mint" edge to the TokenMint entity by ID.
func (ttruo *TokenTransactionReceiptUpdateOne) SetMintID(id uuid.UUID) *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.SetMintID(id)
	return ttruo
}

// SetNillableMintID sets the "mint" edge to the TokenMint entity by ID if the given value is not nil.
func (ttruo *TokenTransactionReceiptUpdateOne) SetNillableMintID(id *uuid.UUID) *TokenTransactionReceiptUpdateOne {
	if id != nil {
		ttruo = ttruo.SetMintID(*id)
	}
	return ttruo
}

// SetMint sets the "mint" edge to the TokenMint entity.
func (ttruo *TokenTransactionReceiptUpdateOne) SetMint(t *TokenMint) *TokenTransactionReceiptUpdateOne {
	return ttruo.SetMintID(t.ID)
}

// Mutation returns the TokenTransactionReceiptMutation object of the builder.
func (ttruo *TokenTransactionReceiptUpdateOne) Mutation() *TokenTransactionReceiptMutation {
	return ttruo.mutation
}

// ClearSpentLeaf clears all "spent_leaf" edges to the TokenLeaf entity.
func (ttruo *TokenTransactionReceiptUpdateOne) ClearSpentLeaf() *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.ClearSpentLeaf()
	return ttruo
}

// RemoveSpentLeafIDs removes the "spent_leaf" edge to TokenLeaf entities by IDs.
func (ttruo *TokenTransactionReceiptUpdateOne) RemoveSpentLeafIDs(ids ...uuid.UUID) *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.RemoveSpentLeafIDs(ids...)
	return ttruo
}

// RemoveSpentLeaf removes "spent_leaf" edges to TokenLeaf entities.
func (ttruo *TokenTransactionReceiptUpdateOne) RemoveSpentLeaf(t ...*TokenLeaf) *TokenTransactionReceiptUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttruo.RemoveSpentLeafIDs(ids...)
}

// ClearCreatedLeaf clears all "created_leaf" edges to the TokenLeaf entity.
func (ttruo *TokenTransactionReceiptUpdateOne) ClearCreatedLeaf() *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.ClearCreatedLeaf()
	return ttruo
}

// RemoveCreatedLeafIDs removes the "created_leaf" edge to TokenLeaf entities by IDs.
func (ttruo *TokenTransactionReceiptUpdateOne) RemoveCreatedLeafIDs(ids ...uuid.UUID) *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.RemoveCreatedLeafIDs(ids...)
	return ttruo
}

// RemoveCreatedLeaf removes "created_leaf" edges to TokenLeaf entities.
func (ttruo *TokenTransactionReceiptUpdateOne) RemoveCreatedLeaf(t ...*TokenLeaf) *TokenTransactionReceiptUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttruo.RemoveCreatedLeafIDs(ids...)
}

// ClearMint clears the "mint" edge to the TokenMint entity.
func (ttruo *TokenTransactionReceiptUpdateOne) ClearMint() *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.ClearMint()
	return ttruo
}

// Where appends a list predicates to the TokenTransactionReceiptUpdate builder.
func (ttruo *TokenTransactionReceiptUpdateOne) Where(ps ...predicate.TokenTransactionReceipt) *TokenTransactionReceiptUpdateOne {
	ttruo.mutation.Where(ps...)
	return ttruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttruo *TokenTransactionReceiptUpdateOne) Select(field string, fields ...string) *TokenTransactionReceiptUpdateOne {
	ttruo.fields = append([]string{field}, fields...)
	return ttruo
}

// Save executes the query and returns the updated TokenTransactionReceipt entity.
func (ttruo *TokenTransactionReceiptUpdateOne) Save(ctx context.Context) (*TokenTransactionReceipt, error) {
	ttruo.defaults()
	return withHooks(ctx, ttruo.sqlSave, ttruo.mutation, ttruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttruo *TokenTransactionReceiptUpdateOne) SaveX(ctx context.Context) *TokenTransactionReceipt {
	node, err := ttruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttruo *TokenTransactionReceiptUpdateOne) Exec(ctx context.Context) error {
	_, err := ttruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttruo *TokenTransactionReceiptUpdateOne) ExecX(ctx context.Context) {
	if err := ttruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttruo *TokenTransactionReceiptUpdateOne) defaults() {
	if _, ok := ttruo.mutation.UpdateTime(); !ok {
		v := tokentransactionreceipt.UpdateDefaultUpdateTime()
		ttruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttruo *TokenTransactionReceiptUpdateOne) check() error {
	if v, ok := ttruo.mutation.PartialTokenTransactionHash(); ok {
		if err := tokentransactionreceipt.PartialTokenTransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "partial_token_transaction_hash", err: fmt.Errorf(`ent: validator failed for field "TokenTransactionReceipt.partial_token_transaction_hash": %w`, err)}
		}
	}
	if v, ok := ttruo.mutation.FinalizedTokenTransactionHash(); ok {
		if err := tokentransactionreceipt.FinalizedTokenTransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "finalized_token_transaction_hash", err: fmt.Errorf(`ent: validator failed for field "TokenTransactionReceipt.finalized_token_transaction_hash": %w`, err)}
		}
	}
	if v, ok := ttruo.mutation.Status(); ok {
		if err := tokentransactionreceipt.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TokenTransactionReceipt.status": %w`, err)}
		}
	}
	return nil
}

func (ttruo *TokenTransactionReceiptUpdateOne) sqlSave(ctx context.Context) (_node *TokenTransactionReceipt, err error) {
	if err := ttruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tokentransactionreceipt.Table, tokentransactionreceipt.Columns, sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID))
	id, ok := ttruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TokenTransactionReceipt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tokentransactionreceipt.FieldID)
		for _, f := range fields {
			if !tokentransactionreceipt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tokentransactionreceipt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttruo.mutation.UpdateTime(); ok {
		_spec.SetField(tokentransactionreceipt.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ttruo.mutation.PartialTokenTransactionHash(); ok {
		_spec.SetField(tokentransactionreceipt.FieldPartialTokenTransactionHash, field.TypeBytes, value)
	}
	if value, ok := ttruo.mutation.FinalizedTokenTransactionHash(); ok {
		_spec.SetField(tokentransactionreceipt.FieldFinalizedTokenTransactionHash, field.TypeBytes, value)
	}
	if value, ok := ttruo.mutation.OperatorSignature(); ok {
		_spec.SetField(tokentransactionreceipt.FieldOperatorSignature, field.TypeBytes, value)
	}
	if ttruo.mutation.OperatorSignatureCleared() {
		_spec.ClearField(tokentransactionreceipt.FieldOperatorSignature, field.TypeBytes)
	}
	if value, ok := ttruo.mutation.Status(); ok {
		_spec.SetField(tokentransactionreceipt.FieldStatus, field.TypeEnum, value)
	}
	if ttruo.mutation.StatusCleared() {
		_spec.ClearField(tokentransactionreceipt.FieldStatus, field.TypeEnum)
	}
	if ttruo.mutation.SpentLeafCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.SpentLeafTable,
			Columns: []string{tokentransactionreceipt.SpentLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttruo.mutation.RemovedSpentLeafIDs(); len(nodes) > 0 && !ttruo.mutation.SpentLeafCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.SpentLeafTable,
			Columns: []string{tokentransactionreceipt.SpentLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttruo.mutation.SpentLeafIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.SpentLeafTable,
			Columns: []string{tokentransactionreceipt.SpentLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttruo.mutation.CreatedLeafCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.CreatedLeafTable,
			Columns: []string{tokentransactionreceipt.CreatedLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttruo.mutation.RemovedCreatedLeafIDs(); len(nodes) > 0 && !ttruo.mutation.CreatedLeafCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.CreatedLeafTable,
			Columns: []string{tokentransactionreceipt.CreatedLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttruo.mutation.CreatedLeafIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.CreatedLeafTable,
			Columns: []string{tokentransactionreceipt.CreatedLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttruo.mutation.MintCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokentransactionreceipt.MintTable,
			Columns: []string{tokentransactionreceipt.MintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenmint.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttruo.mutation.MintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokentransactionreceipt.MintTable,
			Columns: []string{tokentransactionreceipt.MintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenmint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TokenTransactionReceipt{config: ttruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokentransactionreceipt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttruo.mutation.done = true
	return _node, nil
}
