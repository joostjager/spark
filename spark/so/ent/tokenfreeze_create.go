// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/tokenfreeze"
)

// TokenFreezeCreate is the builder for creating a TokenFreeze entity.
type TokenFreezeCreate struct {
	config
	mutation *TokenFreezeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tfc *TokenFreezeCreate) SetCreateTime(t time.Time) *TokenFreezeCreate {
	tfc.mutation.SetCreateTime(t)
	return tfc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tfc *TokenFreezeCreate) SetNillableCreateTime(t *time.Time) *TokenFreezeCreate {
	if t != nil {
		tfc.SetCreateTime(*t)
	}
	return tfc
}

// SetUpdateTime sets the "update_time" field.
func (tfc *TokenFreezeCreate) SetUpdateTime(t time.Time) *TokenFreezeCreate {
	tfc.mutation.SetUpdateTime(t)
	return tfc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tfc *TokenFreezeCreate) SetNillableUpdateTime(t *time.Time) *TokenFreezeCreate {
	if t != nil {
		tfc.SetUpdateTime(*t)
	}
	return tfc
}

// SetStatus sets the "status" field.
func (tfc *TokenFreezeCreate) SetStatus(sfs schematype.TokenFreezeStatus) *TokenFreezeCreate {
	tfc.mutation.SetStatus(sfs)
	return tfc
}

// SetOwnerPublicKey sets the "owner_public_key" field.
func (tfc *TokenFreezeCreate) SetOwnerPublicKey(b []byte) *TokenFreezeCreate {
	tfc.mutation.SetOwnerPublicKey(b)
	return tfc
}

// SetTokenPublicKey sets the "token_public_key" field.
func (tfc *TokenFreezeCreate) SetTokenPublicKey(b []byte) *TokenFreezeCreate {
	tfc.mutation.SetTokenPublicKey(b)
	return tfc
}

// SetIssuerSignature sets the "issuer_signature" field.
func (tfc *TokenFreezeCreate) SetIssuerSignature(b []byte) *TokenFreezeCreate {
	tfc.mutation.SetIssuerSignature(b)
	return tfc
}

// SetWalletProvidedFreezeTimestamp sets the "wallet_provided_freeze_timestamp" field.
func (tfc *TokenFreezeCreate) SetWalletProvidedFreezeTimestamp(u uint64) *TokenFreezeCreate {
	tfc.mutation.SetWalletProvidedFreezeTimestamp(u)
	return tfc
}

// SetWalletProvidedThawTimestamp sets the "wallet_provided_thaw_timestamp" field.
func (tfc *TokenFreezeCreate) SetWalletProvidedThawTimestamp(u uint64) *TokenFreezeCreate {
	tfc.mutation.SetWalletProvidedThawTimestamp(u)
	return tfc
}

// SetNillableWalletProvidedThawTimestamp sets the "wallet_provided_thaw_timestamp" field if the given value is not nil.
func (tfc *TokenFreezeCreate) SetNillableWalletProvidedThawTimestamp(u *uint64) *TokenFreezeCreate {
	if u != nil {
		tfc.SetWalletProvidedThawTimestamp(*u)
	}
	return tfc
}

// SetID sets the "id" field.
func (tfc *TokenFreezeCreate) SetID(u uuid.UUID) *TokenFreezeCreate {
	tfc.mutation.SetID(u)
	return tfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tfc *TokenFreezeCreate) SetNillableID(u *uuid.UUID) *TokenFreezeCreate {
	if u != nil {
		tfc.SetID(*u)
	}
	return tfc
}

// Mutation returns the TokenFreezeMutation object of the builder.
func (tfc *TokenFreezeCreate) Mutation() *TokenFreezeMutation {
	return tfc.mutation
}

// Save creates the TokenFreeze in the database.
func (tfc *TokenFreezeCreate) Save(ctx context.Context) (*TokenFreeze, error) {
	tfc.defaults()
	return withHooks(ctx, tfc.sqlSave, tfc.mutation, tfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tfc *TokenFreezeCreate) SaveX(ctx context.Context) *TokenFreeze {
	v, err := tfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfc *TokenFreezeCreate) Exec(ctx context.Context) error {
	_, err := tfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfc *TokenFreezeCreate) ExecX(ctx context.Context) {
	if err := tfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfc *TokenFreezeCreate) defaults() {
	if _, ok := tfc.mutation.CreateTime(); !ok {
		v := tokenfreeze.DefaultCreateTime()
		tfc.mutation.SetCreateTime(v)
	}
	if _, ok := tfc.mutation.UpdateTime(); !ok {
		v := tokenfreeze.DefaultUpdateTime()
		tfc.mutation.SetUpdateTime(v)
	}
	if _, ok := tfc.mutation.ID(); !ok {
		v := tokenfreeze.DefaultID()
		tfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfc *TokenFreezeCreate) check() error {
	if _, ok := tfc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TokenFreeze.create_time"`)}
	}
	if _, ok := tfc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TokenFreeze.update_time"`)}
	}
	if _, ok := tfc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TokenFreeze.status"`)}
	}
	if v, ok := tfc.mutation.Status(); ok {
		if err := tokenfreeze.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TokenFreeze.status": %w`, err)}
		}
	}
	if _, ok := tfc.mutation.OwnerPublicKey(); !ok {
		return &ValidationError{Name: "owner_public_key", err: errors.New(`ent: missing required field "TokenFreeze.owner_public_key"`)}
	}
	if v, ok := tfc.mutation.OwnerPublicKey(); ok {
		if err := tokenfreeze.OwnerPublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_public_key", err: fmt.Errorf(`ent: validator failed for field "TokenFreeze.owner_public_key": %w`, err)}
		}
	}
	if _, ok := tfc.mutation.TokenPublicKey(); !ok {
		return &ValidationError{Name: "token_public_key", err: errors.New(`ent: missing required field "TokenFreeze.token_public_key"`)}
	}
	if v, ok := tfc.mutation.TokenPublicKey(); ok {
		if err := tokenfreeze.TokenPublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "token_public_key", err: fmt.Errorf(`ent: validator failed for field "TokenFreeze.token_public_key": %w`, err)}
		}
	}
	if _, ok := tfc.mutation.IssuerSignature(); !ok {
		return &ValidationError{Name: "issuer_signature", err: errors.New(`ent: missing required field "TokenFreeze.issuer_signature"`)}
	}
	if v, ok := tfc.mutation.IssuerSignature(); ok {
		if err := tokenfreeze.IssuerSignatureValidator(v); err != nil {
			return &ValidationError{Name: "issuer_signature", err: fmt.Errorf(`ent: validator failed for field "TokenFreeze.issuer_signature": %w`, err)}
		}
	}
	if _, ok := tfc.mutation.WalletProvidedFreezeTimestamp(); !ok {
		return &ValidationError{Name: "wallet_provided_freeze_timestamp", err: errors.New(`ent: missing required field "TokenFreeze.wallet_provided_freeze_timestamp"`)}
	}
	return nil
}

func (tfc *TokenFreezeCreate) sqlSave(ctx context.Context) (*TokenFreeze, error) {
	if err := tfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tfc.mutation.id = &_node.ID
	tfc.mutation.done = true
	return _node, nil
}

func (tfc *TokenFreezeCreate) createSpec() (*TokenFreeze, *sqlgraph.CreateSpec) {
	var (
		_node = &TokenFreeze{config: tfc.config}
		_spec = sqlgraph.NewCreateSpec(tokenfreeze.Table, sqlgraph.NewFieldSpec(tokenfreeze.FieldID, field.TypeUUID))
	)
	if id, ok := tfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tfc.mutation.CreateTime(); ok {
		_spec.SetField(tokenfreeze.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tfc.mutation.UpdateTime(); ok {
		_spec.SetField(tokenfreeze.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tfc.mutation.Status(); ok {
		_spec.SetField(tokenfreeze.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tfc.mutation.OwnerPublicKey(); ok {
		_spec.SetField(tokenfreeze.FieldOwnerPublicKey, field.TypeBytes, value)
		_node.OwnerPublicKey = value
	}
	if value, ok := tfc.mutation.TokenPublicKey(); ok {
		_spec.SetField(tokenfreeze.FieldTokenPublicKey, field.TypeBytes, value)
		_node.TokenPublicKey = value
	}
	if value, ok := tfc.mutation.IssuerSignature(); ok {
		_spec.SetField(tokenfreeze.FieldIssuerSignature, field.TypeBytes, value)
		_node.IssuerSignature = value
	}
	if value, ok := tfc.mutation.WalletProvidedFreezeTimestamp(); ok {
		_spec.SetField(tokenfreeze.FieldWalletProvidedFreezeTimestamp, field.TypeUint64, value)
		_node.WalletProvidedFreezeTimestamp = value
	}
	if value, ok := tfc.mutation.WalletProvidedThawTimestamp(); ok {
		_spec.SetField(tokenfreeze.FieldWalletProvidedThawTimestamp, field.TypeUint64, value)
		_node.WalletProvidedThawTimestamp = value
	}
	return _node, _spec
}

// TokenFreezeCreateBulk is the builder for creating many TokenFreeze entities in bulk.
type TokenFreezeCreateBulk struct {
	config
	err      error
	builders []*TokenFreezeCreate
}

// Save creates the TokenFreeze entities in the database.
func (tfcb *TokenFreezeCreateBulk) Save(ctx context.Context) ([]*TokenFreeze, error) {
	if tfcb.err != nil {
		return nil, tfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tfcb.builders))
	nodes := make([]*TokenFreeze, len(tfcb.builders))
	mutators := make([]Mutator, len(tfcb.builders))
	for i := range tfcb.builders {
		func(i int, root context.Context) {
			builder := tfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TokenFreezeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tfcb *TokenFreezeCreateBulk) SaveX(ctx context.Context) []*TokenFreeze {
	v, err := tfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfcb *TokenFreezeCreateBulk) Exec(ctx context.Context) error {
	_, err := tfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfcb *TokenFreezeCreateBulk) ExecX(ctx context.Context) {
	if err := tfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
