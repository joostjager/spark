// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/signingkeyshare"
	"github.com/lightsparkdev/spark/so/ent/tree"
	"github.com/lightsparkdev/spark/so/ent/treenode"
)

// TreeNodeCreate is the builder for creating a TreeNode entity.
type TreeNodeCreate struct {
	config
	mutation *TreeNodeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tnc *TreeNodeCreate) SetCreateTime(t time.Time) *TreeNodeCreate {
	tnc.mutation.SetCreateTime(t)
	return tnc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tnc *TreeNodeCreate) SetNillableCreateTime(t *time.Time) *TreeNodeCreate {
	if t != nil {
		tnc.SetCreateTime(*t)
	}
	return tnc
}

// SetUpdateTime sets the "update_time" field.
func (tnc *TreeNodeCreate) SetUpdateTime(t time.Time) *TreeNodeCreate {
	tnc.mutation.SetUpdateTime(t)
	return tnc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tnc *TreeNodeCreate) SetNillableUpdateTime(t *time.Time) *TreeNodeCreate {
	if t != nil {
		tnc.SetUpdateTime(*t)
	}
	return tnc
}

// SetValue sets the "value" field.
func (tnc *TreeNodeCreate) SetValue(u uint64) *TreeNodeCreate {
	tnc.mutation.SetValue(u)
	return tnc
}

// SetStatus sets the "status" field.
func (tnc *TreeNodeCreate) SetStatus(sns schematype.TreeNodeStatus) *TreeNodeCreate {
	tnc.mutation.SetStatus(sns)
	return tnc
}

// SetVerifyingPubkey sets the "verifying_pubkey" field.
func (tnc *TreeNodeCreate) SetVerifyingPubkey(b []byte) *TreeNodeCreate {
	tnc.mutation.SetVerifyingPubkey(b)
	return tnc
}

// SetOwnerIdentityPubkey sets the "owner_identity_pubkey" field.
func (tnc *TreeNodeCreate) SetOwnerIdentityPubkey(b []byte) *TreeNodeCreate {
	tnc.mutation.SetOwnerIdentityPubkey(b)
	return tnc
}

// SetOwnerSigningPubkey sets the "owner_signing_pubkey" field.
func (tnc *TreeNodeCreate) SetOwnerSigningPubkey(b []byte) *TreeNodeCreate {
	tnc.mutation.SetOwnerSigningPubkey(b)
	return tnc
}

// SetRawTx sets the "raw_tx" field.
func (tnc *TreeNodeCreate) SetRawTx(b []byte) *TreeNodeCreate {
	tnc.mutation.SetRawTx(b)
	return tnc
}

// SetVout sets the "vout" field.
func (tnc *TreeNodeCreate) SetVout(i int16) *TreeNodeCreate {
	tnc.mutation.SetVout(i)
	return tnc
}

// SetRawRefundTx sets the "raw_refund_tx" field.
func (tnc *TreeNodeCreate) SetRawRefundTx(b []byte) *TreeNodeCreate {
	tnc.mutation.SetRawRefundTx(b)
	return tnc
}

// SetNodeConfirmationHeight sets the "node_confirmation_height" field.
func (tnc *TreeNodeCreate) SetNodeConfirmationHeight(u uint64) *TreeNodeCreate {
	tnc.mutation.SetNodeConfirmationHeight(u)
	return tnc
}

// SetNillableNodeConfirmationHeight sets the "node_confirmation_height" field if the given value is not nil.
func (tnc *TreeNodeCreate) SetNillableNodeConfirmationHeight(u *uint64) *TreeNodeCreate {
	if u != nil {
		tnc.SetNodeConfirmationHeight(*u)
	}
	return tnc
}

// SetRefundConfirmationHeight sets the "refund_confirmation_height" field.
func (tnc *TreeNodeCreate) SetRefundConfirmationHeight(u uint64) *TreeNodeCreate {
	tnc.mutation.SetRefundConfirmationHeight(u)
	return tnc
}

// SetNillableRefundConfirmationHeight sets the "refund_confirmation_height" field if the given value is not nil.
func (tnc *TreeNodeCreate) SetNillableRefundConfirmationHeight(u *uint64) *TreeNodeCreate {
	if u != nil {
		tnc.SetRefundConfirmationHeight(*u)
	}
	return tnc
}

// SetDirectRefundTx sets the "direct_refund_tx" field.
func (tnc *TreeNodeCreate) SetDirectRefundTx(b []byte) *TreeNodeCreate {
	tnc.mutation.SetDirectRefundTx(b)
	return tnc
}

// SetID sets the "id" field.
func (tnc *TreeNodeCreate) SetID(u uuid.UUID) *TreeNodeCreate {
	tnc.mutation.SetID(u)
	return tnc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tnc *TreeNodeCreate) SetNillableID(u *uuid.UUID) *TreeNodeCreate {
	if u != nil {
		tnc.SetID(*u)
	}
	return tnc
}

// SetTreeID sets the "tree" edge to the Tree entity by ID.
func (tnc *TreeNodeCreate) SetTreeID(id uuid.UUID) *TreeNodeCreate {
	tnc.mutation.SetTreeID(id)
	return tnc
}

// SetTree sets the "tree" edge to the Tree entity.
func (tnc *TreeNodeCreate) SetTree(t *Tree) *TreeNodeCreate {
	return tnc.SetTreeID(t.ID)
}

// SetParentID sets the "parent" edge to the TreeNode entity by ID.
func (tnc *TreeNodeCreate) SetParentID(id uuid.UUID) *TreeNodeCreate {
	tnc.mutation.SetParentID(id)
	return tnc
}

// SetNillableParentID sets the "parent" edge to the TreeNode entity by ID if the given value is not nil.
func (tnc *TreeNodeCreate) SetNillableParentID(id *uuid.UUID) *TreeNodeCreate {
	if id != nil {
		tnc = tnc.SetParentID(*id)
	}
	return tnc
}

// SetParent sets the "parent" edge to the TreeNode entity.
func (tnc *TreeNodeCreate) SetParent(t *TreeNode) *TreeNodeCreate {
	return tnc.SetParentID(t.ID)
}

// SetSigningKeyshareID sets the "signing_keyshare" edge to the SigningKeyshare entity by ID.
func (tnc *TreeNodeCreate) SetSigningKeyshareID(id uuid.UUID) *TreeNodeCreate {
	tnc.mutation.SetSigningKeyshareID(id)
	return tnc
}

// SetSigningKeyshare sets the "signing_keyshare" edge to the SigningKeyshare entity.
func (tnc *TreeNodeCreate) SetSigningKeyshare(s *SigningKeyshare) *TreeNodeCreate {
	return tnc.SetSigningKeyshareID(s.ID)
}

// AddChildIDs adds the "children" edge to the TreeNode entity by IDs.
func (tnc *TreeNodeCreate) AddChildIDs(ids ...uuid.UUID) *TreeNodeCreate {
	tnc.mutation.AddChildIDs(ids...)
	return tnc
}

// AddChildren adds the "children" edges to the TreeNode entity.
func (tnc *TreeNodeCreate) AddChildren(t ...*TreeNode) *TreeNodeCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tnc.AddChildIDs(ids...)
}

// Mutation returns the TreeNodeMutation object of the builder.
func (tnc *TreeNodeCreate) Mutation() *TreeNodeMutation {
	return tnc.mutation
}

// Save creates the TreeNode in the database.
func (tnc *TreeNodeCreate) Save(ctx context.Context) (*TreeNode, error) {
	tnc.defaults()
	return withHooks(ctx, tnc.sqlSave, tnc.mutation, tnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tnc *TreeNodeCreate) SaveX(ctx context.Context) *TreeNode {
	v, err := tnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tnc *TreeNodeCreate) Exec(ctx context.Context) error {
	_, err := tnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnc *TreeNodeCreate) ExecX(ctx context.Context) {
	if err := tnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tnc *TreeNodeCreate) defaults() {
	if _, ok := tnc.mutation.CreateTime(); !ok {
		v := treenode.DefaultCreateTime()
		tnc.mutation.SetCreateTime(v)
	}
	if _, ok := tnc.mutation.UpdateTime(); !ok {
		v := treenode.DefaultUpdateTime()
		tnc.mutation.SetUpdateTime(v)
	}
	if _, ok := tnc.mutation.ID(); !ok {
		v := treenode.DefaultID()
		tnc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tnc *TreeNodeCreate) check() error {
	if _, ok := tnc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TreeNode.create_time"`)}
	}
	if _, ok := tnc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TreeNode.update_time"`)}
	}
	if _, ok := tnc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "TreeNode.value"`)}
	}
	if _, ok := tnc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TreeNode.status"`)}
	}
	if v, ok := tnc.mutation.Status(); ok {
		if err := treenode.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TreeNode.status": %w`, err)}
		}
	}
	if _, ok := tnc.mutation.VerifyingPubkey(); !ok {
		return &ValidationError{Name: "verifying_pubkey", err: errors.New(`ent: missing required field "TreeNode.verifying_pubkey"`)}
	}
	if v, ok := tnc.mutation.VerifyingPubkey(); ok {
		if err := treenode.VerifyingPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "verifying_pubkey", err: fmt.Errorf(`ent: validator failed for field "TreeNode.verifying_pubkey": %w`, err)}
		}
	}
	if _, ok := tnc.mutation.OwnerIdentityPubkey(); !ok {
		return &ValidationError{Name: "owner_identity_pubkey", err: errors.New(`ent: missing required field "TreeNode.owner_identity_pubkey"`)}
	}
	if v, ok := tnc.mutation.OwnerIdentityPubkey(); ok {
		if err := treenode.OwnerIdentityPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_identity_pubkey", err: fmt.Errorf(`ent: validator failed for field "TreeNode.owner_identity_pubkey": %w`, err)}
		}
	}
	if _, ok := tnc.mutation.OwnerSigningPubkey(); !ok {
		return &ValidationError{Name: "owner_signing_pubkey", err: errors.New(`ent: missing required field "TreeNode.owner_signing_pubkey"`)}
	}
	if v, ok := tnc.mutation.OwnerSigningPubkey(); ok {
		if err := treenode.OwnerSigningPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_signing_pubkey", err: fmt.Errorf(`ent: validator failed for field "TreeNode.owner_signing_pubkey": %w`, err)}
		}
	}
	if _, ok := tnc.mutation.RawTx(); !ok {
		return &ValidationError{Name: "raw_tx", err: errors.New(`ent: missing required field "TreeNode.raw_tx"`)}
	}
	if v, ok := tnc.mutation.RawTx(); ok {
		if err := treenode.RawTxValidator(v); err != nil {
			return &ValidationError{Name: "raw_tx", err: fmt.Errorf(`ent: validator failed for field "TreeNode.raw_tx": %w`, err)}
		}
	}
	if _, ok := tnc.mutation.Vout(); !ok {
		return &ValidationError{Name: "vout", err: errors.New(`ent: missing required field "TreeNode.vout"`)}
	}
	if len(tnc.mutation.TreeIDs()) == 0 {
		return &ValidationError{Name: "tree", err: errors.New(`ent: missing required edge "TreeNode.tree"`)}
	}
	if len(tnc.mutation.SigningKeyshareIDs()) == 0 {
		return &ValidationError{Name: "signing_keyshare", err: errors.New(`ent: missing required edge "TreeNode.signing_keyshare"`)}
	}
	return nil
}

func (tnc *TreeNodeCreate) sqlSave(ctx context.Context) (*TreeNode, error) {
	if err := tnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tnc.mutation.id = &_node.ID
	tnc.mutation.done = true
	return _node, nil
}

func (tnc *TreeNodeCreate) createSpec() (*TreeNode, *sqlgraph.CreateSpec) {
	var (
		_node = &TreeNode{config: tnc.config}
		_spec = sqlgraph.NewCreateSpec(treenode.Table, sqlgraph.NewFieldSpec(treenode.FieldID, field.TypeUUID))
	)
	if id, ok := tnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tnc.mutation.CreateTime(); ok {
		_spec.SetField(treenode.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tnc.mutation.UpdateTime(); ok {
		_spec.SetField(treenode.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tnc.mutation.Value(); ok {
		_spec.SetField(treenode.FieldValue, field.TypeUint64, value)
		_node.Value = value
	}
	if value, ok := tnc.mutation.Status(); ok {
		_spec.SetField(treenode.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tnc.mutation.VerifyingPubkey(); ok {
		_spec.SetField(treenode.FieldVerifyingPubkey, field.TypeBytes, value)
		_node.VerifyingPubkey = value
	}
	if value, ok := tnc.mutation.OwnerIdentityPubkey(); ok {
		_spec.SetField(treenode.FieldOwnerIdentityPubkey, field.TypeBytes, value)
		_node.OwnerIdentityPubkey = value
	}
	if value, ok := tnc.mutation.OwnerSigningPubkey(); ok {
		_spec.SetField(treenode.FieldOwnerSigningPubkey, field.TypeBytes, value)
		_node.OwnerSigningPubkey = value
	}
	if value, ok := tnc.mutation.RawTx(); ok {
		_spec.SetField(treenode.FieldRawTx, field.TypeBytes, value)
		_node.RawTx = value
	}
	if value, ok := tnc.mutation.Vout(); ok {
		_spec.SetField(treenode.FieldVout, field.TypeInt16, value)
		_node.Vout = value
	}
	if value, ok := tnc.mutation.RawRefundTx(); ok {
		_spec.SetField(treenode.FieldRawRefundTx, field.TypeBytes, value)
		_node.RawRefundTx = value
	}
	if value, ok := tnc.mutation.NodeConfirmationHeight(); ok {
		_spec.SetField(treenode.FieldNodeConfirmationHeight, field.TypeUint64, value)
		_node.NodeConfirmationHeight = value
	}
	if value, ok := tnc.mutation.RefundConfirmationHeight(); ok {
		_spec.SetField(treenode.FieldRefundConfirmationHeight, field.TypeUint64, value)
		_node.RefundConfirmationHeight = value
	}
	if value, ok := tnc.mutation.DirectRefundTx(); ok {
		_spec.SetField(treenode.FieldDirectRefundTx, field.TypeBytes, value)
		_node.DirectRefundTx = value
	}
	if nodes := tnc.mutation.TreeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   treenode.TreeTable,
			Columns: []string{treenode.TreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tree.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tree_node_tree = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tnc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   treenode.ParentTable,
			Columns: []string{treenode.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treenode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tree_node_parent = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tnc.mutation.SigningKeyshareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   treenode.SigningKeyshareTable,
			Columns: []string{treenode.SigningKeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tree_node_signing_keyshare = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tnc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   treenode.ChildrenTable,
			Columns: []string{treenode.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treenode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TreeNodeCreateBulk is the builder for creating many TreeNode entities in bulk.
type TreeNodeCreateBulk struct {
	config
	err      error
	builders []*TreeNodeCreate
}

// Save creates the TreeNode entities in the database.
func (tncb *TreeNodeCreateBulk) Save(ctx context.Context) ([]*TreeNode, error) {
	if tncb.err != nil {
		return nil, tncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tncb.builders))
	nodes := make([]*TreeNode, len(tncb.builders))
	mutators := make([]Mutator, len(tncb.builders))
	for i := range tncb.builders {
		func(i int, root context.Context) {
			builder := tncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TreeNodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tncb *TreeNodeCreateBulk) SaveX(ctx context.Context) []*TreeNode {
	v, err := tncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tncb *TreeNodeCreateBulk) Exec(ctx context.Context) error {
	_, err := tncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tncb *TreeNodeCreateBulk) ExecX(ctx context.Context) {
	if err := tncb.Exec(ctx); err != nil {
		panic(err)
	}
}
