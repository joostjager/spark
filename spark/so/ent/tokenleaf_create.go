// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/signingkeyshare"
	"github.com/lightsparkdev/spark/so/ent/tokenleaf"
	"github.com/lightsparkdev/spark/so/ent/tokentransactionreceipt"
)

// TokenLeafCreate is the builder for creating a TokenLeaf entity.
type TokenLeafCreate struct {
	config
	mutation *TokenLeafMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tlc *TokenLeafCreate) SetCreateTime(t time.Time) *TokenLeafCreate {
	tlc.mutation.SetCreateTime(t)
	return tlc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tlc *TokenLeafCreate) SetNillableCreateTime(t *time.Time) *TokenLeafCreate {
	if t != nil {
		tlc.SetCreateTime(*t)
	}
	return tlc
}

// SetUpdateTime sets the "update_time" field.
func (tlc *TokenLeafCreate) SetUpdateTime(t time.Time) *TokenLeafCreate {
	tlc.mutation.SetUpdateTime(t)
	return tlc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tlc *TokenLeafCreate) SetNillableUpdateTime(t *time.Time) *TokenLeafCreate {
	if t != nil {
		tlc.SetUpdateTime(*t)
	}
	return tlc
}

// SetStatus sets the "status" field.
func (tlc *TokenLeafCreate) SetStatus(sls schematype.TokenLeafStatus) *TokenLeafCreate {
	tlc.mutation.SetStatus(sls)
	return tlc
}

// SetOwnerPublicKey sets the "owner_public_key" field.
func (tlc *TokenLeafCreate) SetOwnerPublicKey(b []byte) *TokenLeafCreate {
	tlc.mutation.SetOwnerPublicKey(b)
	return tlc
}

// SetWithdrawBondSats sets the "withdraw_bond_sats" field.
func (tlc *TokenLeafCreate) SetWithdrawBondSats(u uint64) *TokenLeafCreate {
	tlc.mutation.SetWithdrawBondSats(u)
	return tlc
}

// SetWithdrawRelativeBlockLocktime sets the "withdraw_relative_block_locktime" field.
func (tlc *TokenLeafCreate) SetWithdrawRelativeBlockLocktime(u uint64) *TokenLeafCreate {
	tlc.mutation.SetWithdrawRelativeBlockLocktime(u)
	return tlc
}

// SetWithdrawRevocationPublicKey sets the "withdraw_revocation_public_key" field.
func (tlc *TokenLeafCreate) SetWithdrawRevocationPublicKey(b []byte) *TokenLeafCreate {
	tlc.mutation.SetWithdrawRevocationPublicKey(b)
	return tlc
}

// SetTokenPublicKey sets the "token_public_key" field.
func (tlc *TokenLeafCreate) SetTokenPublicKey(b []byte) *TokenLeafCreate {
	tlc.mutation.SetTokenPublicKey(b)
	return tlc
}

// SetTokenAmount sets the "token_amount" field.
func (tlc *TokenLeafCreate) SetTokenAmount(b []byte) *TokenLeafCreate {
	tlc.mutation.SetTokenAmount(b)
	return tlc
}

// SetLeafCreatedTransactionOutputVout sets the "leaf_created_transaction_output_vout" field.
func (tlc *TokenLeafCreate) SetLeafCreatedTransactionOutputVout(i int32) *TokenLeafCreate {
	tlc.mutation.SetLeafCreatedTransactionOutputVout(i)
	return tlc
}

// SetLeafSpentOwnershipSignature sets the "leaf_spent_ownership_signature" field.
func (tlc *TokenLeafCreate) SetLeafSpentOwnershipSignature(b []byte) *TokenLeafCreate {
	tlc.mutation.SetLeafSpentOwnershipSignature(b)
	return tlc
}

// SetLeafSpentOperatorSpecificOwnershipSignature sets the "leaf_spent_operator_specific_ownership_signature" field.
func (tlc *TokenLeafCreate) SetLeafSpentOperatorSpecificOwnershipSignature(b []byte) *TokenLeafCreate {
	tlc.mutation.SetLeafSpentOperatorSpecificOwnershipSignature(b)
	return tlc
}

// SetLeafSpentTransactionInputVout sets the "leaf_spent_transaction_input_vout" field.
func (tlc *TokenLeafCreate) SetLeafSpentTransactionInputVout(i int32) *TokenLeafCreate {
	tlc.mutation.SetLeafSpentTransactionInputVout(i)
	return tlc
}

// SetNillableLeafSpentTransactionInputVout sets the "leaf_spent_transaction_input_vout" field if the given value is not nil.
func (tlc *TokenLeafCreate) SetNillableLeafSpentTransactionInputVout(i *int32) *TokenLeafCreate {
	if i != nil {
		tlc.SetLeafSpentTransactionInputVout(*i)
	}
	return tlc
}

// SetLeafSpentRevocationPrivateKey sets the "leaf_spent_revocation_private_key" field.
func (tlc *TokenLeafCreate) SetLeafSpentRevocationPrivateKey(b []byte) *TokenLeafCreate {
	tlc.mutation.SetLeafSpentRevocationPrivateKey(b)
	return tlc
}

// SetConfirmedWithdrawBlockHash sets the "confirmed_withdraw_block_hash" field.
func (tlc *TokenLeafCreate) SetConfirmedWithdrawBlockHash(b []byte) *TokenLeafCreate {
	tlc.mutation.SetConfirmedWithdrawBlockHash(b)
	return tlc
}

// SetNetwork sets the "network" field.
func (tlc *TokenLeafCreate) SetNetwork(s schematype.Network) *TokenLeafCreate {
	tlc.mutation.SetNetwork(s)
	return tlc
}

// SetNillableNetwork sets the "network" field if the given value is not nil.
func (tlc *TokenLeafCreate) SetNillableNetwork(s *schematype.Network) *TokenLeafCreate {
	if s != nil {
		tlc.SetNetwork(*s)
	}
	return tlc
}

// SetID sets the "id" field.
func (tlc *TokenLeafCreate) SetID(u uuid.UUID) *TokenLeafCreate {
	tlc.mutation.SetID(u)
	return tlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tlc *TokenLeafCreate) SetNillableID(u *uuid.UUID) *TokenLeafCreate {
	if u != nil {
		tlc.SetID(*u)
	}
	return tlc
}

// SetRevocationKeyshareID sets the "revocation_keyshare" edge to the SigningKeyshare entity by ID.
func (tlc *TokenLeafCreate) SetRevocationKeyshareID(id uuid.UUID) *TokenLeafCreate {
	tlc.mutation.SetRevocationKeyshareID(id)
	return tlc
}

// SetRevocationKeyshare sets the "revocation_keyshare" edge to the SigningKeyshare entity.
func (tlc *TokenLeafCreate) SetRevocationKeyshare(s *SigningKeyshare) *TokenLeafCreate {
	return tlc.SetRevocationKeyshareID(s.ID)
}

// SetLeafCreatedTokenTransactionReceiptID sets the "leaf_created_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID.
func (tlc *TokenLeafCreate) SetLeafCreatedTokenTransactionReceiptID(id uuid.UUID) *TokenLeafCreate {
	tlc.mutation.SetLeafCreatedTokenTransactionReceiptID(id)
	return tlc
}

// SetNillableLeafCreatedTokenTransactionReceiptID sets the "leaf_created_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID if the given value is not nil.
func (tlc *TokenLeafCreate) SetNillableLeafCreatedTokenTransactionReceiptID(id *uuid.UUID) *TokenLeafCreate {
	if id != nil {
		tlc = tlc.SetLeafCreatedTokenTransactionReceiptID(*id)
	}
	return tlc
}

// SetLeafCreatedTokenTransactionReceipt sets the "leaf_created_token_transaction_receipt" edge to the TokenTransactionReceipt entity.
func (tlc *TokenLeafCreate) SetLeafCreatedTokenTransactionReceipt(t *TokenTransactionReceipt) *TokenLeafCreate {
	return tlc.SetLeafCreatedTokenTransactionReceiptID(t.ID)
}

// SetLeafSpentTokenTransactionReceiptID sets the "leaf_spent_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID.
func (tlc *TokenLeafCreate) SetLeafSpentTokenTransactionReceiptID(id uuid.UUID) *TokenLeafCreate {
	tlc.mutation.SetLeafSpentTokenTransactionReceiptID(id)
	return tlc
}

// SetNillableLeafSpentTokenTransactionReceiptID sets the "leaf_spent_token_transaction_receipt" edge to the TokenTransactionReceipt entity by ID if the given value is not nil.
func (tlc *TokenLeafCreate) SetNillableLeafSpentTokenTransactionReceiptID(id *uuid.UUID) *TokenLeafCreate {
	if id != nil {
		tlc = tlc.SetLeafSpentTokenTransactionReceiptID(*id)
	}
	return tlc
}

// SetLeafSpentTokenTransactionReceipt sets the "leaf_spent_token_transaction_receipt" edge to the TokenTransactionReceipt entity.
func (tlc *TokenLeafCreate) SetLeafSpentTokenTransactionReceipt(t *TokenTransactionReceipt) *TokenLeafCreate {
	return tlc.SetLeafSpentTokenTransactionReceiptID(t.ID)
}

// Mutation returns the TokenLeafMutation object of the builder.
func (tlc *TokenLeafCreate) Mutation() *TokenLeafMutation {
	return tlc.mutation
}

// Save creates the TokenLeaf in the database.
func (tlc *TokenLeafCreate) Save(ctx context.Context) (*TokenLeaf, error) {
	tlc.defaults()
	return withHooks(ctx, tlc.sqlSave, tlc.mutation, tlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TokenLeafCreate) SaveX(ctx context.Context) *TokenLeaf {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TokenLeafCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TokenLeafCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TokenLeafCreate) defaults() {
	if _, ok := tlc.mutation.CreateTime(); !ok {
		v := tokenleaf.DefaultCreateTime()
		tlc.mutation.SetCreateTime(v)
	}
	if _, ok := tlc.mutation.UpdateTime(); !ok {
		v := tokenleaf.DefaultUpdateTime()
		tlc.mutation.SetUpdateTime(v)
	}
	if _, ok := tlc.mutation.ID(); !ok {
		v := tokenleaf.DefaultID()
		tlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TokenLeafCreate) check() error {
	if _, ok := tlc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TokenLeaf.create_time"`)}
	}
	if _, ok := tlc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TokenLeaf.update_time"`)}
	}
	if _, ok := tlc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TokenLeaf.status"`)}
	}
	if v, ok := tlc.mutation.Status(); ok {
		if err := tokenleaf.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TokenLeaf.status": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.OwnerPublicKey(); !ok {
		return &ValidationError{Name: "owner_public_key", err: errors.New(`ent: missing required field "TokenLeaf.owner_public_key"`)}
	}
	if v, ok := tlc.mutation.OwnerPublicKey(); ok {
		if err := tokenleaf.OwnerPublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_public_key", err: fmt.Errorf(`ent: validator failed for field "TokenLeaf.owner_public_key": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.WithdrawBondSats(); !ok {
		return &ValidationError{Name: "withdraw_bond_sats", err: errors.New(`ent: missing required field "TokenLeaf.withdraw_bond_sats"`)}
	}
	if _, ok := tlc.mutation.WithdrawRelativeBlockLocktime(); !ok {
		return &ValidationError{Name: "withdraw_relative_block_locktime", err: errors.New(`ent: missing required field "TokenLeaf.withdraw_relative_block_locktime"`)}
	}
	if _, ok := tlc.mutation.WithdrawRevocationPublicKey(); !ok {
		return &ValidationError{Name: "withdraw_revocation_public_key", err: errors.New(`ent: missing required field "TokenLeaf.withdraw_revocation_public_key"`)}
	}
	if _, ok := tlc.mutation.TokenPublicKey(); !ok {
		return &ValidationError{Name: "token_public_key", err: errors.New(`ent: missing required field "TokenLeaf.token_public_key"`)}
	}
	if v, ok := tlc.mutation.TokenPublicKey(); ok {
		if err := tokenleaf.TokenPublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "token_public_key", err: fmt.Errorf(`ent: validator failed for field "TokenLeaf.token_public_key": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.TokenAmount(); !ok {
		return &ValidationError{Name: "token_amount", err: errors.New(`ent: missing required field "TokenLeaf.token_amount"`)}
	}
	if v, ok := tlc.mutation.TokenAmount(); ok {
		if err := tokenleaf.TokenAmountValidator(v); err != nil {
			return &ValidationError{Name: "token_amount", err: fmt.Errorf(`ent: validator failed for field "TokenLeaf.token_amount": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.LeafCreatedTransactionOutputVout(); !ok {
		return &ValidationError{Name: "leaf_created_transaction_output_vout", err: errors.New(`ent: missing required field "TokenLeaf.leaf_created_transaction_output_vout"`)}
	}
	if v, ok := tlc.mutation.Network(); ok {
		if err := tokenleaf.NetworkValidator(v); err != nil {
			return &ValidationError{Name: "network", err: fmt.Errorf(`ent: validator failed for field "TokenLeaf.network": %w`, err)}
		}
	}
	if len(tlc.mutation.RevocationKeyshareIDs()) == 0 {
		return &ValidationError{Name: "revocation_keyshare", err: errors.New(`ent: missing required edge "TokenLeaf.revocation_keyshare"`)}
	}
	return nil
}

func (tlc *TokenLeafCreate) sqlSave(ctx context.Context) (*TokenLeaf, error) {
	if err := tlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tlc.mutation.id = &_node.ID
	tlc.mutation.done = true
	return _node, nil
}

func (tlc *TokenLeafCreate) createSpec() (*TokenLeaf, *sqlgraph.CreateSpec) {
	var (
		_node = &TokenLeaf{config: tlc.config}
		_spec = sqlgraph.NewCreateSpec(tokenleaf.Table, sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID))
	)
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tlc.mutation.CreateTime(); ok {
		_spec.SetField(tokenleaf.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tlc.mutation.UpdateTime(); ok {
		_spec.SetField(tokenleaf.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tlc.mutation.Status(); ok {
		_spec.SetField(tokenleaf.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tlc.mutation.OwnerPublicKey(); ok {
		_spec.SetField(tokenleaf.FieldOwnerPublicKey, field.TypeBytes, value)
		_node.OwnerPublicKey = value
	}
	if value, ok := tlc.mutation.WithdrawBondSats(); ok {
		_spec.SetField(tokenleaf.FieldWithdrawBondSats, field.TypeUint64, value)
		_node.WithdrawBondSats = value
	}
	if value, ok := tlc.mutation.WithdrawRelativeBlockLocktime(); ok {
		_spec.SetField(tokenleaf.FieldWithdrawRelativeBlockLocktime, field.TypeUint64, value)
		_node.WithdrawRelativeBlockLocktime = value
	}
	if value, ok := tlc.mutation.WithdrawRevocationPublicKey(); ok {
		_spec.SetField(tokenleaf.FieldWithdrawRevocationPublicKey, field.TypeBytes, value)
		_node.WithdrawRevocationPublicKey = value
	}
	if value, ok := tlc.mutation.TokenPublicKey(); ok {
		_spec.SetField(tokenleaf.FieldTokenPublicKey, field.TypeBytes, value)
		_node.TokenPublicKey = value
	}
	if value, ok := tlc.mutation.TokenAmount(); ok {
		_spec.SetField(tokenleaf.FieldTokenAmount, field.TypeBytes, value)
		_node.TokenAmount = value
	}
	if value, ok := tlc.mutation.LeafCreatedTransactionOutputVout(); ok {
		_spec.SetField(tokenleaf.FieldLeafCreatedTransactionOutputVout, field.TypeInt32, value)
		_node.LeafCreatedTransactionOutputVout = value
	}
	if value, ok := tlc.mutation.LeafSpentOwnershipSignature(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentOwnershipSignature, field.TypeBytes, value)
		_node.LeafSpentOwnershipSignature = value
	}
	if value, ok := tlc.mutation.LeafSpentOperatorSpecificOwnershipSignature(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentOperatorSpecificOwnershipSignature, field.TypeBytes, value)
		_node.LeafSpentOperatorSpecificOwnershipSignature = value
	}
	if value, ok := tlc.mutation.LeafSpentTransactionInputVout(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentTransactionInputVout, field.TypeInt32, value)
		_node.LeafSpentTransactionInputVout = value
	}
	if value, ok := tlc.mutation.LeafSpentRevocationPrivateKey(); ok {
		_spec.SetField(tokenleaf.FieldLeafSpentRevocationPrivateKey, field.TypeBytes, value)
		_node.LeafSpentRevocationPrivateKey = value
	}
	if value, ok := tlc.mutation.ConfirmedWithdrawBlockHash(); ok {
		_spec.SetField(tokenleaf.FieldConfirmedWithdrawBlockHash, field.TypeBytes, value)
		_node.ConfirmedWithdrawBlockHash = value
	}
	if value, ok := tlc.mutation.Network(); ok {
		_spec.SetField(tokenleaf.FieldNetwork, field.TypeEnum, value)
		_node.Network = value
	}
	if nodes := tlc.mutation.RevocationKeyshareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenleaf.RevocationKeyshareTable,
			Columns: []string{tokenleaf.RevocationKeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.token_leaf_revocation_keyshare = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.LeafCreatedTokenTransactionReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenleaf.LeafCreatedTokenTransactionReceiptTable,
			Columns: []string{tokenleaf.LeafCreatedTokenTransactionReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.token_leaf_leaf_created_token_transaction_receipt = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.LeafSpentTokenTransactionReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenleaf.LeafSpentTokenTransactionReceiptTable,
			Columns: []string{tokenleaf.LeafSpentTokenTransactionReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.token_leaf_leaf_spent_token_transaction_receipt = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TokenLeafCreateBulk is the builder for creating many TokenLeaf entities in bulk.
type TokenLeafCreateBulk struct {
	config
	err      error
	builders []*TokenLeafCreate
}

// Save creates the TokenLeaf entities in the database.
func (tlcb *TokenLeafCreateBulk) Save(ctx context.Context) ([]*TokenLeaf, error) {
	if tlcb.err != nil {
		return nil, tlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TokenLeaf, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TokenLeafMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TokenLeafCreateBulk) SaveX(ctx context.Context) []*TokenLeaf {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TokenLeafCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TokenLeafCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
