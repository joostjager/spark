// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/tokencreate"
	"github.com/lightsparkdev/spark/so/ent/tokenmint"
	"github.com/lightsparkdev/spark/so/ent/tokenoutput"
	"github.com/lightsparkdev/spark/so/ent/tokentransaction"
)

// TokenTransactionCreate is the builder for creating a TokenTransaction entity.
type TokenTransactionCreate struct {
	config
	mutation *TokenTransactionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ttc *TokenTransactionCreate) SetCreateTime(t time.Time) *TokenTransactionCreate {
	ttc.mutation.SetCreateTime(t)
	return ttc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ttc *TokenTransactionCreate) SetNillableCreateTime(t *time.Time) *TokenTransactionCreate {
	if t != nil {
		ttc.SetCreateTime(*t)
	}
	return ttc
}

// SetUpdateTime sets the "update_time" field.
func (ttc *TokenTransactionCreate) SetUpdateTime(t time.Time) *TokenTransactionCreate {
	ttc.mutation.SetUpdateTime(t)
	return ttc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ttc *TokenTransactionCreate) SetNillableUpdateTime(t *time.Time) *TokenTransactionCreate {
	if t != nil {
		ttc.SetUpdateTime(*t)
	}
	return ttc
}

// SetPartialTokenTransactionHash sets the "partial_token_transaction_hash" field.
func (ttc *TokenTransactionCreate) SetPartialTokenTransactionHash(b []byte) *TokenTransactionCreate {
	ttc.mutation.SetPartialTokenTransactionHash(b)
	return ttc
}

// SetFinalizedTokenTransactionHash sets the "finalized_token_transaction_hash" field.
func (ttc *TokenTransactionCreate) SetFinalizedTokenTransactionHash(b []byte) *TokenTransactionCreate {
	ttc.mutation.SetFinalizedTokenTransactionHash(b)
	return ttc
}

// SetOperatorSignature sets the "operator_signature" field.
func (ttc *TokenTransactionCreate) SetOperatorSignature(b []byte) *TokenTransactionCreate {
	ttc.mutation.SetOperatorSignature(b)
	return ttc
}

// SetStatus sets the "status" field.
func (ttc *TokenTransactionCreate) SetStatus(sts schematype.TokenTransactionStatus) *TokenTransactionCreate {
	ttc.mutation.SetStatus(sts)
	return ttc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ttc *TokenTransactionCreate) SetNillableStatus(sts *schematype.TokenTransactionStatus) *TokenTransactionCreate {
	if sts != nil {
		ttc.SetStatus(*sts)
	}
	return ttc
}

// SetExpiryTime sets the "expiry_time" field.
func (ttc *TokenTransactionCreate) SetExpiryTime(t time.Time) *TokenTransactionCreate {
	ttc.mutation.SetExpiryTime(t)
	return ttc
}

// SetNillableExpiryTime sets the "expiry_time" field if the given value is not nil.
func (ttc *TokenTransactionCreate) SetNillableExpiryTime(t *time.Time) *TokenTransactionCreate {
	if t != nil {
		ttc.SetExpiryTime(*t)
	}
	return ttc
}

// SetCoordinatorPublicKey sets the "coordinator_public_key" field.
func (ttc *TokenTransactionCreate) SetCoordinatorPublicKey(b []byte) *TokenTransactionCreate {
	ttc.mutation.SetCoordinatorPublicKey(b)
	return ttc
}

// SetID sets the "id" field.
func (ttc *TokenTransactionCreate) SetID(u uuid.UUID) *TokenTransactionCreate {
	ttc.mutation.SetID(u)
	return ttc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ttc *TokenTransactionCreate) SetNillableID(u *uuid.UUID) *TokenTransactionCreate {
	if u != nil {
		ttc.SetID(*u)
	}
	return ttc
}

// AddSpentOutputIDs adds the "spent_output" edge to the TokenOutput entity by IDs.
func (ttc *TokenTransactionCreate) AddSpentOutputIDs(ids ...uuid.UUID) *TokenTransactionCreate {
	ttc.mutation.AddSpentOutputIDs(ids...)
	return ttc
}

// AddSpentOutput adds the "spent_output" edges to the TokenOutput entity.
func (ttc *TokenTransactionCreate) AddSpentOutput(t ...*TokenOutput) *TokenTransactionCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttc.AddSpentOutputIDs(ids...)
}

// AddCreatedOutputIDs adds the "created_output" edge to the TokenOutput entity by IDs.
func (ttc *TokenTransactionCreate) AddCreatedOutputIDs(ids ...uuid.UUID) *TokenTransactionCreate {
	ttc.mutation.AddCreatedOutputIDs(ids...)
	return ttc
}

// AddCreatedOutput adds the "created_output" edges to the TokenOutput entity.
func (ttc *TokenTransactionCreate) AddCreatedOutput(t ...*TokenOutput) *TokenTransactionCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttc.AddCreatedOutputIDs(ids...)
}

// SetMintID sets the "mint" edge to the TokenMint entity by ID.
func (ttc *TokenTransactionCreate) SetMintID(id uuid.UUID) *TokenTransactionCreate {
	ttc.mutation.SetMintID(id)
	return ttc
}

// SetNillableMintID sets the "mint" edge to the TokenMint entity by ID if the given value is not nil.
func (ttc *TokenTransactionCreate) SetNillableMintID(id *uuid.UUID) *TokenTransactionCreate {
	if id != nil {
		ttc = ttc.SetMintID(*id)
	}
	return ttc
}

// SetMint sets the "mint" edge to the TokenMint entity.
func (ttc *TokenTransactionCreate) SetMint(t *TokenMint) *TokenTransactionCreate {
	return ttc.SetMintID(t.ID)
}

// SetCreateID sets the "create" edge to the TokenCreate entity by ID.
func (ttc *TokenTransactionCreate) SetCreateID(id uuid.UUID) *TokenTransactionCreate {
	ttc.mutation.SetCreateID(id)
	return ttc
}

// SetNillableCreateID sets the "create" edge to the TokenCreate entity by ID if the given value is not nil.
func (ttc *TokenTransactionCreate) SetNillableCreateID(id *uuid.UUID) *TokenTransactionCreate {
	if id != nil {
		ttc = ttc.SetCreateID(*id)
	}
	return ttc
}

// SetCreate sets the "create" edge to the TokenCreate entity.
func (ttc *TokenTransactionCreate) SetCreate(t *TokenCreate) *TokenTransactionCreate {
	return ttc.SetCreateID(t.ID)
}

// Mutation returns the TokenTransactionMutation object of the builder.
func (ttc *TokenTransactionCreate) Mutation() *TokenTransactionMutation {
	return ttc.mutation
}

// Save creates the TokenTransaction in the database.
func (ttc *TokenTransactionCreate) Save(ctx context.Context) (*TokenTransaction, error) {
	ttc.defaults()
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TokenTransactionCreate) SaveX(ctx context.Context) *TokenTransaction {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TokenTransactionCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TokenTransactionCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttc *TokenTransactionCreate) defaults() {
	if _, ok := ttc.mutation.CreateTime(); !ok {
		v := tokentransaction.DefaultCreateTime()
		ttc.mutation.SetCreateTime(v)
	}
	if _, ok := ttc.mutation.UpdateTime(); !ok {
		v := tokentransaction.DefaultUpdateTime()
		ttc.mutation.SetUpdateTime(v)
	}
	if _, ok := ttc.mutation.ID(); !ok {
		v := tokentransaction.DefaultID()
		ttc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TokenTransactionCreate) check() error {
	if _, ok := ttc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TokenTransaction.create_time"`)}
	}
	if _, ok := ttc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TokenTransaction.update_time"`)}
	}
	if _, ok := ttc.mutation.PartialTokenTransactionHash(); !ok {
		return &ValidationError{Name: "partial_token_transaction_hash", err: errors.New(`ent: missing required field "TokenTransaction.partial_token_transaction_hash"`)}
	}
	if v, ok := ttc.mutation.PartialTokenTransactionHash(); ok {
		if err := tokentransaction.PartialTokenTransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "partial_token_transaction_hash", err: fmt.Errorf(`ent: validator failed for field "TokenTransaction.partial_token_transaction_hash": %w`, err)}
		}
	}
	if _, ok := ttc.mutation.FinalizedTokenTransactionHash(); !ok {
		return &ValidationError{Name: "finalized_token_transaction_hash", err: errors.New(`ent: missing required field "TokenTransaction.finalized_token_transaction_hash"`)}
	}
	if v, ok := ttc.mutation.FinalizedTokenTransactionHash(); ok {
		if err := tokentransaction.FinalizedTokenTransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "finalized_token_transaction_hash", err: fmt.Errorf(`ent: validator failed for field "TokenTransaction.finalized_token_transaction_hash": %w`, err)}
		}
	}
	if v, ok := ttc.mutation.Status(); ok {
		if err := tokentransaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TokenTransaction.status": %w`, err)}
		}
	}
	return nil
}

func (ttc *TokenTransactionCreate) sqlSave(ctx context.Context) (*TokenTransaction, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ttc.mutation.id = &_node.ID
	ttc.mutation.done = true
	return _node, nil
}

func (ttc *TokenTransactionCreate) createSpec() (*TokenTransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &TokenTransaction{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(tokentransaction.Table, sqlgraph.NewFieldSpec(tokentransaction.FieldID, field.TypeUUID))
	)
	if id, ok := ttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ttc.mutation.CreateTime(); ok {
		_spec.SetField(tokentransaction.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ttc.mutation.UpdateTime(); ok {
		_spec.SetField(tokentransaction.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ttc.mutation.PartialTokenTransactionHash(); ok {
		_spec.SetField(tokentransaction.FieldPartialTokenTransactionHash, field.TypeBytes, value)
		_node.PartialTokenTransactionHash = value
	}
	if value, ok := ttc.mutation.FinalizedTokenTransactionHash(); ok {
		_spec.SetField(tokentransaction.FieldFinalizedTokenTransactionHash, field.TypeBytes, value)
		_node.FinalizedTokenTransactionHash = value
	}
	if value, ok := ttc.mutation.OperatorSignature(); ok {
		_spec.SetField(tokentransaction.FieldOperatorSignature, field.TypeBytes, value)
		_node.OperatorSignature = value
	}
	if value, ok := ttc.mutation.Status(); ok {
		_spec.SetField(tokentransaction.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ttc.mutation.ExpiryTime(); ok {
		_spec.SetField(tokentransaction.FieldExpiryTime, field.TypeTime, value)
		_node.ExpiryTime = value
	}
	if value, ok := ttc.mutation.CoordinatorPublicKey(); ok {
		_spec.SetField(tokentransaction.FieldCoordinatorPublicKey, field.TypeBytes, value)
		_node.CoordinatorPublicKey = value
	}
	if nodes := ttc.mutation.SpentOutputIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransaction.SpentOutputTable,
			Columns: []string{tokentransaction.SpentOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenoutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.CreatedOutputIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransaction.CreatedOutputTable,
			Columns: []string{tokentransaction.CreatedOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenoutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.MintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokentransaction.MintTable,
			Columns: []string{tokentransaction.MintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenmint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.token_transaction_mint = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.CreateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokentransaction.CreateTable,
			Columns: []string{tokentransaction.CreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokencreate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.token_transaction_create = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TokenTransactionCreateBulk is the builder for creating many TokenTransaction entities in bulk.
type TokenTransactionCreateBulk struct {
	config
	err      error
	builders []*TokenTransactionCreate
}

// Save creates the TokenTransaction entities in the database.
func (ttcb *TokenTransactionCreateBulk) Save(ctx context.Context) ([]*TokenTransaction, error) {
	if ttcb.err != nil {
		return nil, ttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TokenTransaction, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TokenTransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TokenTransactionCreateBulk) SaveX(ctx context.Context) []*TokenTransaction {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TokenTransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TokenTransactionCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
