// Code generated by ent, DO NOT EDIT.

package tokenfreeze

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

const (
	// Label holds the string label denoting the tokenfreeze type in the database.
	Label = "token_freeze"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldOwnerPublicKey holds the string denoting the owner_public_key field in the database.
	FieldOwnerPublicKey = "owner_public_key"
	// FieldTokenPublicKey holds the string denoting the token_public_key field in the database.
	FieldTokenPublicKey = "token_public_key"
	// FieldIssuerSignature holds the string denoting the issuer_signature field in the database.
	FieldIssuerSignature = "issuer_signature"
	// FieldWalletProvidedFreezeTimestamp holds the string denoting the wallet_provided_freeze_timestamp field in the database.
	FieldWalletProvidedFreezeTimestamp = "wallet_provided_freeze_timestamp"
	// FieldWalletProvidedThawTimestamp holds the string denoting the wallet_provided_thaw_timestamp field in the database.
	FieldWalletProvidedThawTimestamp = "wallet_provided_thaw_timestamp"
	// Table holds the table name of the tokenfreeze in the database.
	Table = "token_freezes"
)

// Columns holds all SQL columns for tokenfreeze fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStatus,
	FieldOwnerPublicKey,
	FieldTokenPublicKey,
	FieldIssuerSignature,
	FieldWalletProvidedFreezeTimestamp,
	FieldWalletProvidedThawTimestamp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// OwnerPublicKeyValidator is a validator for the "owner_public_key" field. It is called by the builders before save.
	OwnerPublicKeyValidator func([]byte) error
	// TokenPublicKeyValidator is a validator for the "token_public_key" field. It is called by the builders before save.
	TokenPublicKeyValidator func([]byte) error
	// IssuerSignatureValidator is a validator for the "issuer_signature" field. It is called by the builders before save.
	IssuerSignatureValidator func([]byte) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s schematype.TokenFreezeStatus) error {
	switch s {
	case "FROZEN", "THAWED":
		return nil
	default:
		return fmt.Errorf("tokenfreeze: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the TokenFreeze queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByWalletProvidedFreezeTimestamp orders the results by the wallet_provided_freeze_timestamp field.
func ByWalletProvidedFreezeTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalletProvidedFreezeTimestamp, opts...).ToFunc()
}

// ByWalletProvidedThawTimestamp orders the results by the wallet_provided_thaw_timestamp field.
func ByWalletProvidedThawTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalletProvidedThawTimestamp, opts...).ToFunc()
}
