// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/signingkeyshare"
	"github.com/lightsparkdev/spark/so/ent/tokenoutput"
	"github.com/lightsparkdev/spark/so/ent/tokentransaction"
)

// TokenOutputCreate is the builder for creating a TokenOutput entity.
type TokenOutputCreate struct {
	config
	mutation *TokenOutputMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (toc *TokenOutputCreate) SetCreateTime(t time.Time) *TokenOutputCreate {
	toc.mutation.SetCreateTime(t)
	return toc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (toc *TokenOutputCreate) SetNillableCreateTime(t *time.Time) *TokenOutputCreate {
	if t != nil {
		toc.SetCreateTime(*t)
	}
	return toc
}

// SetUpdateTime sets the "update_time" field.
func (toc *TokenOutputCreate) SetUpdateTime(t time.Time) *TokenOutputCreate {
	toc.mutation.SetUpdateTime(t)
	return toc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (toc *TokenOutputCreate) SetNillableUpdateTime(t *time.Time) *TokenOutputCreate {
	if t != nil {
		toc.SetUpdateTime(*t)
	}
	return toc
}

// SetStatus sets the "status" field.
func (toc *TokenOutputCreate) SetStatus(sos schematype.TokenOutputStatus) *TokenOutputCreate {
	toc.mutation.SetStatus(sos)
	return toc
}

// SetOwnerPublicKey sets the "owner_public_key" field.
func (toc *TokenOutputCreate) SetOwnerPublicKey(b []byte) *TokenOutputCreate {
	toc.mutation.SetOwnerPublicKey(b)
	return toc
}

// SetWithdrawBondSats sets the "withdraw_bond_sats" field.
func (toc *TokenOutputCreate) SetWithdrawBondSats(u uint64) *TokenOutputCreate {
	toc.mutation.SetWithdrawBondSats(u)
	return toc
}

// SetWithdrawRelativeBlockLocktime sets the "withdraw_relative_block_locktime" field.
func (toc *TokenOutputCreate) SetWithdrawRelativeBlockLocktime(u uint64) *TokenOutputCreate {
	toc.mutation.SetWithdrawRelativeBlockLocktime(u)
	return toc
}

// SetWithdrawRevocationCommitment sets the "withdraw_revocation_commitment" field.
func (toc *TokenOutputCreate) SetWithdrawRevocationCommitment(b []byte) *TokenOutputCreate {
	toc.mutation.SetWithdrawRevocationCommitment(b)
	return toc
}

// SetTokenPublicKey sets the "token_public_key" field.
func (toc *TokenOutputCreate) SetTokenPublicKey(b []byte) *TokenOutputCreate {
	toc.mutation.SetTokenPublicKey(b)
	return toc
}

// SetTokenAmount sets the "token_amount" field.
func (toc *TokenOutputCreate) SetTokenAmount(b []byte) *TokenOutputCreate {
	toc.mutation.SetTokenAmount(b)
	return toc
}

// SetCreatedTransactionOutputVout sets the "created_transaction_output_vout" field.
func (toc *TokenOutputCreate) SetCreatedTransactionOutputVout(i int32) *TokenOutputCreate {
	toc.mutation.SetCreatedTransactionOutputVout(i)
	return toc
}

// SetSpentOwnershipSignature sets the "spent_ownership_signature" field.
func (toc *TokenOutputCreate) SetSpentOwnershipSignature(b []byte) *TokenOutputCreate {
	toc.mutation.SetSpentOwnershipSignature(b)
	return toc
}

// SetSpentOperatorSpecificOwnershipSignature sets the "spent_operator_specific_ownership_signature" field.
func (toc *TokenOutputCreate) SetSpentOperatorSpecificOwnershipSignature(b []byte) *TokenOutputCreate {
	toc.mutation.SetSpentOperatorSpecificOwnershipSignature(b)
	return toc
}

// SetSpentTransactionInputVout sets the "spent_transaction_input_vout" field.
func (toc *TokenOutputCreate) SetSpentTransactionInputVout(i int32) *TokenOutputCreate {
	toc.mutation.SetSpentTransactionInputVout(i)
	return toc
}

// SetNillableSpentTransactionInputVout sets the "spent_transaction_input_vout" field if the given value is not nil.
func (toc *TokenOutputCreate) SetNillableSpentTransactionInputVout(i *int32) *TokenOutputCreate {
	if i != nil {
		toc.SetSpentTransactionInputVout(*i)
	}
	return toc
}

// SetSpentRevocationSecret sets the "spent_revocation_secret" field.
func (toc *TokenOutputCreate) SetSpentRevocationSecret(b []byte) *TokenOutputCreate {
	toc.mutation.SetSpentRevocationSecret(b)
	return toc
}

// SetConfirmedWithdrawBlockHash sets the "confirmed_withdraw_block_hash" field.
func (toc *TokenOutputCreate) SetConfirmedWithdrawBlockHash(b []byte) *TokenOutputCreate {
	toc.mutation.SetConfirmedWithdrawBlockHash(b)
	return toc
}

// SetNetwork sets the "network" field.
func (toc *TokenOutputCreate) SetNetwork(s schematype.Network) *TokenOutputCreate {
	toc.mutation.SetNetwork(s)
	return toc
}

// SetNillableNetwork sets the "network" field if the given value is not nil.
func (toc *TokenOutputCreate) SetNillableNetwork(s *schematype.Network) *TokenOutputCreate {
	if s != nil {
		toc.SetNetwork(*s)
	}
	return toc
}

// SetTokenIdentifier sets the "token_identifier" field.
func (toc *TokenOutputCreate) SetTokenIdentifier(b []byte) *TokenOutputCreate {
	toc.mutation.SetTokenIdentifier(b)
	return toc
}

// SetID sets the "id" field.
func (toc *TokenOutputCreate) SetID(u uuid.UUID) *TokenOutputCreate {
	toc.mutation.SetID(u)
	return toc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (toc *TokenOutputCreate) SetNillableID(u *uuid.UUID) *TokenOutputCreate {
	if u != nil {
		toc.SetID(*u)
	}
	return toc
}

// SetRevocationKeyshareID sets the "revocation_keyshare" edge to the SigningKeyshare entity by ID.
func (toc *TokenOutputCreate) SetRevocationKeyshareID(id uuid.UUID) *TokenOutputCreate {
	toc.mutation.SetRevocationKeyshareID(id)
	return toc
}

// SetRevocationKeyshare sets the "revocation_keyshare" edge to the SigningKeyshare entity.
func (toc *TokenOutputCreate) SetRevocationKeyshare(s *SigningKeyshare) *TokenOutputCreate {
	return toc.SetRevocationKeyshareID(s.ID)
}

// SetOutputCreatedTokenTransactionID sets the "output_created_token_transaction" edge to the TokenTransaction entity by ID.
func (toc *TokenOutputCreate) SetOutputCreatedTokenTransactionID(id uuid.UUID) *TokenOutputCreate {
	toc.mutation.SetOutputCreatedTokenTransactionID(id)
	return toc
}

// SetNillableOutputCreatedTokenTransactionID sets the "output_created_token_transaction" edge to the TokenTransaction entity by ID if the given value is not nil.
func (toc *TokenOutputCreate) SetNillableOutputCreatedTokenTransactionID(id *uuid.UUID) *TokenOutputCreate {
	if id != nil {
		toc = toc.SetOutputCreatedTokenTransactionID(*id)
	}
	return toc
}

// SetOutputCreatedTokenTransaction sets the "output_created_token_transaction" edge to the TokenTransaction entity.
func (toc *TokenOutputCreate) SetOutputCreatedTokenTransaction(t *TokenTransaction) *TokenOutputCreate {
	return toc.SetOutputCreatedTokenTransactionID(t.ID)
}

// SetOutputSpentTokenTransactionID sets the "output_spent_token_transaction" edge to the TokenTransaction entity by ID.
func (toc *TokenOutputCreate) SetOutputSpentTokenTransactionID(id uuid.UUID) *TokenOutputCreate {
	toc.mutation.SetOutputSpentTokenTransactionID(id)
	return toc
}

// SetNillableOutputSpentTokenTransactionID sets the "output_spent_token_transaction" edge to the TokenTransaction entity by ID if the given value is not nil.
func (toc *TokenOutputCreate) SetNillableOutputSpentTokenTransactionID(id *uuid.UUID) *TokenOutputCreate {
	if id != nil {
		toc = toc.SetOutputSpentTokenTransactionID(*id)
	}
	return toc
}

// SetOutputSpentTokenTransaction sets the "output_spent_token_transaction" edge to the TokenTransaction entity.
func (toc *TokenOutputCreate) SetOutputSpentTokenTransaction(t *TokenTransaction) *TokenOutputCreate {
	return toc.SetOutputSpentTokenTransactionID(t.ID)
}

// Mutation returns the TokenOutputMutation object of the builder.
func (toc *TokenOutputCreate) Mutation() *TokenOutputMutation {
	return toc.mutation
}

// Save creates the TokenOutput in the database.
func (toc *TokenOutputCreate) Save(ctx context.Context) (*TokenOutput, error) {
	toc.defaults()
	return withHooks(ctx, toc.sqlSave, toc.mutation, toc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (toc *TokenOutputCreate) SaveX(ctx context.Context) *TokenOutput {
	v, err := toc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (toc *TokenOutputCreate) Exec(ctx context.Context) error {
	_, err := toc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (toc *TokenOutputCreate) ExecX(ctx context.Context) {
	if err := toc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (toc *TokenOutputCreate) defaults() {
	if _, ok := toc.mutation.CreateTime(); !ok {
		v := tokenoutput.DefaultCreateTime()
		toc.mutation.SetCreateTime(v)
	}
	if _, ok := toc.mutation.UpdateTime(); !ok {
		v := tokenoutput.DefaultUpdateTime()
		toc.mutation.SetUpdateTime(v)
	}
	if _, ok := toc.mutation.ID(); !ok {
		v := tokenoutput.DefaultID()
		toc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (toc *TokenOutputCreate) check() error {
	if _, ok := toc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TokenOutput.create_time"`)}
	}
	if _, ok := toc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TokenOutput.update_time"`)}
	}
	if _, ok := toc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TokenOutput.status"`)}
	}
	if v, ok := toc.mutation.Status(); ok {
		if err := tokenoutput.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TokenOutput.status": %w`, err)}
		}
	}
	if _, ok := toc.mutation.OwnerPublicKey(); !ok {
		return &ValidationError{Name: "owner_public_key", err: errors.New(`ent: missing required field "TokenOutput.owner_public_key"`)}
	}
	if v, ok := toc.mutation.OwnerPublicKey(); ok {
		if err := tokenoutput.OwnerPublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_public_key", err: fmt.Errorf(`ent: validator failed for field "TokenOutput.owner_public_key": %w`, err)}
		}
	}
	if _, ok := toc.mutation.WithdrawBondSats(); !ok {
		return &ValidationError{Name: "withdraw_bond_sats", err: errors.New(`ent: missing required field "TokenOutput.withdraw_bond_sats"`)}
	}
	if _, ok := toc.mutation.WithdrawRelativeBlockLocktime(); !ok {
		return &ValidationError{Name: "withdraw_relative_block_locktime", err: errors.New(`ent: missing required field "TokenOutput.withdraw_relative_block_locktime"`)}
	}
	if _, ok := toc.mutation.WithdrawRevocationCommitment(); !ok {
		return &ValidationError{Name: "withdraw_revocation_commitment", err: errors.New(`ent: missing required field "TokenOutput.withdraw_revocation_commitment"`)}
	}
	if _, ok := toc.mutation.TokenPublicKey(); !ok {
		return &ValidationError{Name: "token_public_key", err: errors.New(`ent: missing required field "TokenOutput.token_public_key"`)}
	}
	if v, ok := toc.mutation.TokenPublicKey(); ok {
		if err := tokenoutput.TokenPublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "token_public_key", err: fmt.Errorf(`ent: validator failed for field "TokenOutput.token_public_key": %w`, err)}
		}
	}
	if _, ok := toc.mutation.TokenAmount(); !ok {
		return &ValidationError{Name: "token_amount", err: errors.New(`ent: missing required field "TokenOutput.token_amount"`)}
	}
	if v, ok := toc.mutation.TokenAmount(); ok {
		if err := tokenoutput.TokenAmountValidator(v); err != nil {
			return &ValidationError{Name: "token_amount", err: fmt.Errorf(`ent: validator failed for field "TokenOutput.token_amount": %w`, err)}
		}
	}
	if _, ok := toc.mutation.CreatedTransactionOutputVout(); !ok {
		return &ValidationError{Name: "created_transaction_output_vout", err: errors.New(`ent: missing required field "TokenOutput.created_transaction_output_vout"`)}
	}
	if v, ok := toc.mutation.Network(); ok {
		if err := tokenoutput.NetworkValidator(v); err != nil {
			return &ValidationError{Name: "network", err: fmt.Errorf(`ent: validator failed for field "TokenOutput.network": %w`, err)}
		}
	}
	if len(toc.mutation.RevocationKeyshareIDs()) == 0 {
		return &ValidationError{Name: "revocation_keyshare", err: errors.New(`ent: missing required edge "TokenOutput.revocation_keyshare"`)}
	}
	return nil
}

func (toc *TokenOutputCreate) sqlSave(ctx context.Context) (*TokenOutput, error) {
	if err := toc.check(); err != nil {
		return nil, err
	}
	_node, _spec := toc.createSpec()
	if err := sqlgraph.CreateNode(ctx, toc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	toc.mutation.id = &_node.ID
	toc.mutation.done = true
	return _node, nil
}

func (toc *TokenOutputCreate) createSpec() (*TokenOutput, *sqlgraph.CreateSpec) {
	var (
		_node = &TokenOutput{config: toc.config}
		_spec = sqlgraph.NewCreateSpec(tokenoutput.Table, sqlgraph.NewFieldSpec(tokenoutput.FieldID, field.TypeUUID))
	)
	if id, ok := toc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := toc.mutation.CreateTime(); ok {
		_spec.SetField(tokenoutput.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := toc.mutation.UpdateTime(); ok {
		_spec.SetField(tokenoutput.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := toc.mutation.Status(); ok {
		_spec.SetField(tokenoutput.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := toc.mutation.OwnerPublicKey(); ok {
		_spec.SetField(tokenoutput.FieldOwnerPublicKey, field.TypeBytes, value)
		_node.OwnerPublicKey = value
	}
	if value, ok := toc.mutation.WithdrawBondSats(); ok {
		_spec.SetField(tokenoutput.FieldWithdrawBondSats, field.TypeUint64, value)
		_node.WithdrawBondSats = value
	}
	if value, ok := toc.mutation.WithdrawRelativeBlockLocktime(); ok {
		_spec.SetField(tokenoutput.FieldWithdrawRelativeBlockLocktime, field.TypeUint64, value)
		_node.WithdrawRelativeBlockLocktime = value
	}
	if value, ok := toc.mutation.WithdrawRevocationCommitment(); ok {
		_spec.SetField(tokenoutput.FieldWithdrawRevocationCommitment, field.TypeBytes, value)
		_node.WithdrawRevocationCommitment = value
	}
	if value, ok := toc.mutation.TokenPublicKey(); ok {
		_spec.SetField(tokenoutput.FieldTokenPublicKey, field.TypeBytes, value)
		_node.TokenPublicKey = value
	}
	if value, ok := toc.mutation.TokenAmount(); ok {
		_spec.SetField(tokenoutput.FieldTokenAmount, field.TypeBytes, value)
		_node.TokenAmount = value
	}
	if value, ok := toc.mutation.CreatedTransactionOutputVout(); ok {
		_spec.SetField(tokenoutput.FieldCreatedTransactionOutputVout, field.TypeInt32, value)
		_node.CreatedTransactionOutputVout = value
	}
	if value, ok := toc.mutation.SpentOwnershipSignature(); ok {
		_spec.SetField(tokenoutput.FieldSpentOwnershipSignature, field.TypeBytes, value)
		_node.SpentOwnershipSignature = value
	}
	if value, ok := toc.mutation.SpentOperatorSpecificOwnershipSignature(); ok {
		_spec.SetField(tokenoutput.FieldSpentOperatorSpecificOwnershipSignature, field.TypeBytes, value)
		_node.SpentOperatorSpecificOwnershipSignature = value
	}
	if value, ok := toc.mutation.SpentTransactionInputVout(); ok {
		_spec.SetField(tokenoutput.FieldSpentTransactionInputVout, field.TypeInt32, value)
		_node.SpentTransactionInputVout = value
	}
	if value, ok := toc.mutation.SpentRevocationSecret(); ok {
		_spec.SetField(tokenoutput.FieldSpentRevocationSecret, field.TypeBytes, value)
		_node.SpentRevocationSecret = value
	}
	if value, ok := toc.mutation.ConfirmedWithdrawBlockHash(); ok {
		_spec.SetField(tokenoutput.FieldConfirmedWithdrawBlockHash, field.TypeBytes, value)
		_node.ConfirmedWithdrawBlockHash = value
	}
	if value, ok := toc.mutation.Network(); ok {
		_spec.SetField(tokenoutput.FieldNetwork, field.TypeEnum, value)
		_node.Network = value
	}
	if value, ok := toc.mutation.TokenIdentifier(); ok {
		_spec.SetField(tokenoutput.FieldTokenIdentifier, field.TypeBytes, value)
		_node.TokenIdentifier = value
	}
	if nodes := toc.mutation.RevocationKeyshareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenoutput.RevocationKeyshareTable,
			Columns: []string{tokenoutput.RevocationKeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.token_output_revocation_keyshare = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := toc.mutation.OutputCreatedTokenTransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenoutput.OutputCreatedTokenTransactionTable,
			Columns: []string{tokenoutput.OutputCreatedTokenTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.token_output_output_created_token_transaction = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := toc.mutation.OutputSpentTokenTransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokenoutput.OutputSpentTokenTransactionTable,
			Columns: []string{tokenoutput.OutputSpentTokenTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.token_output_output_spent_token_transaction = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TokenOutputCreateBulk is the builder for creating many TokenOutput entities in bulk.
type TokenOutputCreateBulk struct {
	config
	err      error
	builders []*TokenOutputCreate
}

// Save creates the TokenOutput entities in the database.
func (tocb *TokenOutputCreateBulk) Save(ctx context.Context) ([]*TokenOutput, error) {
	if tocb.err != nil {
		return nil, tocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tocb.builders))
	nodes := make([]*TokenOutput, len(tocb.builders))
	mutators := make([]Mutator, len(tocb.builders))
	for i := range tocb.builders {
		func(i int, root context.Context) {
			builder := tocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TokenOutputMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tocb *TokenOutputCreateBulk) SaveX(ctx context.Context) []*TokenOutput {
	v, err := tocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tocb *TokenOutputCreateBulk) Exec(ctx context.Context) error {
	_, err := tocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tocb *TokenOutputCreateBulk) ExecX(ctx context.Context) {
	if err := tocb.Exec(ctx); err != nil {
		panic(err)
	}
}
