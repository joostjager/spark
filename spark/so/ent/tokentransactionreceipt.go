// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/tokenmint"
	"github.com/lightsparkdev/spark/so/ent/tokentransactionreceipt"
)

// TokenTransactionReceipt is the model entity for the TokenTransactionReceipt schema.
type TokenTransactionReceipt struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// PartialTokenTransactionHash holds the value of the "partial_token_transaction_hash" field.
	PartialTokenTransactionHash []byte `json:"partial_token_transaction_hash,omitempty"`
	// FinalizedTokenTransactionHash holds the value of the "finalized_token_transaction_hash" field.
	FinalizedTokenTransactionHash []byte `json:"finalized_token_transaction_hash,omitempty"`
	// OperatorSignature holds the value of the "operator_signature" field.
	OperatorSignature []byte `json:"operator_signature,omitempty"`
	// Status holds the value of the "status" field.
	Status schematype.TokenTransactionStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TokenTransactionReceiptQuery when eager-loading is set.
	Edges                          TokenTransactionReceiptEdges `json:"edges"`
	token_transaction_receipt_mint *uuid.UUID
	selectValues                   sql.SelectValues
}

// TokenTransactionReceiptEdges holds the relations/edges for other nodes in the graph.
type TokenTransactionReceiptEdges struct {
	// SpentLeaf holds the value of the spent_leaf edge.
	SpentLeaf []*TokenLeaf `json:"spent_leaf,omitempty"`
	// CreatedLeaf holds the value of the created_leaf edge.
	CreatedLeaf []*TokenLeaf `json:"created_leaf,omitempty"`
	// Mint holds the value of the mint edge.
	Mint *TokenMint `json:"mint,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SpentLeafOrErr returns the SpentLeaf value or an error if the edge
// was not loaded in eager-loading.
func (e TokenTransactionReceiptEdges) SpentLeafOrErr() ([]*TokenLeaf, error) {
	if e.loadedTypes[0] {
		return e.SpentLeaf, nil
	}
	return nil, &NotLoadedError{edge: "spent_leaf"}
}

// CreatedLeafOrErr returns the CreatedLeaf value or an error if the edge
// was not loaded in eager-loading.
func (e TokenTransactionReceiptEdges) CreatedLeafOrErr() ([]*TokenLeaf, error) {
	if e.loadedTypes[1] {
		return e.CreatedLeaf, nil
	}
	return nil, &NotLoadedError{edge: "created_leaf"}
}

// MintOrErr returns the Mint value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TokenTransactionReceiptEdges) MintOrErr() (*TokenMint, error) {
	if e.Mint != nil {
		return e.Mint, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: tokenmint.Label}
	}
	return nil, &NotLoadedError{edge: "mint"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TokenTransactionReceipt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tokentransactionreceipt.FieldPartialTokenTransactionHash, tokentransactionreceipt.FieldFinalizedTokenTransactionHash, tokentransactionreceipt.FieldOperatorSignature:
			values[i] = new([]byte)
		case tokentransactionreceipt.FieldStatus:
			values[i] = new(sql.NullString)
		case tokentransactionreceipt.FieldCreateTime, tokentransactionreceipt.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case tokentransactionreceipt.FieldID:
			values[i] = new(uuid.UUID)
		case tokentransactionreceipt.ForeignKeys[0]: // token_transaction_receipt_mint
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TokenTransactionReceipt fields.
func (ttr *TokenTransactionReceipt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tokentransactionreceipt.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ttr.ID = *value
			}
		case tokentransactionreceipt.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ttr.CreateTime = value.Time
			}
		case tokentransactionreceipt.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ttr.UpdateTime = value.Time
			}
		case tokentransactionreceipt.FieldPartialTokenTransactionHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field partial_token_transaction_hash", values[i])
			} else if value != nil {
				ttr.PartialTokenTransactionHash = *value
			}
		case tokentransactionreceipt.FieldFinalizedTokenTransactionHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field finalized_token_transaction_hash", values[i])
			} else if value != nil {
				ttr.FinalizedTokenTransactionHash = *value
			}
		case tokentransactionreceipt.FieldOperatorSignature:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field operator_signature", values[i])
			} else if value != nil {
				ttr.OperatorSignature = *value
			}
		case tokentransactionreceipt.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ttr.Status = schematype.TokenTransactionStatus(value.String)
			}
		case tokentransactionreceipt.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field token_transaction_receipt_mint", values[i])
			} else if value.Valid {
				ttr.token_transaction_receipt_mint = new(uuid.UUID)
				*ttr.token_transaction_receipt_mint = *value.S.(*uuid.UUID)
			}
		default:
			ttr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TokenTransactionReceipt.
// This includes values selected through modifiers, order, etc.
func (ttr *TokenTransactionReceipt) Value(name string) (ent.Value, error) {
	return ttr.selectValues.Get(name)
}

// QuerySpentLeaf queries the "spent_leaf" edge of the TokenTransactionReceipt entity.
func (ttr *TokenTransactionReceipt) QuerySpentLeaf() *TokenLeafQuery {
	return NewTokenTransactionReceiptClient(ttr.config).QuerySpentLeaf(ttr)
}

// QueryCreatedLeaf queries the "created_leaf" edge of the TokenTransactionReceipt entity.
func (ttr *TokenTransactionReceipt) QueryCreatedLeaf() *TokenLeafQuery {
	return NewTokenTransactionReceiptClient(ttr.config).QueryCreatedLeaf(ttr)
}

// QueryMint queries the "mint" edge of the TokenTransactionReceipt entity.
func (ttr *TokenTransactionReceipt) QueryMint() *TokenMintQuery {
	return NewTokenTransactionReceiptClient(ttr.config).QueryMint(ttr)
}

// Update returns a builder for updating this TokenTransactionReceipt.
// Note that you need to call TokenTransactionReceipt.Unwrap() before calling this method if this TokenTransactionReceipt
// was returned from a transaction, and the transaction was committed or rolled back.
func (ttr *TokenTransactionReceipt) Update() *TokenTransactionReceiptUpdateOne {
	return NewTokenTransactionReceiptClient(ttr.config).UpdateOne(ttr)
}

// Unwrap unwraps the TokenTransactionReceipt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ttr *TokenTransactionReceipt) Unwrap() *TokenTransactionReceipt {
	_tx, ok := ttr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TokenTransactionReceipt is not a transactional entity")
	}
	ttr.config.driver = _tx.drv
	return ttr
}

// String implements the fmt.Stringer.
func (ttr *TokenTransactionReceipt) String() string {
	var builder strings.Builder
	builder.WriteString("TokenTransactionReceipt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ttr.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ttr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ttr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("partial_token_transaction_hash=")
	builder.WriteString(fmt.Sprintf("%v", ttr.PartialTokenTransactionHash))
	builder.WriteString(", ")
	builder.WriteString("finalized_token_transaction_hash=")
	builder.WriteString(fmt.Sprintf("%v", ttr.FinalizedTokenTransactionHash))
	builder.WriteString(", ")
	builder.WriteString("operator_signature=")
	builder.WriteString(fmt.Sprintf("%v", ttr.OperatorSignature))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ttr.Status))
	builder.WriteByte(')')
	return builder.String()
}

// TokenTransactionReceipts is a parsable slice of TokenTransactionReceipt.
type TokenTransactionReceipts []*TokenTransactionReceipt
