// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/preimagerequest"
	"github.com/lightsparkdev/spark/so/ent/preimageshare"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/transfer"
	"github.com/lightsparkdev/spark/so/ent/usersignedtransaction"
)

// PreimageRequestCreate is the builder for creating a PreimageRequest entity.
type PreimageRequestCreate struct {
	config
	mutation *PreimageRequestMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (prc *PreimageRequestCreate) SetCreateTime(t time.Time) *PreimageRequestCreate {
	prc.mutation.SetCreateTime(t)
	return prc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (prc *PreimageRequestCreate) SetNillableCreateTime(t *time.Time) *PreimageRequestCreate {
	if t != nil {
		prc.SetCreateTime(*t)
	}
	return prc
}

// SetUpdateTime sets the "update_time" field.
func (prc *PreimageRequestCreate) SetUpdateTime(t time.Time) *PreimageRequestCreate {
	prc.mutation.SetUpdateTime(t)
	return prc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (prc *PreimageRequestCreate) SetNillableUpdateTime(t *time.Time) *PreimageRequestCreate {
	if t != nil {
		prc.SetUpdateTime(*t)
	}
	return prc
}

// SetPaymentHash sets the "payment_hash" field.
func (prc *PreimageRequestCreate) SetPaymentHash(b []byte) *PreimageRequestCreate {
	prc.mutation.SetPaymentHash(b)
	return prc
}

// SetStatus sets the "status" field.
func (prc *PreimageRequestCreate) SetStatus(srs schematype.PreimageRequestStatus) *PreimageRequestCreate {
	prc.mutation.SetStatus(srs)
	return prc
}

// SetReceiverIdentityPubkey sets the "receiver_identity_pubkey" field.
func (prc *PreimageRequestCreate) SetReceiverIdentityPubkey(b []byte) *PreimageRequestCreate {
	prc.mutation.SetReceiverIdentityPubkey(b)
	return prc
}

// SetPreimage sets the "preimage" field.
func (prc *PreimageRequestCreate) SetPreimage(b []byte) *PreimageRequestCreate {
	prc.mutation.SetPreimage(b)
	return prc
}

// SetID sets the "id" field.
func (prc *PreimageRequestCreate) SetID(u uuid.UUID) *PreimageRequestCreate {
	prc.mutation.SetID(u)
	return prc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (prc *PreimageRequestCreate) SetNillableID(u *uuid.UUID) *PreimageRequestCreate {
	if u != nil {
		prc.SetID(*u)
	}
	return prc
}

// AddTransactionIDs adds the "transactions" edge to the UserSignedTransaction entity by IDs.
func (prc *PreimageRequestCreate) AddTransactionIDs(ids ...uuid.UUID) *PreimageRequestCreate {
	prc.mutation.AddTransactionIDs(ids...)
	return prc
}

// AddTransactions adds the "transactions" edges to the UserSignedTransaction entity.
func (prc *PreimageRequestCreate) AddTransactions(u ...*UserSignedTransaction) *PreimageRequestCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return prc.AddTransactionIDs(ids...)
}

// SetPreimageSharesID sets the "preimage_shares" edge to the PreimageShare entity by ID.
func (prc *PreimageRequestCreate) SetPreimageSharesID(id uuid.UUID) *PreimageRequestCreate {
	prc.mutation.SetPreimageSharesID(id)
	return prc
}

// SetNillablePreimageSharesID sets the "preimage_shares" edge to the PreimageShare entity by ID if the given value is not nil.
func (prc *PreimageRequestCreate) SetNillablePreimageSharesID(id *uuid.UUID) *PreimageRequestCreate {
	if id != nil {
		prc = prc.SetPreimageSharesID(*id)
	}
	return prc
}

// SetPreimageShares sets the "preimage_shares" edge to the PreimageShare entity.
func (prc *PreimageRequestCreate) SetPreimageShares(p *PreimageShare) *PreimageRequestCreate {
	return prc.SetPreimageSharesID(p.ID)
}

// SetTransfersID sets the "transfers" edge to the Transfer entity by ID.
func (prc *PreimageRequestCreate) SetTransfersID(id uuid.UUID) *PreimageRequestCreate {
	prc.mutation.SetTransfersID(id)
	return prc
}

// SetNillableTransfersID sets the "transfers" edge to the Transfer entity by ID if the given value is not nil.
func (prc *PreimageRequestCreate) SetNillableTransfersID(id *uuid.UUID) *PreimageRequestCreate {
	if id != nil {
		prc = prc.SetTransfersID(*id)
	}
	return prc
}

// SetTransfers sets the "transfers" edge to the Transfer entity.
func (prc *PreimageRequestCreate) SetTransfers(t *Transfer) *PreimageRequestCreate {
	return prc.SetTransfersID(t.ID)
}

// Mutation returns the PreimageRequestMutation object of the builder.
func (prc *PreimageRequestCreate) Mutation() *PreimageRequestMutation {
	return prc.mutation
}

// Save creates the PreimageRequest in the database.
func (prc *PreimageRequestCreate) Save(ctx context.Context) (*PreimageRequest, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PreimageRequestCreate) SaveX(ctx context.Context) *PreimageRequest {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PreimageRequestCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PreimageRequestCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PreimageRequestCreate) defaults() {
	if _, ok := prc.mutation.CreateTime(); !ok {
		v := preimagerequest.DefaultCreateTime()
		prc.mutation.SetCreateTime(v)
	}
	if _, ok := prc.mutation.UpdateTime(); !ok {
		v := preimagerequest.DefaultUpdateTime()
		prc.mutation.SetUpdateTime(v)
	}
	if _, ok := prc.mutation.ID(); !ok {
		v := preimagerequest.DefaultID()
		prc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PreimageRequestCreate) check() error {
	if _, ok := prc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "PreimageRequest.create_time"`)}
	}
	if _, ok := prc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "PreimageRequest.update_time"`)}
	}
	if _, ok := prc.mutation.PaymentHash(); !ok {
		return &ValidationError{Name: "payment_hash", err: errors.New(`ent: missing required field "PreimageRequest.payment_hash"`)}
	}
	if v, ok := prc.mutation.PaymentHash(); ok {
		if err := preimagerequest.PaymentHashValidator(v); err != nil {
			return &ValidationError{Name: "payment_hash", err: fmt.Errorf(`ent: validator failed for field "PreimageRequest.payment_hash": %w`, err)}
		}
	}
	if _, ok := prc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PreimageRequest.status"`)}
	}
	if v, ok := prc.mutation.Status(); ok {
		if err := preimagerequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PreimageRequest.status": %w`, err)}
		}
	}
	return nil
}

func (prc *PreimageRequestCreate) sqlSave(ctx context.Context) (*PreimageRequest, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PreimageRequestCreate) createSpec() (*PreimageRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &PreimageRequest{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(preimagerequest.Table, sqlgraph.NewFieldSpec(preimagerequest.FieldID, field.TypeUUID))
	)
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := prc.mutation.CreateTime(); ok {
		_spec.SetField(preimagerequest.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := prc.mutation.UpdateTime(); ok {
		_spec.SetField(preimagerequest.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := prc.mutation.PaymentHash(); ok {
		_spec.SetField(preimagerequest.FieldPaymentHash, field.TypeBytes, value)
		_node.PaymentHash = value
	}
	if value, ok := prc.mutation.Status(); ok {
		_spec.SetField(preimagerequest.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := prc.mutation.ReceiverIdentityPubkey(); ok {
		_spec.SetField(preimagerequest.FieldReceiverIdentityPubkey, field.TypeBytes, value)
		_node.ReceiverIdentityPubkey = value
	}
	if value, ok := prc.mutation.Preimage(); ok {
		_spec.SetField(preimagerequest.FieldPreimage, field.TypeBytes, value)
		_node.Preimage = value
	}
	if nodes := prc.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   preimagerequest.TransactionsTable,
			Columns: []string{preimagerequest.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersignedtransaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.PreimageSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   preimagerequest.PreimageSharesTable,
			Columns: []string{preimagerequest.PreimageSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preimageshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.TransfersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   preimagerequest.TransfersTable,
			Columns: []string{preimagerequest.TransfersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.preimage_request_transfers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PreimageRequestCreateBulk is the builder for creating many PreimageRequest entities in bulk.
type PreimageRequestCreateBulk struct {
	config
	err      error
	builders []*PreimageRequestCreate
}

// Save creates the PreimageRequest entities in the database.
func (prcb *PreimageRequestCreateBulk) Save(ctx context.Context) ([]*PreimageRequest, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PreimageRequest, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PreimageRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PreimageRequestCreateBulk) SaveX(ctx context.Context) []*PreimageRequest {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PreimageRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PreimageRequestCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
