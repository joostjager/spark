// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/tokenleaf"
	"github.com/lightsparkdev/spark/so/ent/tokenmint"
	"github.com/lightsparkdev/spark/so/ent/tokentransactionreceipt"
)

// TokenTransactionReceiptCreate is the builder for creating a TokenTransactionReceipt entity.
type TokenTransactionReceiptCreate struct {
	config
	mutation *TokenTransactionReceiptMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ttrc *TokenTransactionReceiptCreate) SetCreateTime(t time.Time) *TokenTransactionReceiptCreate {
	ttrc.mutation.SetCreateTime(t)
	return ttrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ttrc *TokenTransactionReceiptCreate) SetNillableCreateTime(t *time.Time) *TokenTransactionReceiptCreate {
	if t != nil {
		ttrc.SetCreateTime(*t)
	}
	return ttrc
}

// SetUpdateTime sets the "update_time" field.
func (ttrc *TokenTransactionReceiptCreate) SetUpdateTime(t time.Time) *TokenTransactionReceiptCreate {
	ttrc.mutation.SetUpdateTime(t)
	return ttrc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ttrc *TokenTransactionReceiptCreate) SetNillableUpdateTime(t *time.Time) *TokenTransactionReceiptCreate {
	if t != nil {
		ttrc.SetUpdateTime(*t)
	}
	return ttrc
}

// SetPartialTokenTransactionHash sets the "partial_token_transaction_hash" field.
func (ttrc *TokenTransactionReceiptCreate) SetPartialTokenTransactionHash(b []byte) *TokenTransactionReceiptCreate {
	ttrc.mutation.SetPartialTokenTransactionHash(b)
	return ttrc
}

// SetFinalizedTokenTransactionHash sets the "finalized_token_transaction_hash" field.
func (ttrc *TokenTransactionReceiptCreate) SetFinalizedTokenTransactionHash(b []byte) *TokenTransactionReceiptCreate {
	ttrc.mutation.SetFinalizedTokenTransactionHash(b)
	return ttrc
}

// SetOperatorSignature sets the "operator_signature" field.
func (ttrc *TokenTransactionReceiptCreate) SetOperatorSignature(b []byte) *TokenTransactionReceiptCreate {
	ttrc.mutation.SetOperatorSignature(b)
	return ttrc
}

// SetStatus sets the "status" field.
func (ttrc *TokenTransactionReceiptCreate) SetStatus(sts schematype.TokenTransactionStatus) *TokenTransactionReceiptCreate {
	ttrc.mutation.SetStatus(sts)
	return ttrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ttrc *TokenTransactionReceiptCreate) SetNillableStatus(sts *schematype.TokenTransactionStatus) *TokenTransactionReceiptCreate {
	if sts != nil {
		ttrc.SetStatus(*sts)
	}
	return ttrc
}

// SetID sets the "id" field.
func (ttrc *TokenTransactionReceiptCreate) SetID(u uuid.UUID) *TokenTransactionReceiptCreate {
	ttrc.mutation.SetID(u)
	return ttrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ttrc *TokenTransactionReceiptCreate) SetNillableID(u *uuid.UUID) *TokenTransactionReceiptCreate {
	if u != nil {
		ttrc.SetID(*u)
	}
	return ttrc
}

// AddSpentLeafIDs adds the "spent_leaf" edge to the TokenLeaf entity by IDs.
func (ttrc *TokenTransactionReceiptCreate) AddSpentLeafIDs(ids ...uuid.UUID) *TokenTransactionReceiptCreate {
	ttrc.mutation.AddSpentLeafIDs(ids...)
	return ttrc
}

// AddSpentLeaf adds the "spent_leaf" edges to the TokenLeaf entity.
func (ttrc *TokenTransactionReceiptCreate) AddSpentLeaf(t ...*TokenLeaf) *TokenTransactionReceiptCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttrc.AddSpentLeafIDs(ids...)
}

// AddCreatedLeafIDs adds the "created_leaf" edge to the TokenLeaf entity by IDs.
func (ttrc *TokenTransactionReceiptCreate) AddCreatedLeafIDs(ids ...uuid.UUID) *TokenTransactionReceiptCreate {
	ttrc.mutation.AddCreatedLeafIDs(ids...)
	return ttrc
}

// AddCreatedLeaf adds the "created_leaf" edges to the TokenLeaf entity.
func (ttrc *TokenTransactionReceiptCreate) AddCreatedLeaf(t ...*TokenLeaf) *TokenTransactionReceiptCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttrc.AddCreatedLeafIDs(ids...)
}

// SetMintID sets the "mint" edge to the TokenMint entity by ID.
func (ttrc *TokenTransactionReceiptCreate) SetMintID(id uuid.UUID) *TokenTransactionReceiptCreate {
	ttrc.mutation.SetMintID(id)
	return ttrc
}

// SetNillableMintID sets the "mint" edge to the TokenMint entity by ID if the given value is not nil.
func (ttrc *TokenTransactionReceiptCreate) SetNillableMintID(id *uuid.UUID) *TokenTransactionReceiptCreate {
	if id != nil {
		ttrc = ttrc.SetMintID(*id)
	}
	return ttrc
}

// SetMint sets the "mint" edge to the TokenMint entity.
func (ttrc *TokenTransactionReceiptCreate) SetMint(t *TokenMint) *TokenTransactionReceiptCreate {
	return ttrc.SetMintID(t.ID)
}

// Mutation returns the TokenTransactionReceiptMutation object of the builder.
func (ttrc *TokenTransactionReceiptCreate) Mutation() *TokenTransactionReceiptMutation {
	return ttrc.mutation
}

// Save creates the TokenTransactionReceipt in the database.
func (ttrc *TokenTransactionReceiptCreate) Save(ctx context.Context) (*TokenTransactionReceipt, error) {
	ttrc.defaults()
	return withHooks(ctx, ttrc.sqlSave, ttrc.mutation, ttrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttrc *TokenTransactionReceiptCreate) SaveX(ctx context.Context) *TokenTransactionReceipt {
	v, err := ttrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttrc *TokenTransactionReceiptCreate) Exec(ctx context.Context) error {
	_, err := ttrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttrc *TokenTransactionReceiptCreate) ExecX(ctx context.Context) {
	if err := ttrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttrc *TokenTransactionReceiptCreate) defaults() {
	if _, ok := ttrc.mutation.CreateTime(); !ok {
		v := tokentransactionreceipt.DefaultCreateTime()
		ttrc.mutation.SetCreateTime(v)
	}
	if _, ok := ttrc.mutation.UpdateTime(); !ok {
		v := tokentransactionreceipt.DefaultUpdateTime()
		ttrc.mutation.SetUpdateTime(v)
	}
	if _, ok := ttrc.mutation.ID(); !ok {
		v := tokentransactionreceipt.DefaultID()
		ttrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttrc *TokenTransactionReceiptCreate) check() error {
	if _, ok := ttrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TokenTransactionReceipt.create_time"`)}
	}
	if _, ok := ttrc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TokenTransactionReceipt.update_time"`)}
	}
	if _, ok := ttrc.mutation.PartialTokenTransactionHash(); !ok {
		return &ValidationError{Name: "partial_token_transaction_hash", err: errors.New(`ent: missing required field "TokenTransactionReceipt.partial_token_transaction_hash"`)}
	}
	if v, ok := ttrc.mutation.PartialTokenTransactionHash(); ok {
		if err := tokentransactionreceipt.PartialTokenTransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "partial_token_transaction_hash", err: fmt.Errorf(`ent: validator failed for field "TokenTransactionReceipt.partial_token_transaction_hash": %w`, err)}
		}
	}
	if _, ok := ttrc.mutation.FinalizedTokenTransactionHash(); !ok {
		return &ValidationError{Name: "finalized_token_transaction_hash", err: errors.New(`ent: missing required field "TokenTransactionReceipt.finalized_token_transaction_hash"`)}
	}
	if v, ok := ttrc.mutation.FinalizedTokenTransactionHash(); ok {
		if err := tokentransactionreceipt.FinalizedTokenTransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "finalized_token_transaction_hash", err: fmt.Errorf(`ent: validator failed for field "TokenTransactionReceipt.finalized_token_transaction_hash": %w`, err)}
		}
	}
	if v, ok := ttrc.mutation.Status(); ok {
		if err := tokentransactionreceipt.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TokenTransactionReceipt.status": %w`, err)}
		}
	}
	return nil
}

func (ttrc *TokenTransactionReceiptCreate) sqlSave(ctx context.Context) (*TokenTransactionReceipt, error) {
	if err := ttrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ttrc.mutation.id = &_node.ID
	ttrc.mutation.done = true
	return _node, nil
}

func (ttrc *TokenTransactionReceiptCreate) createSpec() (*TokenTransactionReceipt, *sqlgraph.CreateSpec) {
	var (
		_node = &TokenTransactionReceipt{config: ttrc.config}
		_spec = sqlgraph.NewCreateSpec(tokentransactionreceipt.Table, sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID))
	)
	if id, ok := ttrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ttrc.mutation.CreateTime(); ok {
		_spec.SetField(tokentransactionreceipt.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ttrc.mutation.UpdateTime(); ok {
		_spec.SetField(tokentransactionreceipt.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ttrc.mutation.PartialTokenTransactionHash(); ok {
		_spec.SetField(tokentransactionreceipt.FieldPartialTokenTransactionHash, field.TypeBytes, value)
		_node.PartialTokenTransactionHash = value
	}
	if value, ok := ttrc.mutation.FinalizedTokenTransactionHash(); ok {
		_spec.SetField(tokentransactionreceipt.FieldFinalizedTokenTransactionHash, field.TypeBytes, value)
		_node.FinalizedTokenTransactionHash = value
	}
	if value, ok := ttrc.mutation.OperatorSignature(); ok {
		_spec.SetField(tokentransactionreceipt.FieldOperatorSignature, field.TypeBytes, value)
		_node.OperatorSignature = value
	}
	if value, ok := ttrc.mutation.Status(); ok {
		_spec.SetField(tokentransactionreceipt.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := ttrc.mutation.SpentLeafIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.SpentLeafTable,
			Columns: []string{tokentransactionreceipt.SpentLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttrc.mutation.CreatedLeafIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokentransactionreceipt.CreatedLeafTable,
			Columns: []string{tokentransactionreceipt.CreatedLeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenleaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttrc.mutation.MintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tokentransactionreceipt.MintTable,
			Columns: []string{tokentransactionreceipt.MintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokenmint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.token_transaction_receipt_mint = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TokenTransactionReceiptCreateBulk is the builder for creating many TokenTransactionReceipt entities in bulk.
type TokenTransactionReceiptCreateBulk struct {
	config
	err      error
	builders []*TokenTransactionReceiptCreate
}

// Save creates the TokenTransactionReceipt entities in the database.
func (ttrcb *TokenTransactionReceiptCreateBulk) Save(ctx context.Context) ([]*TokenTransactionReceipt, error) {
	if ttrcb.err != nil {
		return nil, ttrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttrcb.builders))
	nodes := make([]*TokenTransactionReceipt, len(ttrcb.builders))
	mutators := make([]Mutator, len(ttrcb.builders))
	for i := range ttrcb.builders {
		func(i int, root context.Context) {
			builder := ttrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TokenTransactionReceiptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttrcb *TokenTransactionReceiptCreateBulk) SaveX(ctx context.Context) []*TokenTransactionReceipt {
	v, err := ttrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttrcb *TokenTransactionReceiptCreateBulk) Exec(ctx context.Context) error {
	_, err := ttrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttrcb *TokenTransactionReceiptCreateBulk) ExecX(ctx context.Context) {
	if err := ttrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
