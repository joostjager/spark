// Code generated by ent, DO NOT EDIT.

package blockheight

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldEQ(FieldUpdateTime, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int64) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldEQ(FieldHeight, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldLTE(FieldUpdateTime, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int64) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int64) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int64) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int64) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int64) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int64) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int64) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int64) predicate.BlockHeight {
	return predicate.BlockHeight(sql.FieldLTE(FieldHeight, v))
}

// NetworkEQ applies the EQ predicate on the "network" field.
func NetworkEQ(v schematype.Network) predicate.BlockHeight {
	vc := v
	return predicate.BlockHeight(sql.FieldEQ(FieldNetwork, vc))
}

// NetworkNEQ applies the NEQ predicate on the "network" field.
func NetworkNEQ(v schematype.Network) predicate.BlockHeight {
	vc := v
	return predicate.BlockHeight(sql.FieldNEQ(FieldNetwork, vc))
}

// NetworkIn applies the In predicate on the "network" field.
func NetworkIn(vs ...schematype.Network) predicate.BlockHeight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlockHeight(sql.FieldIn(FieldNetwork, v...))
}

// NetworkNotIn applies the NotIn predicate on the "network" field.
func NetworkNotIn(vs ...schematype.Network) predicate.BlockHeight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BlockHeight(sql.FieldNotIn(FieldNetwork, v...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlockHeight) predicate.BlockHeight {
	return predicate.BlockHeight(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlockHeight) predicate.BlockHeight {
	return predicate.BlockHeight(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlockHeight) predicate.BlockHeight {
	return predicate.BlockHeight(sql.NotPredicates(p))
}
