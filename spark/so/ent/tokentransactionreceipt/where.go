// Code generated by ent, DO NOT EDIT.

package tokentransactionreceipt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldUpdateTime, v))
}

// PartialTokenTransactionHash applies equality check predicate on the "partial_token_transaction_hash" field. It's identical to PartialTokenTransactionHashEQ.
func PartialTokenTransactionHash(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldPartialTokenTransactionHash, v))
}

// FinalizedTokenTransactionHash applies equality check predicate on the "finalized_token_transaction_hash" field. It's identical to FinalizedTokenTransactionHashEQ.
func FinalizedTokenTransactionHash(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldFinalizedTokenTransactionHash, v))
}

// OperatorSignature applies equality check predicate on the "operator_signature" field. It's identical to OperatorSignatureEQ.
func OperatorSignature(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldOperatorSignature, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLTE(FieldUpdateTime, v))
}

// PartialTokenTransactionHashEQ applies the EQ predicate on the "partial_token_transaction_hash" field.
func PartialTokenTransactionHashEQ(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldPartialTokenTransactionHash, v))
}

// PartialTokenTransactionHashNEQ applies the NEQ predicate on the "partial_token_transaction_hash" field.
func PartialTokenTransactionHashNEQ(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNEQ(FieldPartialTokenTransactionHash, v))
}

// PartialTokenTransactionHashIn applies the In predicate on the "partial_token_transaction_hash" field.
func PartialTokenTransactionHashIn(vs ...[]byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldIn(FieldPartialTokenTransactionHash, vs...))
}

// PartialTokenTransactionHashNotIn applies the NotIn predicate on the "partial_token_transaction_hash" field.
func PartialTokenTransactionHashNotIn(vs ...[]byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNotIn(FieldPartialTokenTransactionHash, vs...))
}

// PartialTokenTransactionHashGT applies the GT predicate on the "partial_token_transaction_hash" field.
func PartialTokenTransactionHashGT(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGT(FieldPartialTokenTransactionHash, v))
}

// PartialTokenTransactionHashGTE applies the GTE predicate on the "partial_token_transaction_hash" field.
func PartialTokenTransactionHashGTE(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGTE(FieldPartialTokenTransactionHash, v))
}

// PartialTokenTransactionHashLT applies the LT predicate on the "partial_token_transaction_hash" field.
func PartialTokenTransactionHashLT(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLT(FieldPartialTokenTransactionHash, v))
}

// PartialTokenTransactionHashLTE applies the LTE predicate on the "partial_token_transaction_hash" field.
func PartialTokenTransactionHashLTE(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLTE(FieldPartialTokenTransactionHash, v))
}

// FinalizedTokenTransactionHashEQ applies the EQ predicate on the "finalized_token_transaction_hash" field.
func FinalizedTokenTransactionHashEQ(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldFinalizedTokenTransactionHash, v))
}

// FinalizedTokenTransactionHashNEQ applies the NEQ predicate on the "finalized_token_transaction_hash" field.
func FinalizedTokenTransactionHashNEQ(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNEQ(FieldFinalizedTokenTransactionHash, v))
}

// FinalizedTokenTransactionHashIn applies the In predicate on the "finalized_token_transaction_hash" field.
func FinalizedTokenTransactionHashIn(vs ...[]byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldIn(FieldFinalizedTokenTransactionHash, vs...))
}

// FinalizedTokenTransactionHashNotIn applies the NotIn predicate on the "finalized_token_transaction_hash" field.
func FinalizedTokenTransactionHashNotIn(vs ...[]byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNotIn(FieldFinalizedTokenTransactionHash, vs...))
}

// FinalizedTokenTransactionHashGT applies the GT predicate on the "finalized_token_transaction_hash" field.
func FinalizedTokenTransactionHashGT(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGT(FieldFinalizedTokenTransactionHash, v))
}

// FinalizedTokenTransactionHashGTE applies the GTE predicate on the "finalized_token_transaction_hash" field.
func FinalizedTokenTransactionHashGTE(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGTE(FieldFinalizedTokenTransactionHash, v))
}

// FinalizedTokenTransactionHashLT applies the LT predicate on the "finalized_token_transaction_hash" field.
func FinalizedTokenTransactionHashLT(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLT(FieldFinalizedTokenTransactionHash, v))
}

// FinalizedTokenTransactionHashLTE applies the LTE predicate on the "finalized_token_transaction_hash" field.
func FinalizedTokenTransactionHashLTE(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLTE(FieldFinalizedTokenTransactionHash, v))
}

// OperatorSignatureEQ applies the EQ predicate on the "operator_signature" field.
func OperatorSignatureEQ(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldOperatorSignature, v))
}

// OperatorSignatureNEQ applies the NEQ predicate on the "operator_signature" field.
func OperatorSignatureNEQ(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNEQ(FieldOperatorSignature, v))
}

// OperatorSignatureIn applies the In predicate on the "operator_signature" field.
func OperatorSignatureIn(vs ...[]byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldIn(FieldOperatorSignature, vs...))
}

// OperatorSignatureNotIn applies the NotIn predicate on the "operator_signature" field.
func OperatorSignatureNotIn(vs ...[]byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNotIn(FieldOperatorSignature, vs...))
}

// OperatorSignatureGT applies the GT predicate on the "operator_signature" field.
func OperatorSignatureGT(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGT(FieldOperatorSignature, v))
}

// OperatorSignatureGTE applies the GTE predicate on the "operator_signature" field.
func OperatorSignatureGTE(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldGTE(FieldOperatorSignature, v))
}

// OperatorSignatureLT applies the LT predicate on the "operator_signature" field.
func OperatorSignatureLT(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLT(FieldOperatorSignature, v))
}

// OperatorSignatureLTE applies the LTE predicate on the "operator_signature" field.
func OperatorSignatureLTE(v []byte) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldLTE(FieldOperatorSignature, v))
}

// OperatorSignatureIsNil applies the IsNil predicate on the "operator_signature" field.
func OperatorSignatureIsNil() predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldIsNull(FieldOperatorSignature))
}

// OperatorSignatureNotNil applies the NotNil predicate on the "operator_signature" field.
func OperatorSignatureNotNil() predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNotNull(FieldOperatorSignature))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schematype.TokenTransactionStatus) predicate.TokenTransactionReceipt {
	vc := v
	return predicate.TokenTransactionReceipt(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schematype.TokenTransactionStatus) predicate.TokenTransactionReceipt {
	vc := v
	return predicate.TokenTransactionReceipt(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schematype.TokenTransactionStatus) predicate.TokenTransactionReceipt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenTransactionReceipt(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schematype.TokenTransactionStatus) predicate.TokenTransactionReceipt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenTransactionReceipt(sql.FieldNotIn(FieldStatus, v...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.FieldNotNull(FieldStatus))
}

// HasSpentLeaf applies the HasEdge predicate on the "spent_leaf" edge.
func HasSpentLeaf() predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SpentLeafTable, SpentLeafColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSpentLeafWith applies the HasEdge predicate on the "spent_leaf" edge with a given conditions (other predicates).
func HasSpentLeafWith(preds ...predicate.TokenLeaf) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(func(s *sql.Selector) {
		step := newSpentLeafStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedLeaf applies the HasEdge predicate on the "created_leaf" edge.
func HasCreatedLeaf() predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CreatedLeafTable, CreatedLeafColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedLeafWith applies the HasEdge predicate on the "created_leaf" edge with a given conditions (other predicates).
func HasCreatedLeafWith(preds ...predicate.TokenLeaf) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(func(s *sql.Selector) {
		step := newCreatedLeafStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMint applies the HasEdge predicate on the "mint" edge.
func HasMint() predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MintTable, MintColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMintWith applies the HasEdge predicate on the "mint" edge with a given conditions (other predicates).
func HasMintWith(preds ...predicate.TokenMint) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(func(s *sql.Selector) {
		step := newMintStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TokenTransactionReceipt) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TokenTransactionReceipt) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TokenTransactionReceipt) predicate.TokenTransactionReceipt {
	return predicate.TokenTransactionReceipt(sql.NotPredicates(p))
}
