// Code generated by ent, DO NOT EDIT.

package tokentransactionreceipt

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

const (
	// Label holds the string label denoting the tokentransactionreceipt type in the database.
	Label = "token_transaction_receipt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldPartialTokenTransactionHash holds the string denoting the partial_token_transaction_hash field in the database.
	FieldPartialTokenTransactionHash = "partial_token_transaction_hash"
	// FieldFinalizedTokenTransactionHash holds the string denoting the finalized_token_transaction_hash field in the database.
	FieldFinalizedTokenTransactionHash = "finalized_token_transaction_hash"
	// FieldOperatorSignature holds the string denoting the operator_signature field in the database.
	FieldOperatorSignature = "operator_signature"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeSpentLeaf holds the string denoting the spent_leaf edge name in mutations.
	EdgeSpentLeaf = "spent_leaf"
	// EdgeCreatedLeaf holds the string denoting the created_leaf edge name in mutations.
	EdgeCreatedLeaf = "created_leaf"
	// EdgeMint holds the string denoting the mint edge name in mutations.
	EdgeMint = "mint"
	// Table holds the table name of the tokentransactionreceipt in the database.
	Table = "token_transaction_receipts"
	// SpentLeafTable is the table that holds the spent_leaf relation/edge.
	SpentLeafTable = "token_leafs"
	// SpentLeafInverseTable is the table name for the TokenLeaf entity.
	// It exists in this package in order to avoid circular dependency with the "tokenleaf" package.
	SpentLeafInverseTable = "token_leafs"
	// SpentLeafColumn is the table column denoting the spent_leaf relation/edge.
	SpentLeafColumn = "token_leaf_leaf_spent_token_transaction_receipt"
	// CreatedLeafTable is the table that holds the created_leaf relation/edge.
	CreatedLeafTable = "token_leafs"
	// CreatedLeafInverseTable is the table name for the TokenLeaf entity.
	// It exists in this package in order to avoid circular dependency with the "tokenleaf" package.
	CreatedLeafInverseTable = "token_leafs"
	// CreatedLeafColumn is the table column denoting the created_leaf relation/edge.
	CreatedLeafColumn = "token_leaf_leaf_created_token_transaction_receipt"
	// MintTable is the table that holds the mint relation/edge.
	MintTable = "token_transaction_receipts"
	// MintInverseTable is the table name for the TokenMint entity.
	// It exists in this package in order to avoid circular dependency with the "tokenmint" package.
	MintInverseTable = "token_mints"
	// MintColumn is the table column denoting the mint relation/edge.
	MintColumn = "token_transaction_receipt_mint"
)

// Columns holds all SQL columns for tokentransactionreceipt fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldPartialTokenTransactionHash,
	FieldFinalizedTokenTransactionHash,
	FieldOperatorSignature,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "token_transaction_receipts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"token_transaction_receipt_mint",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// PartialTokenTransactionHashValidator is a validator for the "partial_token_transaction_hash" field. It is called by the builders before save.
	PartialTokenTransactionHashValidator func([]byte) error
	// FinalizedTokenTransactionHashValidator is a validator for the "finalized_token_transaction_hash" field. It is called by the builders before save.
	FinalizedTokenTransactionHashValidator func([]byte) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s schematype.TokenTransactionStatus) error {
	switch s {
	case "STARTED", "STARTED_CANCELLED", "SIGNED", "SIGNED_CANCELLED", "FINALIZED":
		return nil
	default:
		return fmt.Errorf("tokentransactionreceipt: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the TokenTransactionReceipt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySpentLeafCount orders the results by spent_leaf count.
func BySpentLeafCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSpentLeafStep(), opts...)
	}
}

// BySpentLeaf orders the results by spent_leaf terms.
func BySpentLeaf(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSpentLeafStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedLeafCount orders the results by created_leaf count.
func ByCreatedLeafCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedLeafStep(), opts...)
	}
}

// ByCreatedLeaf orders the results by created_leaf terms.
func ByCreatedLeaf(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedLeafStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMintField orders the results by mint field.
func ByMintField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMintStep(), sql.OrderByField(field, opts...))
	}
}
func newSpentLeafStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SpentLeafInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SpentLeafTable, SpentLeafColumn),
	)
}
func newCreatedLeafStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedLeafInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CreatedLeafTable, CreatedLeafColumn),
	)
}
func newMintStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MintInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MintTable, MintColumn),
	)
}
