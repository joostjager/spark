// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: spark.proto

package spark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SparkService_GenerateDepositAddress_FullMethodName              = "/spark.SparkService/generate_deposit_address"
	SparkService_StartDepositTreeCreation_FullMethodName            = "/spark.SparkService/start_deposit_tree_creation"
	SparkService_StartTreeCreation_FullMethodName                   = "/spark.SparkService/start_tree_creation"
	SparkService_FinalizeNodeSignatures_FullMethodName              = "/spark.SparkService/finalize_node_signatures"
	SparkService_StartTransfer_FullMethodName                       = "/spark.SparkService/start_transfer"
	SparkService_FinalizeTransfer_FullMethodName                    = "/spark.SparkService/finalize_transfer"
	SparkService_FinalizeTransferWithTransferPackage_FullMethodName = "/spark.SparkService/finalize_transfer_with_transfer_package"
	SparkService_CancelTransfer_FullMethodName                      = "/spark.SparkService/cancel_transfer"
	SparkService_QueryPendingTransfers_FullMethodName               = "/spark.SparkService/query_pending_transfers"
	SparkService_QueryAllTransfers_FullMethodName                   = "/spark.SparkService/query_all_transfers"
	SparkService_ClaimTransferTweakKeys_FullMethodName              = "/spark.SparkService/claim_transfer_tweak_keys"
	SparkService_ClaimTransferSignRefunds_FullMethodName            = "/spark.SparkService/claim_transfer_sign_refunds"
	SparkService_AggregateNodes_FullMethodName                      = "/spark.SparkService/aggregate_nodes"
	SparkService_StorePreimageShare_FullMethodName                  = "/spark.SparkService/store_preimage_share"
	SparkService_GetSigningCommitments_FullMethodName               = "/spark.SparkService/get_signing_commitments"
	SparkService_CooperativeExit_FullMethodName                     = "/spark.SparkService/cooperative_exit"
	SparkService_InitiatePreimageSwap_FullMethodName                = "/spark.SparkService/initiate_preimage_swap"
	SparkService_ProvidePreimage_FullMethodName                     = "/spark.SparkService/provide_preimage"
	SparkService_StartLeafSwap_FullMethodName                       = "/spark.SparkService/start_leaf_swap"
	SparkService_LeafSwap_FullMethodName                            = "/spark.SparkService/leaf_swap"
	SparkService_CounterLeafSwap_FullMethodName                     = "/spark.SparkService/counter_leaf_swap"
	SparkService_RefreshTimelock_FullMethodName                     = "/spark.SparkService/refresh_timelock"
	SparkService_ExtendLeaf_FullMethodName                          = "/spark.SparkService/extend_leaf"
	SparkService_PrepareTreeAddress_FullMethodName                  = "/spark.SparkService/prepare_tree_address"
	SparkService_CreateTree_FullMethodName                          = "/spark.SparkService/create_tree"
	SparkService_GetSigningOperatorList_FullMethodName              = "/spark.SparkService/get_signing_operator_list"
	SparkService_QueryNodes_FullMethodName                          = "/spark.SparkService/query_nodes"
	SparkService_QueryNodesDistribution_FullMethodName              = "/spark.SparkService/query_nodes_distribution"
	SparkService_QueryNodesByValue_FullMethodName                   = "/spark.SparkService/query_nodes_by_value"
	SparkService_QueryBalance_FullMethodName                        = "/spark.SparkService/query_balance"
	SparkService_QueryUserSignedRefunds_FullMethodName              = "/spark.SparkService/query_user_signed_refunds"
	SparkService_StartTokenTransaction_FullMethodName               = "/spark.SparkService/start_token_transaction"
	SparkService_SignTokenTransaction_FullMethodName                = "/spark.SparkService/sign_token_transaction"
	SparkService_FinalizeTokenTransaction_FullMethodName            = "/spark.SparkService/finalize_token_transaction"
	SparkService_FreezeTokens_FullMethodName                        = "/spark.SparkService/freeze_tokens"
	SparkService_QueryTokenOutputs_FullMethodName                   = "/spark.SparkService/query_token_outputs"
	SparkService_QueryTokenTransactions_FullMethodName              = "/spark.SparkService/query_token_transactions"
	SparkService_ReturnLightningPayment_FullMethodName              = "/spark.SparkService/return_lightning_payment"
	SparkService_QueryUnusedDepositAddresses_FullMethodName         = "/spark.SparkService/query_unused_deposit_addresses"
	SparkService_QueryStaticDepositAddresses_FullMethodName         = "/spark.SparkService/query_static_deposit_addresses"
	SparkService_SubscribeToEvents_FullMethodName                   = "/spark.SparkService/subscribe_to_events"
	SparkService_InitiateUtxoSwap_FullMethodName                    = "/spark.SparkService/initiate_utxo_swap"
	SparkService_ExitSingleNodeTrees_FullMethodName                 = "/spark.SparkService/exit_single_node_trees"
)

// SparkServiceClient is the client API for SparkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SparkServiceClient interface {
	GenerateDepositAddress(ctx context.Context, in *GenerateDepositAddressRequest, opts ...grpc.CallOption) (*GenerateDepositAddressResponse, error)
	StartDepositTreeCreation(ctx context.Context, in *StartDepositTreeCreationRequest, opts ...grpc.CallOption) (*StartDepositTreeCreationResponse, error)
	// Deprecated: Do not use.
	// This is deprecated, please use start_deposit_tree_creation instead.
	StartTreeCreation(ctx context.Context, in *StartTreeCreationRequest, opts ...grpc.CallOption) (*StartTreeCreationResponse, error)
	FinalizeNodeSignatures(ctx context.Context, in *FinalizeNodeSignaturesRequest, opts ...grpc.CallOption) (*FinalizeNodeSignaturesResponse, error)
	StartTransfer(ctx context.Context, in *StartTransferRequest, opts ...grpc.CallOption) (*StartTransferResponse, error)
	FinalizeTransfer(ctx context.Context, in *FinalizeTransferRequest, opts ...grpc.CallOption) (*FinalizeTransferResponse, error)
	FinalizeTransferWithTransferPackage(ctx context.Context, in *FinalizeTransferWithTransferPackageRequest, opts ...grpc.CallOption) (*FinalizeTransferResponse, error)
	CancelTransfer(ctx context.Context, in *CancelTransferRequest, opts ...grpc.CallOption) (*CancelTransferResponse, error)
	QueryPendingTransfers(ctx context.Context, in *TransferFilter, opts ...grpc.CallOption) (*QueryTransfersResponse, error)
	QueryAllTransfers(ctx context.Context, in *TransferFilter, opts ...grpc.CallOption) (*QueryTransfersResponse, error)
	ClaimTransferTweakKeys(ctx context.Context, in *ClaimTransferTweakKeysRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClaimTransferSignRefunds(ctx context.Context, in *ClaimTransferSignRefundsRequest, opts ...grpc.CallOption) (*ClaimTransferSignRefundsResponse, error)
	AggregateNodes(ctx context.Context, in *AggregateNodesRequest, opts ...grpc.CallOption) (*AggregateNodesResponse, error)
	StorePreimageShare(ctx context.Context, in *StorePreimageShareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSigningCommitments(ctx context.Context, in *GetSigningCommitmentsRequest, opts ...grpc.CallOption) (*GetSigningCommitmentsResponse, error)
	CooperativeExit(ctx context.Context, in *CooperativeExitRequest, opts ...grpc.CallOption) (*CooperativeExitResponse, error)
	InitiatePreimageSwap(ctx context.Context, in *InitiatePreimageSwapRequest, opts ...grpc.CallOption) (*InitiatePreimageSwapResponse, error)
	ProvidePreimage(ctx context.Context, in *ProvidePreimageRequest, opts ...grpc.CallOption) (*ProvidePreimageResponse, error)
	// This is the exact same as start_transfer, but expresses to the SO
	// this transfer is specifically for a leaf swap.
	StartLeafSwap(ctx context.Context, in *StartTransferRequest, opts ...grpc.CallOption) (*StartTransferResponse, error)
	// Deprecated: Do not use.
	// This is deprecated, please use counter_leaf_swap instead.
	LeafSwap(ctx context.Context, in *CounterLeafSwapRequest, opts ...grpc.CallOption) (*CounterLeafSwapResponse, error)
	// This is the exact same as start_leaf_swap, but signs with
	// an adaptor public key after a counterparty has begun the swap via start_leaf_swap.
	CounterLeafSwap(ctx context.Context, in *CounterLeafSwapRequest, opts ...grpc.CallOption) (*CounterLeafSwapResponse, error)
	RefreshTimelock(ctx context.Context, in *RefreshTimelockRequest, opts ...grpc.CallOption) (*RefreshTimelockResponse, error)
	ExtendLeaf(ctx context.Context, in *ExtendLeafRequest, opts ...grpc.CallOption) (*ExtendLeafResponse, error)
	PrepareTreeAddress(ctx context.Context, in *PrepareTreeAddressRequest, opts ...grpc.CallOption) (*PrepareTreeAddressResponse, error)
	CreateTree(ctx context.Context, in *CreateTreeRequest, opts ...grpc.CallOption) (*CreateTreeResponse, error)
	GetSigningOperatorList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSigningOperatorListResponse, error)
	QueryNodes(ctx context.Context, in *QueryNodesRequest, opts ...grpc.CallOption) (*QueryNodesResponse, error)
	QueryNodesDistribution(ctx context.Context, in *QueryNodesDistributionRequest, opts ...grpc.CallOption) (*QueryNodesDistributionResponse, error)
	QueryNodesByValue(ctx context.Context, in *QueryNodesByValueRequest, opts ...grpc.CallOption) (*QueryNodesByValueResponse, error)
	QueryBalance(ctx context.Context, in *QueryBalanceRequest, opts ...grpc.CallOption) (*QueryBalanceResponse, error)
	QueryUserSignedRefunds(ctx context.Context, in *QueryUserSignedRefundsRequest, opts ...grpc.CallOption) (*QueryUserSignedRefundsResponse, error)
	// Token RPCs
	StartTokenTransaction(ctx context.Context, in *StartTokenTransactionRequest, opts ...grpc.CallOption) (*StartTokenTransactionResponse, error)
	SignTokenTransaction(ctx context.Context, in *SignTokenTransactionRequest, opts ...grpc.CallOption) (*SignTokenTransactionResponse, error)
	FinalizeTokenTransaction(ctx context.Context, in *FinalizeTokenTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FreezeTokens(ctx context.Context, in *FreezeTokensRequest, opts ...grpc.CallOption) (*FreezeTokensResponse, error)
	QueryTokenOutputs(ctx context.Context, in *QueryTokenOutputsRequest, opts ...grpc.CallOption) (*QueryTokenOutputsResponse, error)
	QueryTokenTransactions(ctx context.Context, in *QueryTokenTransactionsRequest, opts ...grpc.CallOption) (*QueryTokenTransactionsResponse, error)
	ReturnLightningPayment(ctx context.Context, in *ReturnLightningPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueryUnusedDepositAddresses(ctx context.Context, in *QueryUnusedDepositAddressesRequest, opts ...grpc.CallOption) (*QueryUnusedDepositAddressesResponse, error)
	QueryStaticDepositAddresses(ctx context.Context, in *QueryStaticDepositAddressesRequest, opts ...grpc.CallOption) (*QueryStaticDepositAddressesResponse, error)
	SubscribeToEvents(ctx context.Context, in *SubscribeToEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeToEventsResponse], error)
	// Claim a deposit to a static address from SSP side
	InitiateUtxoSwap(ctx context.Context, in *InitiateUtxoSwapRequest, opts ...grpc.CallOption) (*InitiateUtxoSwapResponse, error)
	ExitSingleNodeTrees(ctx context.Context, in *ExitSingleNodeTreesRequest, opts ...grpc.CallOption) (*ExitSingleNodeTreesResponse, error)
}

type sparkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSparkServiceClient(cc grpc.ClientConnInterface) SparkServiceClient {
	return &sparkServiceClient{cc}
}

func (c *sparkServiceClient) GenerateDepositAddress(ctx context.Context, in *GenerateDepositAddressRequest, opts ...grpc.CallOption) (*GenerateDepositAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateDepositAddressResponse)
	err := c.cc.Invoke(ctx, SparkService_GenerateDepositAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) StartDepositTreeCreation(ctx context.Context, in *StartDepositTreeCreationRequest, opts ...grpc.CallOption) (*StartDepositTreeCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartDepositTreeCreationResponse)
	err := c.cc.Invoke(ctx, SparkService_StartDepositTreeCreation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *sparkServiceClient) StartTreeCreation(ctx context.Context, in *StartTreeCreationRequest, opts ...grpc.CallOption) (*StartTreeCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTreeCreationResponse)
	err := c.cc.Invoke(ctx, SparkService_StartTreeCreation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) FinalizeNodeSignatures(ctx context.Context, in *FinalizeNodeSignaturesRequest, opts ...grpc.CallOption) (*FinalizeNodeSignaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeNodeSignaturesResponse)
	err := c.cc.Invoke(ctx, SparkService_FinalizeNodeSignatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) StartTransfer(ctx context.Context, in *StartTransferRequest, opts ...grpc.CallOption) (*StartTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTransferResponse)
	err := c.cc.Invoke(ctx, SparkService_StartTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) FinalizeTransfer(ctx context.Context, in *FinalizeTransferRequest, opts ...grpc.CallOption) (*FinalizeTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeTransferResponse)
	err := c.cc.Invoke(ctx, SparkService_FinalizeTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) FinalizeTransferWithTransferPackage(ctx context.Context, in *FinalizeTransferWithTransferPackageRequest, opts ...grpc.CallOption) (*FinalizeTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeTransferResponse)
	err := c.cc.Invoke(ctx, SparkService_FinalizeTransferWithTransferPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) CancelTransfer(ctx context.Context, in *CancelTransferRequest, opts ...grpc.CallOption) (*CancelTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTransferResponse)
	err := c.cc.Invoke(ctx, SparkService_CancelTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryPendingTransfers(ctx context.Context, in *TransferFilter, opts ...grpc.CallOption) (*QueryTransfersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTransfersResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryPendingTransfers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryAllTransfers(ctx context.Context, in *TransferFilter, opts ...grpc.CallOption) (*QueryTransfersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTransfersResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryAllTransfers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) ClaimTransferTweakKeys(ctx context.Context, in *ClaimTransferTweakKeysRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkService_ClaimTransferTweakKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) ClaimTransferSignRefunds(ctx context.Context, in *ClaimTransferSignRefundsRequest, opts ...grpc.CallOption) (*ClaimTransferSignRefundsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimTransferSignRefundsResponse)
	err := c.cc.Invoke(ctx, SparkService_ClaimTransferSignRefunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) AggregateNodes(ctx context.Context, in *AggregateNodesRequest, opts ...grpc.CallOption) (*AggregateNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AggregateNodesResponse)
	err := c.cc.Invoke(ctx, SparkService_AggregateNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) StorePreimageShare(ctx context.Context, in *StorePreimageShareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkService_StorePreimageShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) GetSigningCommitments(ctx context.Context, in *GetSigningCommitmentsRequest, opts ...grpc.CallOption) (*GetSigningCommitmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSigningCommitmentsResponse)
	err := c.cc.Invoke(ctx, SparkService_GetSigningCommitments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) CooperativeExit(ctx context.Context, in *CooperativeExitRequest, opts ...grpc.CallOption) (*CooperativeExitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CooperativeExitResponse)
	err := c.cc.Invoke(ctx, SparkService_CooperativeExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) InitiatePreimageSwap(ctx context.Context, in *InitiatePreimageSwapRequest, opts ...grpc.CallOption) (*InitiatePreimageSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiatePreimageSwapResponse)
	err := c.cc.Invoke(ctx, SparkService_InitiatePreimageSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) ProvidePreimage(ctx context.Context, in *ProvidePreimageRequest, opts ...grpc.CallOption) (*ProvidePreimageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvidePreimageResponse)
	err := c.cc.Invoke(ctx, SparkService_ProvidePreimage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) StartLeafSwap(ctx context.Context, in *StartTransferRequest, opts ...grpc.CallOption) (*StartTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTransferResponse)
	err := c.cc.Invoke(ctx, SparkService_StartLeafSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *sparkServiceClient) LeafSwap(ctx context.Context, in *CounterLeafSwapRequest, opts ...grpc.CallOption) (*CounterLeafSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CounterLeafSwapResponse)
	err := c.cc.Invoke(ctx, SparkService_LeafSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) CounterLeafSwap(ctx context.Context, in *CounterLeafSwapRequest, opts ...grpc.CallOption) (*CounterLeafSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CounterLeafSwapResponse)
	err := c.cc.Invoke(ctx, SparkService_CounterLeafSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) RefreshTimelock(ctx context.Context, in *RefreshTimelockRequest, opts ...grpc.CallOption) (*RefreshTimelockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTimelockResponse)
	err := c.cc.Invoke(ctx, SparkService_RefreshTimelock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) ExtendLeaf(ctx context.Context, in *ExtendLeafRequest, opts ...grpc.CallOption) (*ExtendLeafResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtendLeafResponse)
	err := c.cc.Invoke(ctx, SparkService_ExtendLeaf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) PrepareTreeAddress(ctx context.Context, in *PrepareTreeAddressRequest, opts ...grpc.CallOption) (*PrepareTreeAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareTreeAddressResponse)
	err := c.cc.Invoke(ctx, SparkService_PrepareTreeAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) CreateTree(ctx context.Context, in *CreateTreeRequest, opts ...grpc.CallOption) (*CreateTreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTreeResponse)
	err := c.cc.Invoke(ctx, SparkService_CreateTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) GetSigningOperatorList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSigningOperatorListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSigningOperatorListResponse)
	err := c.cc.Invoke(ctx, SparkService_GetSigningOperatorList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryNodes(ctx context.Context, in *QueryNodesRequest, opts ...grpc.CallOption) (*QueryNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryNodesResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryNodesDistribution(ctx context.Context, in *QueryNodesDistributionRequest, opts ...grpc.CallOption) (*QueryNodesDistributionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryNodesDistributionResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryNodesDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryNodesByValue(ctx context.Context, in *QueryNodesByValueRequest, opts ...grpc.CallOption) (*QueryNodesByValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryNodesByValueResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryNodesByValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryBalance(ctx context.Context, in *QueryBalanceRequest, opts ...grpc.CallOption) (*QueryBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryBalanceResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryUserSignedRefunds(ctx context.Context, in *QueryUserSignedRefundsRequest, opts ...grpc.CallOption) (*QueryUserSignedRefundsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserSignedRefundsResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryUserSignedRefunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) StartTokenTransaction(ctx context.Context, in *StartTokenTransactionRequest, opts ...grpc.CallOption) (*StartTokenTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTokenTransactionResponse)
	err := c.cc.Invoke(ctx, SparkService_StartTokenTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) SignTokenTransaction(ctx context.Context, in *SignTokenTransactionRequest, opts ...grpc.CallOption) (*SignTokenTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignTokenTransactionResponse)
	err := c.cc.Invoke(ctx, SparkService_SignTokenTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) FinalizeTokenTransaction(ctx context.Context, in *FinalizeTokenTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkService_FinalizeTokenTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) FreezeTokens(ctx context.Context, in *FreezeTokensRequest, opts ...grpc.CallOption) (*FreezeTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FreezeTokensResponse)
	err := c.cc.Invoke(ctx, SparkService_FreezeTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryTokenOutputs(ctx context.Context, in *QueryTokenOutputsRequest, opts ...grpc.CallOption) (*QueryTokenOutputsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTokenOutputsResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryTokenOutputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryTokenTransactions(ctx context.Context, in *QueryTokenTransactionsRequest, opts ...grpc.CallOption) (*QueryTokenTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTokenTransactionsResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryTokenTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) ReturnLightningPayment(ctx context.Context, in *ReturnLightningPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkService_ReturnLightningPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryUnusedDepositAddresses(ctx context.Context, in *QueryUnusedDepositAddressesRequest, opts ...grpc.CallOption) (*QueryUnusedDepositAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUnusedDepositAddressesResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryUnusedDepositAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryStaticDepositAddresses(ctx context.Context, in *QueryStaticDepositAddressesRequest, opts ...grpc.CallOption) (*QueryStaticDepositAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStaticDepositAddressesResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryStaticDepositAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) SubscribeToEvents(ctx context.Context, in *SubscribeToEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeToEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SparkService_ServiceDesc.Streams[0], SparkService_SubscribeToEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToEventsRequest, SubscribeToEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SparkService_SubscribeToEventsClient = grpc.ServerStreamingClient[SubscribeToEventsResponse]

func (c *sparkServiceClient) InitiateUtxoSwap(ctx context.Context, in *InitiateUtxoSwapRequest, opts ...grpc.CallOption) (*InitiateUtxoSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateUtxoSwapResponse)
	err := c.cc.Invoke(ctx, SparkService_InitiateUtxoSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) ExitSingleNodeTrees(ctx context.Context, in *ExitSingleNodeTreesRequest, opts ...grpc.CallOption) (*ExitSingleNodeTreesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitSingleNodeTreesResponse)
	err := c.cc.Invoke(ctx, SparkService_ExitSingleNodeTrees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SparkServiceServer is the server API for SparkService service.
// All implementations must embed UnimplementedSparkServiceServer
// for forward compatibility.
type SparkServiceServer interface {
	GenerateDepositAddress(context.Context, *GenerateDepositAddressRequest) (*GenerateDepositAddressResponse, error)
	StartDepositTreeCreation(context.Context, *StartDepositTreeCreationRequest) (*StartDepositTreeCreationResponse, error)
	// Deprecated: Do not use.
	// This is deprecated, please use start_deposit_tree_creation instead.
	StartTreeCreation(context.Context, *StartTreeCreationRequest) (*StartTreeCreationResponse, error)
	FinalizeNodeSignatures(context.Context, *FinalizeNodeSignaturesRequest) (*FinalizeNodeSignaturesResponse, error)
	StartTransfer(context.Context, *StartTransferRequest) (*StartTransferResponse, error)
	FinalizeTransfer(context.Context, *FinalizeTransferRequest) (*FinalizeTransferResponse, error)
	FinalizeTransferWithTransferPackage(context.Context, *FinalizeTransferWithTransferPackageRequest) (*FinalizeTransferResponse, error)
	CancelTransfer(context.Context, *CancelTransferRequest) (*CancelTransferResponse, error)
	QueryPendingTransfers(context.Context, *TransferFilter) (*QueryTransfersResponse, error)
	QueryAllTransfers(context.Context, *TransferFilter) (*QueryTransfersResponse, error)
	ClaimTransferTweakKeys(context.Context, *ClaimTransferTweakKeysRequest) (*emptypb.Empty, error)
	ClaimTransferSignRefunds(context.Context, *ClaimTransferSignRefundsRequest) (*ClaimTransferSignRefundsResponse, error)
	AggregateNodes(context.Context, *AggregateNodesRequest) (*AggregateNodesResponse, error)
	StorePreimageShare(context.Context, *StorePreimageShareRequest) (*emptypb.Empty, error)
	GetSigningCommitments(context.Context, *GetSigningCommitmentsRequest) (*GetSigningCommitmentsResponse, error)
	CooperativeExit(context.Context, *CooperativeExitRequest) (*CooperativeExitResponse, error)
	InitiatePreimageSwap(context.Context, *InitiatePreimageSwapRequest) (*InitiatePreimageSwapResponse, error)
	ProvidePreimage(context.Context, *ProvidePreimageRequest) (*ProvidePreimageResponse, error)
	// This is the exact same as start_transfer, but expresses to the SO
	// this transfer is specifically for a leaf swap.
	StartLeafSwap(context.Context, *StartTransferRequest) (*StartTransferResponse, error)
	// Deprecated: Do not use.
	// This is deprecated, please use counter_leaf_swap instead.
	LeafSwap(context.Context, *CounterLeafSwapRequest) (*CounterLeafSwapResponse, error)
	// This is the exact same as start_leaf_swap, but signs with
	// an adaptor public key after a counterparty has begun the swap via start_leaf_swap.
	CounterLeafSwap(context.Context, *CounterLeafSwapRequest) (*CounterLeafSwapResponse, error)
	RefreshTimelock(context.Context, *RefreshTimelockRequest) (*RefreshTimelockResponse, error)
	ExtendLeaf(context.Context, *ExtendLeafRequest) (*ExtendLeafResponse, error)
	PrepareTreeAddress(context.Context, *PrepareTreeAddressRequest) (*PrepareTreeAddressResponse, error)
	CreateTree(context.Context, *CreateTreeRequest) (*CreateTreeResponse, error)
	GetSigningOperatorList(context.Context, *emptypb.Empty) (*GetSigningOperatorListResponse, error)
	QueryNodes(context.Context, *QueryNodesRequest) (*QueryNodesResponse, error)
	QueryNodesDistribution(context.Context, *QueryNodesDistributionRequest) (*QueryNodesDistributionResponse, error)
	QueryNodesByValue(context.Context, *QueryNodesByValueRequest) (*QueryNodesByValueResponse, error)
	QueryBalance(context.Context, *QueryBalanceRequest) (*QueryBalanceResponse, error)
	QueryUserSignedRefunds(context.Context, *QueryUserSignedRefundsRequest) (*QueryUserSignedRefundsResponse, error)
	// Token RPCs
	StartTokenTransaction(context.Context, *StartTokenTransactionRequest) (*StartTokenTransactionResponse, error)
	SignTokenTransaction(context.Context, *SignTokenTransactionRequest) (*SignTokenTransactionResponse, error)
	FinalizeTokenTransaction(context.Context, *FinalizeTokenTransactionRequest) (*emptypb.Empty, error)
	FreezeTokens(context.Context, *FreezeTokensRequest) (*FreezeTokensResponse, error)
	QueryTokenOutputs(context.Context, *QueryTokenOutputsRequest) (*QueryTokenOutputsResponse, error)
	QueryTokenTransactions(context.Context, *QueryTokenTransactionsRequest) (*QueryTokenTransactionsResponse, error)
	ReturnLightningPayment(context.Context, *ReturnLightningPaymentRequest) (*emptypb.Empty, error)
	QueryUnusedDepositAddresses(context.Context, *QueryUnusedDepositAddressesRequest) (*QueryUnusedDepositAddressesResponse, error)
	QueryStaticDepositAddresses(context.Context, *QueryStaticDepositAddressesRequest) (*QueryStaticDepositAddressesResponse, error)
	SubscribeToEvents(*SubscribeToEventsRequest, grpc.ServerStreamingServer[SubscribeToEventsResponse]) error
	// Claim a deposit to a static address from SSP side
	InitiateUtxoSwap(context.Context, *InitiateUtxoSwapRequest) (*InitiateUtxoSwapResponse, error)
	ExitSingleNodeTrees(context.Context, *ExitSingleNodeTreesRequest) (*ExitSingleNodeTreesResponse, error)
	mustEmbedUnimplementedSparkServiceServer()
}

// UnimplementedSparkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSparkServiceServer struct{}

func (UnimplementedSparkServiceServer) GenerateDepositAddress(context.Context, *GenerateDepositAddressRequest) (*GenerateDepositAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDepositAddress not implemented")
}
func (UnimplementedSparkServiceServer) StartDepositTreeCreation(context.Context, *StartDepositTreeCreationRequest) (*StartDepositTreeCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDepositTreeCreation not implemented")
}
func (UnimplementedSparkServiceServer) StartTreeCreation(context.Context, *StartTreeCreationRequest) (*StartTreeCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTreeCreation not implemented")
}
func (UnimplementedSparkServiceServer) FinalizeNodeSignatures(context.Context, *FinalizeNodeSignaturesRequest) (*FinalizeNodeSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeNodeSignatures not implemented")
}
func (UnimplementedSparkServiceServer) StartTransfer(context.Context, *StartTransferRequest) (*StartTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTransfer not implemented")
}
func (UnimplementedSparkServiceServer) FinalizeTransfer(context.Context, *FinalizeTransferRequest) (*FinalizeTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeTransfer not implemented")
}
func (UnimplementedSparkServiceServer) FinalizeTransferWithTransferPackage(context.Context, *FinalizeTransferWithTransferPackageRequest) (*FinalizeTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeTransferWithTransferPackage not implemented")
}
func (UnimplementedSparkServiceServer) CancelTransfer(context.Context, *CancelTransferRequest) (*CancelTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransfer not implemented")
}
func (UnimplementedSparkServiceServer) QueryPendingTransfers(context.Context, *TransferFilter) (*QueryTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPendingTransfers not implemented")
}
func (UnimplementedSparkServiceServer) QueryAllTransfers(context.Context, *TransferFilter) (*QueryTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllTransfers not implemented")
}
func (UnimplementedSparkServiceServer) ClaimTransferTweakKeys(context.Context, *ClaimTransferTweakKeysRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTransferTweakKeys not implemented")
}
func (UnimplementedSparkServiceServer) ClaimTransferSignRefunds(context.Context, *ClaimTransferSignRefundsRequest) (*ClaimTransferSignRefundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTransferSignRefunds not implemented")
}
func (UnimplementedSparkServiceServer) AggregateNodes(context.Context, *AggregateNodesRequest) (*AggregateNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateNodes not implemented")
}
func (UnimplementedSparkServiceServer) StorePreimageShare(context.Context, *StorePreimageShareRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorePreimageShare not implemented")
}
func (UnimplementedSparkServiceServer) GetSigningCommitments(context.Context, *GetSigningCommitmentsRequest) (*GetSigningCommitmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSigningCommitments not implemented")
}
func (UnimplementedSparkServiceServer) CooperativeExit(context.Context, *CooperativeExitRequest) (*CooperativeExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperativeExit not implemented")
}
func (UnimplementedSparkServiceServer) InitiatePreimageSwap(context.Context, *InitiatePreimageSwapRequest) (*InitiatePreimageSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePreimageSwap not implemented")
}
func (UnimplementedSparkServiceServer) ProvidePreimage(context.Context, *ProvidePreimageRequest) (*ProvidePreimageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvidePreimage not implemented")
}
func (UnimplementedSparkServiceServer) StartLeafSwap(context.Context, *StartTransferRequest) (*StartTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLeafSwap not implemented")
}
func (UnimplementedSparkServiceServer) LeafSwap(context.Context, *CounterLeafSwapRequest) (*CounterLeafSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeafSwap not implemented")
}
func (UnimplementedSparkServiceServer) CounterLeafSwap(context.Context, *CounterLeafSwapRequest) (*CounterLeafSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CounterLeafSwap not implemented")
}
func (UnimplementedSparkServiceServer) RefreshTimelock(context.Context, *RefreshTimelockRequest) (*RefreshTimelockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTimelock not implemented")
}
func (UnimplementedSparkServiceServer) ExtendLeaf(context.Context, *ExtendLeafRequest) (*ExtendLeafResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendLeaf not implemented")
}
func (UnimplementedSparkServiceServer) PrepareTreeAddress(context.Context, *PrepareTreeAddressRequest) (*PrepareTreeAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareTreeAddress not implemented")
}
func (UnimplementedSparkServiceServer) CreateTree(context.Context, *CreateTreeRequest) (*CreateTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTree not implemented")
}
func (UnimplementedSparkServiceServer) GetSigningOperatorList(context.Context, *emptypb.Empty) (*GetSigningOperatorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSigningOperatorList not implemented")
}
func (UnimplementedSparkServiceServer) QueryNodes(context.Context, *QueryNodesRequest) (*QueryNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodes not implemented")
}
func (UnimplementedSparkServiceServer) QueryNodesDistribution(context.Context, *QueryNodesDistributionRequest) (*QueryNodesDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodesDistribution not implemented")
}
func (UnimplementedSparkServiceServer) QueryNodesByValue(context.Context, *QueryNodesByValueRequest) (*QueryNodesByValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodesByValue not implemented")
}
func (UnimplementedSparkServiceServer) QueryBalance(context.Context, *QueryBalanceRequest) (*QueryBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBalance not implemented")
}
func (UnimplementedSparkServiceServer) QueryUserSignedRefunds(context.Context, *QueryUserSignedRefundsRequest) (*QueryUserSignedRefundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserSignedRefunds not implemented")
}
func (UnimplementedSparkServiceServer) StartTokenTransaction(context.Context, *StartTokenTransactionRequest) (*StartTokenTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTokenTransaction not implemented")
}
func (UnimplementedSparkServiceServer) SignTokenTransaction(context.Context, *SignTokenTransactionRequest) (*SignTokenTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTokenTransaction not implemented")
}
func (UnimplementedSparkServiceServer) FinalizeTokenTransaction(context.Context, *FinalizeTokenTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeTokenTransaction not implemented")
}
func (UnimplementedSparkServiceServer) FreezeTokens(context.Context, *FreezeTokensRequest) (*FreezeTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeTokens not implemented")
}
func (UnimplementedSparkServiceServer) QueryTokenOutputs(context.Context, *QueryTokenOutputsRequest) (*QueryTokenOutputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenOutputs not implemented")
}
func (UnimplementedSparkServiceServer) QueryTokenTransactions(context.Context, *QueryTokenTransactionsRequest) (*QueryTokenTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenTransactions not implemented")
}
func (UnimplementedSparkServiceServer) ReturnLightningPayment(context.Context, *ReturnLightningPaymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnLightningPayment not implemented")
}
func (UnimplementedSparkServiceServer) QueryUnusedDepositAddresses(context.Context, *QueryUnusedDepositAddressesRequest) (*QueryUnusedDepositAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUnusedDepositAddresses not implemented")
}
func (UnimplementedSparkServiceServer) QueryStaticDepositAddresses(context.Context, *QueryStaticDepositAddressesRequest) (*QueryStaticDepositAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStaticDepositAddresses not implemented")
}
func (UnimplementedSparkServiceServer) SubscribeToEvents(*SubscribeToEventsRequest, grpc.ServerStreamingServer[SubscribeToEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}
func (UnimplementedSparkServiceServer) InitiateUtxoSwap(context.Context, *InitiateUtxoSwapRequest) (*InitiateUtxoSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateUtxoSwap not implemented")
}
func (UnimplementedSparkServiceServer) ExitSingleNodeTrees(context.Context, *ExitSingleNodeTreesRequest) (*ExitSingleNodeTreesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitSingleNodeTrees not implemented")
}
func (UnimplementedSparkServiceServer) mustEmbedUnimplementedSparkServiceServer() {}
func (UnimplementedSparkServiceServer) testEmbeddedByValue()                      {}

// UnsafeSparkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SparkServiceServer will
// result in compilation errors.
type UnsafeSparkServiceServer interface {
	mustEmbedUnimplementedSparkServiceServer()
}

func RegisterSparkServiceServer(s grpc.ServiceRegistrar, srv SparkServiceServer) {
	// If the following call pancis, it indicates UnimplementedSparkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SparkService_ServiceDesc, srv)
}

func _SparkService_GenerateDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).GenerateDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_GenerateDepositAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).GenerateDepositAddress(ctx, req.(*GenerateDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_StartDepositTreeCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDepositTreeCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).StartDepositTreeCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_StartDepositTreeCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).StartDepositTreeCreation(ctx, req.(*StartDepositTreeCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_StartTreeCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTreeCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).StartTreeCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_StartTreeCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).StartTreeCreation(ctx, req.(*StartTreeCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_FinalizeNodeSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeNodeSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).FinalizeNodeSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_FinalizeNodeSignatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).FinalizeNodeSignatures(ctx, req.(*FinalizeNodeSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_StartTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).StartTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_StartTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).StartTransfer(ctx, req.(*StartTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_FinalizeTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).FinalizeTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_FinalizeTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).FinalizeTransfer(ctx, req.(*FinalizeTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_FinalizeTransferWithTransferPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeTransferWithTransferPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).FinalizeTransferWithTransferPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_FinalizeTransferWithTransferPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).FinalizeTransferWithTransferPackage(ctx, req.(*FinalizeTransferWithTransferPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_CancelTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).CancelTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_CancelTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).CancelTransfer(ctx, req.(*CancelTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryPendingTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryPendingTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryPendingTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryPendingTransfers(ctx, req.(*TransferFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryAllTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryAllTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryAllTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryAllTransfers(ctx, req.(*TransferFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_ClaimTransferTweakKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTransferTweakKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).ClaimTransferTweakKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_ClaimTransferTweakKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).ClaimTransferTweakKeys(ctx, req.(*ClaimTransferTweakKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_ClaimTransferSignRefunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTransferSignRefundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).ClaimTransferSignRefunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_ClaimTransferSignRefunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).ClaimTransferSignRefunds(ctx, req.(*ClaimTransferSignRefundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_AggregateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).AggregateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_AggregateNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).AggregateNodes(ctx, req.(*AggregateNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_StorePreimageShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorePreimageShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).StorePreimageShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_StorePreimageShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).StorePreimageShare(ctx, req.(*StorePreimageShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_GetSigningCommitments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSigningCommitmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).GetSigningCommitments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_GetSigningCommitments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).GetSigningCommitments(ctx, req.(*GetSigningCommitmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_CooperativeExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CooperativeExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).CooperativeExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_CooperativeExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).CooperativeExit(ctx, req.(*CooperativeExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_InitiatePreimageSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiatePreimageSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).InitiatePreimageSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_InitiatePreimageSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).InitiatePreimageSwap(ctx, req.(*InitiatePreimageSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_ProvidePreimage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvidePreimageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).ProvidePreimage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_ProvidePreimage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).ProvidePreimage(ctx, req.(*ProvidePreimageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_StartLeafSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).StartLeafSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_StartLeafSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).StartLeafSwap(ctx, req.(*StartTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_LeafSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterLeafSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).LeafSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_LeafSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).LeafSwap(ctx, req.(*CounterLeafSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_CounterLeafSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterLeafSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).CounterLeafSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_CounterLeafSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).CounterLeafSwap(ctx, req.(*CounterLeafSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_RefreshTimelock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTimelockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).RefreshTimelock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_RefreshTimelock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).RefreshTimelock(ctx, req.(*RefreshTimelockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_ExtendLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).ExtendLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_ExtendLeaf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).ExtendLeaf(ctx, req.(*ExtendLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_PrepareTreeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareTreeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).PrepareTreeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_PrepareTreeAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).PrepareTreeAddress(ctx, req.(*PrepareTreeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_CreateTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).CreateTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_CreateTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).CreateTree(ctx, req.(*CreateTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_GetSigningOperatorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).GetSigningOperatorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_GetSigningOperatorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).GetSigningOperatorList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryNodes(ctx, req.(*QueryNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryNodesDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodesDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryNodesDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryNodesDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryNodesDistribution(ctx, req.(*QueryNodesDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryNodesByValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodesByValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryNodesByValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryNodesByValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryNodesByValue(ctx, req.(*QueryNodesByValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryBalance(ctx, req.(*QueryBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryUserSignedRefunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserSignedRefundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryUserSignedRefunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryUserSignedRefunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryUserSignedRefunds(ctx, req.(*QueryUserSignedRefundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_StartTokenTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTokenTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).StartTokenTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_StartTokenTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).StartTokenTransaction(ctx, req.(*StartTokenTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_SignTokenTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTokenTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).SignTokenTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_SignTokenTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).SignTokenTransaction(ctx, req.(*SignTokenTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_FinalizeTokenTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeTokenTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).FinalizeTokenTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_FinalizeTokenTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).FinalizeTokenTransaction(ctx, req.(*FinalizeTokenTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_FreezeTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreezeTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).FreezeTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_FreezeTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).FreezeTokens(ctx, req.(*FreezeTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryTokenOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryTokenOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryTokenOutputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryTokenOutputs(ctx, req.(*QueryTokenOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryTokenTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryTokenTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryTokenTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryTokenTransactions(ctx, req.(*QueryTokenTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_ReturnLightningPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnLightningPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).ReturnLightningPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_ReturnLightningPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).ReturnLightningPayment(ctx, req.(*ReturnLightningPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryUnusedDepositAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnusedDepositAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryUnusedDepositAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryUnusedDepositAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryUnusedDepositAddresses(ctx, req.(*QueryUnusedDepositAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryStaticDepositAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStaticDepositAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryStaticDepositAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryStaticDepositAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryStaticDepositAddresses(ctx, req.(*QueryStaticDepositAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SparkServiceServer).SubscribeToEvents(m, &grpc.GenericServerStream[SubscribeToEventsRequest, SubscribeToEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SparkService_SubscribeToEventsServer = grpc.ServerStreamingServer[SubscribeToEventsResponse]

func _SparkService_InitiateUtxoSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateUtxoSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).InitiateUtxoSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_InitiateUtxoSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).InitiateUtxoSwap(ctx, req.(*InitiateUtxoSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_ExitSingleNodeTrees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitSingleNodeTreesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).ExitSingleNodeTrees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_ExitSingleNodeTrees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).ExitSingleNodeTrees(ctx, req.(*ExitSingleNodeTreesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SparkService_ServiceDesc is the grpc.ServiceDesc for SparkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SparkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spark.SparkService",
	HandlerType: (*SparkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "generate_deposit_address",
			Handler:    _SparkService_GenerateDepositAddress_Handler,
		},
		{
			MethodName: "start_deposit_tree_creation",
			Handler:    _SparkService_StartDepositTreeCreation_Handler,
		},
		{
			MethodName: "start_tree_creation",
			Handler:    _SparkService_StartTreeCreation_Handler,
		},
		{
			MethodName: "finalize_node_signatures",
			Handler:    _SparkService_FinalizeNodeSignatures_Handler,
		},
		{
			MethodName: "start_transfer",
			Handler:    _SparkService_StartTransfer_Handler,
		},
		{
			MethodName: "finalize_transfer",
			Handler:    _SparkService_FinalizeTransfer_Handler,
		},
		{
			MethodName: "finalize_transfer_with_transfer_package",
			Handler:    _SparkService_FinalizeTransferWithTransferPackage_Handler,
		},
		{
			MethodName: "cancel_transfer",
			Handler:    _SparkService_CancelTransfer_Handler,
		},
		{
			MethodName: "query_pending_transfers",
			Handler:    _SparkService_QueryPendingTransfers_Handler,
		},
		{
			MethodName: "query_all_transfers",
			Handler:    _SparkService_QueryAllTransfers_Handler,
		},
		{
			MethodName: "claim_transfer_tweak_keys",
			Handler:    _SparkService_ClaimTransferTweakKeys_Handler,
		},
		{
			MethodName: "claim_transfer_sign_refunds",
			Handler:    _SparkService_ClaimTransferSignRefunds_Handler,
		},
		{
			MethodName: "aggregate_nodes",
			Handler:    _SparkService_AggregateNodes_Handler,
		},
		{
			MethodName: "store_preimage_share",
			Handler:    _SparkService_StorePreimageShare_Handler,
		},
		{
			MethodName: "get_signing_commitments",
			Handler:    _SparkService_GetSigningCommitments_Handler,
		},
		{
			MethodName: "cooperative_exit",
			Handler:    _SparkService_CooperativeExit_Handler,
		},
		{
			MethodName: "initiate_preimage_swap",
			Handler:    _SparkService_InitiatePreimageSwap_Handler,
		},
		{
			MethodName: "provide_preimage",
			Handler:    _SparkService_ProvidePreimage_Handler,
		},
		{
			MethodName: "start_leaf_swap",
			Handler:    _SparkService_StartLeafSwap_Handler,
		},
		{
			MethodName: "leaf_swap",
			Handler:    _SparkService_LeafSwap_Handler,
		},
		{
			MethodName: "counter_leaf_swap",
			Handler:    _SparkService_CounterLeafSwap_Handler,
		},
		{
			MethodName: "refresh_timelock",
			Handler:    _SparkService_RefreshTimelock_Handler,
		},
		{
			MethodName: "extend_leaf",
			Handler:    _SparkService_ExtendLeaf_Handler,
		},
		{
			MethodName: "prepare_tree_address",
			Handler:    _SparkService_PrepareTreeAddress_Handler,
		},
		{
			MethodName: "create_tree",
			Handler:    _SparkService_CreateTree_Handler,
		},
		{
			MethodName: "get_signing_operator_list",
			Handler:    _SparkService_GetSigningOperatorList_Handler,
		},
		{
			MethodName: "query_nodes",
			Handler:    _SparkService_QueryNodes_Handler,
		},
		{
			MethodName: "query_nodes_distribution",
			Handler:    _SparkService_QueryNodesDistribution_Handler,
		},
		{
			MethodName: "query_nodes_by_value",
			Handler:    _SparkService_QueryNodesByValue_Handler,
		},
		{
			MethodName: "query_balance",
			Handler:    _SparkService_QueryBalance_Handler,
		},
		{
			MethodName: "query_user_signed_refunds",
			Handler:    _SparkService_QueryUserSignedRefunds_Handler,
		},
		{
			MethodName: "start_token_transaction",
			Handler:    _SparkService_StartTokenTransaction_Handler,
		},
		{
			MethodName: "sign_token_transaction",
			Handler:    _SparkService_SignTokenTransaction_Handler,
		},
		{
			MethodName: "finalize_token_transaction",
			Handler:    _SparkService_FinalizeTokenTransaction_Handler,
		},
		{
			MethodName: "freeze_tokens",
			Handler:    _SparkService_FreezeTokens_Handler,
		},
		{
			MethodName: "query_token_outputs",
			Handler:    _SparkService_QueryTokenOutputs_Handler,
		},
		{
			MethodName: "query_token_transactions",
			Handler:    _SparkService_QueryTokenTransactions_Handler,
		},
		{
			MethodName: "return_lightning_payment",
			Handler:    _SparkService_ReturnLightningPayment_Handler,
		},
		{
			MethodName: "query_unused_deposit_addresses",
			Handler:    _SparkService_QueryUnusedDepositAddresses_Handler,
		},
		{
			MethodName: "query_static_deposit_addresses",
			Handler:    _SparkService_QueryStaticDepositAddresses_Handler,
		},
		{
			MethodName: "initiate_utxo_swap",
			Handler:    _SparkService_InitiateUtxoSwap_Handler,
		},
		{
			MethodName: "exit_single_node_trees",
			Handler:    _SparkService_ExitSingleNodeTrees_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribe_to_events",
			Handler:       _SparkService_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spark.proto",
}
