// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: spark_token.proto

package spark_token

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	spark "github.com/lightsparkdev/spark/proto/spark"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = spark.Network(0)
)

// define the regex for a UUID once up-front
var _spark_token_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on TokenOutputToSpend with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TokenOutputToSpend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenOutputToSpend with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenOutputToSpendMultiError, or nil if none found.
func (m *TokenOutputToSpend) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenOutputToSpend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPrevTokenTransactionHash()) != 32 {
		err := TokenOutputToSpendValidationError{
			field:  "PrevTokenTransactionHash",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PrevTokenTransactionVout

	if len(errors) > 0 {
		return TokenOutputToSpendMultiError(errors)
	}

	return nil
}

// TokenOutputToSpendMultiError is an error wrapping multiple validation errors
// returned by TokenOutputToSpend.ValidateAll() if the designated constraints
// aren't met.
type TokenOutputToSpendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenOutputToSpendMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenOutputToSpendMultiError) AllErrors() []error { return m }

// TokenOutputToSpendValidationError is the validation error returned by
// TokenOutputToSpend.Validate if the designated constraints aren't met.
type TokenOutputToSpendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenOutputToSpendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenOutputToSpendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenOutputToSpendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenOutputToSpendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenOutputToSpendValidationError) ErrorName() string {
	return "TokenOutputToSpendValidationError"
}

// Error satisfies the builtin error interface
func (e TokenOutputToSpendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenOutputToSpend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenOutputToSpendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenOutputToSpendValidationError{}

// Validate checks the field values on TokenTransferInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TokenTransferInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenTransferInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenTransferInputMultiError, or nil if none found.
func (m *TokenTransferInput) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenTransferInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutputsToSpend() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokenTransferInputValidationError{
						field:  fmt.Sprintf("OutputsToSpend[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokenTransferInputValidationError{
						field:  fmt.Sprintf("OutputsToSpend[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokenTransferInputValidationError{
					field:  fmt.Sprintf("OutputsToSpend[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TokenTransferInputMultiError(errors)
	}

	return nil
}

// TokenTransferInputMultiError is an error wrapping multiple validation errors
// returned by TokenTransferInput.ValidateAll() if the designated constraints
// aren't met.
type TokenTransferInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenTransferInputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenTransferInputMultiError) AllErrors() []error { return m }

// TokenTransferInputValidationError is the validation error returned by
// TokenTransferInput.Validate if the designated constraints aren't met.
type TokenTransferInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenTransferInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenTransferInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenTransferInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenTransferInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenTransferInputValidationError) ErrorName() string {
	return "TokenTransferInputValidationError"
}

// Error satisfies the builtin error interface
func (e TokenTransferInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenTransferInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenTransferInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenTransferInputValidationError{}

// Validate checks the field values on TokenMintInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenMintInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenMintInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenMintInputMultiError,
// or nil if none found.
func (m *TokenMintInput) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenMintInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIssuerPublicKey()) != 33 {
		err := TokenMintInputValidationError{
			field:  "IssuerPublicKey",
			reason: "value length must be 33 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IssuerProvidedTimestamp

	if len(errors) > 0 {
		return TokenMintInputMultiError(errors)
	}

	return nil
}

// TokenMintInputMultiError is an error wrapping multiple validation errors
// returned by TokenMintInput.ValidateAll() if the designated constraints
// aren't met.
type TokenMintInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenMintInputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenMintInputMultiError) AllErrors() []error { return m }

// TokenMintInputValidationError is the validation error returned by
// TokenMintInput.Validate if the designated constraints aren't met.
type TokenMintInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenMintInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenMintInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenMintInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenMintInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenMintInputValidationError) ErrorName() string { return "TokenMintInputValidationError" }

// Error satisfies the builtin error interface
func (e TokenMintInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenMintInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenMintInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenMintInputValidationError{}

// Validate checks the field values on TokenOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenOutputMultiError, or
// nil if none found.
func (m *TokenOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetOwnerPublicKey()) != 33 {
		err := TokenOutputValidationError{
			field:  "OwnerPublicKey",
			reason: "value length must be 33 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTokenPublicKey()) != 33 {
		err := TokenOutputValidationError{
			field:  "TokenPublicKey",
			reason: "value length must be 33 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTokenAmount()) != 16 {
		err := TokenOutputValidationError{
			field:  "TokenAmount",
			reason: "value length must be 16 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Id != nil {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = TokenOutputValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.RevocationCommitment != nil {

		if len(m.GetRevocationCommitment()) != 33 {
			err := TokenOutputValidationError{
				field:  "RevocationCommitment",
				reason: "value length must be 33 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.WithdrawBondSats != nil {
		// no validation rules for WithdrawBondSats
	}

	if m.WithdrawRelativeBlockLocktime != nil {
		// no validation rules for WithdrawRelativeBlockLocktime
	}

	if len(errors) > 0 {
		return TokenOutputMultiError(errors)
	}

	return nil
}

func (m *TokenOutput) _validateUuid(uuid string) error {
	if matched := _spark_token_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// TokenOutputMultiError is an error wrapping multiple validation errors
// returned by TokenOutput.ValidateAll() if the designated constraints aren't met.
type TokenOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenOutputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenOutputMultiError) AllErrors() []error { return m }

// TokenOutputValidationError is the validation error returned by
// TokenOutput.Validate if the designated constraints aren't met.
type TokenOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenOutputValidationError) ErrorName() string { return "TokenOutputValidationError" }

// Error satisfies the builtin error interface
func (e TokenOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenOutputValidationError{}

// Validate checks the field values on TokenTransaction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TokenTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenTransactionMultiError, or nil if none found.
func (m *TokenTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	for idx, item := range m.GetTokenOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokenTransactionValidationError{
						field:  fmt.Sprintf("TokenOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokenTransactionValidationError{
						field:  fmt.Sprintf("TokenOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokenTransactionValidationError{
					field:  fmt.Sprintf("TokenOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSparkOperatorIdentityPublicKeys() {
		_, _ = idx, item

		if len(item) != 33 {
			err := TokenTransactionValidationError{
				field:  fmt.Sprintf("SparkOperatorIdentityPublicKeys[%v]", idx),
				reason: "value length must be 33 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetExpiryTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenTransactionValidationError{
					field:  "ExpiryTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenTransactionValidationError{
					field:  "ExpiryTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiryTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenTransactionValidationError{
				field:  "ExpiryTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _TokenTransaction_Network_NotInLookup[m.GetNetwork()]; ok {
		err := TokenTransactionValidationError{
			field:  "Network",
			reason: "value must not be in list [UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.TokenInputs.(type) {
	case *TokenTransaction_MintInput:
		if v == nil {
			err := TokenTransactionValidationError{
				field:  "TokenInputs",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMintInput()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokenTransactionValidationError{
						field:  "MintInput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokenTransactionValidationError{
						field:  "MintInput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMintInput()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokenTransactionValidationError{
					field:  "MintInput",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TokenTransaction_TransferInput:
		if v == nil {
			err := TokenTransactionValidationError{
				field:  "TokenInputs",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransferInput()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokenTransactionValidationError{
						field:  "TransferInput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokenTransactionValidationError{
						field:  "TransferInput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransferInput()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokenTransactionValidationError{
					field:  "TransferInput",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TokenTransactionMultiError(errors)
	}

	return nil
}

// TokenTransactionMultiError is an error wrapping multiple validation errors
// returned by TokenTransaction.ValidateAll() if the designated constraints
// aren't met.
type TokenTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenTransactionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenTransactionMultiError) AllErrors() []error { return m }

// TokenTransactionValidationError is the validation error returned by
// TokenTransaction.Validate if the designated constraints aren't met.
type TokenTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenTransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenTransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenTransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenTransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenTransactionValidationError) ErrorName() string { return "TokenTransactionValidationError" }

// Error satisfies the builtin error interface
func (e TokenTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenTransactionValidationError{}

var _TokenTransaction_Network_NotInLookup = map[spark.Network]struct{}{
	0: {},
}

// Validate checks the field values on SignatureWithIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignatureWithIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignatureWithIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignatureWithIndexMultiError, or nil if none found.
func (m *SignatureWithIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *SignatureWithIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetSignature()); l < 64 || l > 73 {
		err := SignatureWithIndexValidationError{
			field:  "Signature",
			reason: "value length must be between 64 and 73 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InputIndex

	if len(errors) > 0 {
		return SignatureWithIndexMultiError(errors)
	}

	return nil
}

// SignatureWithIndexMultiError is an error wrapping multiple validation errors
// returned by SignatureWithIndex.ValidateAll() if the designated constraints
// aren't met.
type SignatureWithIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignatureWithIndexMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignatureWithIndexMultiError) AllErrors() []error { return m }

// SignatureWithIndexValidationError is the validation error returned by
// SignatureWithIndex.Validate if the designated constraints aren't met.
type SignatureWithIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignatureWithIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignatureWithIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignatureWithIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignatureWithIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignatureWithIndexValidationError) ErrorName() string {
	return "SignatureWithIndexValidationError"
}

// Error satisfies the builtin error interface
func (e SignatureWithIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignatureWithIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignatureWithIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignatureWithIndexValidationError{}

// Validate checks the field values on InputTtxoSignaturesPerOperator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InputTtxoSignaturesPerOperator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InputTtxoSignaturesPerOperator with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InputTtxoSignaturesPerOperatorMultiError, or nil if none found.
func (m *InputTtxoSignaturesPerOperator) ValidateAll() error {
	return m.validate(true)
}

func (m *InputTtxoSignaturesPerOperator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTtxoSignatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputTtxoSignaturesPerOperatorValidationError{
						field:  fmt.Sprintf("TtxoSignatures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputTtxoSignaturesPerOperatorValidationError{
						field:  fmt.Sprintf("TtxoSignatures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputTtxoSignaturesPerOperatorValidationError{
					field:  fmt.Sprintf("TtxoSignatures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetOperatorIdentityPublicKey()) != 33 {
		err := InputTtxoSignaturesPerOperatorValidationError{
			field:  "OperatorIdentityPublicKey",
			reason: "value length must be 33 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InputTtxoSignaturesPerOperatorMultiError(errors)
	}

	return nil
}

// InputTtxoSignaturesPerOperatorMultiError is an error wrapping multiple
// validation errors returned by InputTtxoSignaturesPerOperator.ValidateAll()
// if the designated constraints aren't met.
type InputTtxoSignaturesPerOperatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputTtxoSignaturesPerOperatorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputTtxoSignaturesPerOperatorMultiError) AllErrors() []error { return m }

// InputTtxoSignaturesPerOperatorValidationError is the validation error
// returned by InputTtxoSignaturesPerOperator.Validate if the designated
// constraints aren't met.
type InputTtxoSignaturesPerOperatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputTtxoSignaturesPerOperatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputTtxoSignaturesPerOperatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputTtxoSignaturesPerOperatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputTtxoSignaturesPerOperatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputTtxoSignaturesPerOperatorValidationError) ErrorName() string {
	return "InputTtxoSignaturesPerOperatorValidationError"
}

// Error satisfies the builtin error interface
func (e InputTtxoSignaturesPerOperatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputTtxoSignaturesPerOperator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputTtxoSignaturesPerOperatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputTtxoSignaturesPerOperatorValidationError{}

// Validate checks the field values on StartTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartTransactionRequestMultiError, or nil if none found.
func (m *StartTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIdentityPublicKey()) != 33 {
		err := StartTransactionRequestValidationError{
			field:  "IdentityPublicKey",
			reason: "value length must be 33 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPartialTokenTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartTransactionRequestValidationError{
					field:  "PartialTokenTransaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartTransactionRequestValidationError{
					field:  "PartialTokenTransaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartialTokenTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartTransactionRequestValidationError{
				field:  "PartialTokenTransaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPartialTokenTransactionOwnerSignatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartTransactionRequestValidationError{
						field:  fmt.Sprintf("PartialTokenTransactionOwnerSignatures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartTransactionRequestValidationError{
						field:  fmt.Sprintf("PartialTokenTransactionOwnerSignatures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartTransactionRequestValidationError{
					field:  fmt.Sprintf("PartialTokenTransactionOwnerSignatures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if val := m.GetValidityDurationSeconds(); val <= 1 || val >= 300 {
		err := StartTransactionRequestValidationError{
			field:  "ValidityDurationSeconds",
			reason: "value must be inside range (1, 300)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StartTransactionRequestMultiError(errors)
	}

	return nil
}

// StartTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by StartTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartTransactionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartTransactionRequestMultiError) AllErrors() []error { return m }

// StartTransactionRequestValidationError is the validation error returned by
// StartTransactionRequest.Validate if the designated constraints aren't met.
type StartTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartTransactionRequestValidationError) ErrorName() string {
	return "StartTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartTransactionRequestValidationError{}

// Validate checks the field values on StartTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartTransactionResponseMultiError, or nil if none found.
func (m *StartTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFinalTokenTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartTransactionResponseValidationError{
					field:  "FinalTokenTransaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartTransactionResponseValidationError{
					field:  "FinalTokenTransaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinalTokenTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartTransactionResponseValidationError{
				field:  "FinalTokenTransaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetKeyshareInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartTransactionResponseValidationError{
					field:  "KeyshareInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartTransactionResponseValidationError{
					field:  "KeyshareInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeyshareInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartTransactionResponseValidationError{
				field:  "KeyshareInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartTransactionResponseMultiError(errors)
	}

	return nil
}

// StartTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by StartTransactionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartTransactionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartTransactionResponseMultiError) AllErrors() []error { return m }

// StartTransactionResponseValidationError is the validation error returned by
// StartTransactionResponse.Validate if the designated constraints aren't met.
type StartTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartTransactionResponseValidationError) ErrorName() string {
	return "StartTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartTransactionResponseValidationError{}

// Validate checks the field values on CommitTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommitTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommitTransactionRequestMultiError, or nil if none found.
func (m *CommitTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFinalTokenTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommitTransactionRequestValidationError{
					field:  "FinalTokenTransaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommitTransactionRequestValidationError{
					field:  "FinalTokenTransaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinalTokenTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommitTransactionRequestValidationError{
				field:  "FinalTokenTransaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetFinalTokenTransactionHash()) != 32 {
		err := CommitTransactionRequestValidationError{
			field:  "FinalTokenTransactionHash",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetInputTtxoSignaturesPerOperator() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommitTransactionRequestValidationError{
						field:  fmt.Sprintf("InputTtxoSignaturesPerOperator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommitTransactionRequestValidationError{
						field:  fmt.Sprintf("InputTtxoSignaturesPerOperator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommitTransactionRequestValidationError{
					field:  fmt.Sprintf("InputTtxoSignaturesPerOperator[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetOwnerIdentityPublicKey()) != 33 {
		err := CommitTransactionRequestValidationError{
			field:  "OwnerIdentityPublicKey",
			reason: "value length must be 33 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommitTransactionRequestMultiError(errors)
	}

	return nil
}

// CommitTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by CommitTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type CommitTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitTransactionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitTransactionRequestMultiError) AllErrors() []error { return m }

// CommitTransactionRequestValidationError is the validation error returned by
// CommitTransactionRequest.Validate if the designated constraints aren't met.
type CommitTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitTransactionRequestValidationError) ErrorName() string {
	return "CommitTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommitTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitTransactionRequestValidationError{}

// Validate checks the field values on CommitTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommitTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommitTransactionResponseMultiError, or nil if none found.
func (m *CommitTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CommitTransactionResponseMultiError(errors)
	}

	return nil
}

// CommitTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by CommitTransactionResponse.ValidateAll() if the
// designated constraints aren't met.
type CommitTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitTransactionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitTransactionResponseMultiError) AllErrors() []error { return m }

// CommitTransactionResponseValidationError is the validation error returned by
// CommitTransactionResponse.Validate if the designated constraints aren't met.
type CommitTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitTransactionResponseValidationError) ErrorName() string {
	return "CommitTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommitTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitTransactionResponseValidationError{}
